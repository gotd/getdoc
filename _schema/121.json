{
  "index": {
    "layer": 121,
    "categories": [
      {
        "name": "constructor",
        "values": [
          "account.authorizationForm",
          "account.authorizations",
          "account.autoDownloadSettings",
          "account.contentSettings",
          "account.password",
          "account.passwordInputSettings",
          "account.passwordSettings",
          "account.privacyRules",
          "account.sentEmailCode",
          "account.takeout",
          "account.themes",
          "account.themesNotModified",
          "account.tmpPassword",
          "account.wallPapers",
          "account.wallPapersNotModified",
          "account.webAuthorizations",
          "accountDaysTTL",
          "auth.authorization",
          "auth.authorizationSignUpRequired",
          "auth.codeTypeCall",
          "auth.codeTypeFlashCall",
          "auth.codeTypeSms",
          "auth.exportedAuthorization",
          "auth.loginToken",
          "auth.loginTokenMigrateTo",
          "auth.loginTokenSuccess",
          "auth.passwordRecovery",
          "auth.sentCode",
          "auth.sentCodeTypeApp",
          "auth.sentCodeTypeCall",
          "auth.sentCodeTypeFlashCall",
          "auth.sentCodeTypeSms",
          "authorization",
          "autoDownloadSettings",
          "bankCardOpenUrl",
          "baseThemeArctic",
          "baseThemeClassic",
          "baseThemeDay",
          "baseThemeNight",
          "baseThemeTinted",
          "boolFalse",
          "boolTrue",
          "botCommand",
          "botInfo",
          "botInlineMediaResult",
          "botInlineMessageMediaAuto",
          "botInlineMessageMediaContact",
          "botInlineMessageMediaGeo",
          "botInlineMessageMediaVenue",
          "botInlineMessageText",
          "botInlineResult",
          "cdnConfig",
          "cdnPublicKey",
          "channel",
          "channelAdminLogEvent",
          "channelAdminLogEventActionChangeAbout",
          "channelAdminLogEventActionChangeLinkedChat",
          "channelAdminLogEventActionChangeLocation",
          "channelAdminLogEventActionChangePhoto",
          "channelAdminLogEventActionChangeStickerSet",
          "channelAdminLogEventActionChangeTitle",
          "channelAdminLogEventActionChangeUsername",
          "channelAdminLogEventActionDefaultBannedRights",
          "channelAdminLogEventActionDeleteMessage",
          "channelAdminLogEventActionEditMessage",
          "channelAdminLogEventActionParticipantInvite",
          "channelAdminLogEventActionParticipantJoin",
          "channelAdminLogEventActionParticipantLeave",
          "channelAdminLogEventActionParticipantToggleAdmin",
          "channelAdminLogEventActionParticipantToggleBan",
          "channelAdminLogEventActionStopPoll",
          "channelAdminLogEventActionToggleInvites",
          "channelAdminLogEventActionTogglePreHistoryHidden",
          "channelAdminLogEventActionToggleSignatures",
          "channelAdminLogEventActionToggleSlowMode",
          "channelAdminLogEventActionUpdatePinned",
          "channelAdminLogEventsFilter",
          "channelForbidden",
          "channelFull",
          "channelLocation",
          "channelLocationEmpty",
          "channelMessagesFilter",
          "channelMessagesFilterEmpty",
          "channelParticipant",
          "channelParticipantAdmin",
          "channelParticipantBanned",
          "channelParticipantCreator",
          "channelParticipantLeft",
          "channelParticipantSelf",
          "channelParticipantsAdmins",
          "channelParticipantsBanned",
          "channelParticipantsBots",
          "channelParticipantsContacts",
          "channelParticipantsKicked",
          "channelParticipantsMentions",
          "channelParticipantsRecent",
          "channelParticipantsSearch",
          "channels.adminLogResults",
          "channels.channelParticipant",
          "channels.channelParticipants",
          "channels.channelParticipantsNotModified",
          "chat",
          "chatAdminRights",
          "chatBannedRights",
          "chatEmpty",
          "chatForbidden",
          "chatFull",
          "chatInvite",
          "chatInviteAlready",
          "chatInviteEmpty",
          "chatInviteExported",
          "chatInvitePeek",
          "chatOnlines",
          "chatParticipant",
          "chatParticipantAdmin",
          "chatParticipantCreator",
          "chatParticipants",
          "chatParticipantsForbidden",
          "chatPhoto",
          "chatPhotoEmpty",
          "codeSettings",
          "config",
          "contact",
          "contactStatus",
          "contacts.blocked",
          "contacts.blockedSlice",
          "contacts.contacts",
          "contacts.contactsNotModified",
          "contacts.found",
          "contacts.importedContacts",
          "contacts.resolvedPeer",
          "contacts.topPeers",
          "contacts.topPeersDisabled",
          "contacts.topPeersNotModified",
          "dataJSON",
          "dcOption",
          "dialog",
          "dialogFilter",
          "dialogFilterSuggested",
          "dialogFolder",
          "dialogPeer",
          "dialogPeerFolder",
          "document",
          "documentAttributeAnimated",
          "documentAttributeAudio",
          "documentAttributeFilename",
          "documentAttributeHasStickers",
          "documentAttributeImageSize",
          "documentAttributeSticker",
          "documentAttributeVideo",
          "documentEmpty",
          "draftMessage",
          "draftMessageEmpty",
          "emojiKeyword",
          "emojiKeywordDeleted",
          "emojiKeywordsDifference",
          "emojiLanguage",
          "emojiURL",
          "encryptedChat",
          "encryptedChatDiscarded",
          "encryptedChatEmpty",
          "encryptedChatRequested",
          "encryptedChatWaiting",
          "encryptedFile",
          "encryptedFileEmpty",
          "encryptedMessage",
          "encryptedMessageService",
          "error",
          "exportedMessageLink",
          "fileHash",
          "fileLocationToBeDeprecated",
          "folder",
          "folderPeer",
          "game",
          "geoPoint",
          "geoPointEmpty",
          "globalPrivacySettings",
          "help.appUpdate",
          "help.countriesList",
          "help.countriesListNotModified",
          "help.country",
          "help.countryCode",
          "help.deepLinkInfo",
          "help.deepLinkInfoEmpty",
          "help.inviteText",
          "help.noAppUpdate",
          "help.passportConfig",
          "help.passportConfigNotModified",
          "help.promoData",
          "help.promoDataEmpty",
          "help.recentMeUrls",
          "help.support",
          "help.supportName",
          "help.termsOfService",
          "help.termsOfServiceUpdate",
          "help.termsOfServiceUpdateEmpty",
          "help.userInfo",
          "help.userInfoEmpty",
          "highScore",
          "importedContact",
          "inlineBotSwitchPM",
          "inputAppEvent",
          "inputBotInlineMessageGame",
          "inputBotInlineMessageID",
          "inputBotInlineMessageMediaAuto",
          "inputBotInlineMessageMediaContact",
          "inputBotInlineMessageMediaGeo",
          "inputBotInlineMessageMediaVenue",
          "inputBotInlineMessageText",
          "inputBotInlineResult",
          "inputBotInlineResultDocument",
          "inputBotInlineResultGame",
          "inputBotInlineResultPhoto",
          "inputChannel",
          "inputChannelEmpty",
          "inputChannelFromMessage",
          "inputChatPhoto",
          "inputChatPhotoEmpty",
          "inputChatUploadedPhoto",
          "inputCheckPasswordEmpty",
          "inputCheckPasswordSRP",
          "inputClientProxy",
          "inputDialogPeer",
          "inputDialogPeerFolder",
          "inputDocument",
          "inputDocumentEmpty",
          "inputDocumentFileLocation",
          "inputEncryptedChat",
          "inputEncryptedFile",
          "inputEncryptedFileBigUploaded",
          "inputEncryptedFileEmpty",
          "inputEncryptedFileLocation",
          "inputEncryptedFileUploaded",
          "inputFile",
          "inputFileBig",
          "inputFileLocation",
          "inputFolderPeer",
          "inputGameID",
          "inputGameShortName",
          "inputGeoPoint",
          "inputGeoPointEmpty",
          "inputKeyboardButtonUrlAuth",
          "inputMediaContact",
          "inputMediaDice",
          "inputMediaDocument",
          "inputMediaDocumentExternal",
          "inputMediaEmpty",
          "inputMediaGame",
          "inputMediaGeoLive",
          "inputMediaGeoPoint",
          "inputMediaInvoice",
          "inputMediaPhoto",
          "inputMediaPhotoExternal",
          "inputMediaPoll",
          "inputMediaUploadedDocument",
          "inputMediaUploadedPhoto",
          "inputMediaVenue",
          "inputMessageCallbackQuery",
          "inputMessageEntityMentionName",
          "inputMessageID",
          "inputMessagePinned",
          "inputMessageReplyTo",
          "inputMessagesFilterChatPhotos",
          "inputMessagesFilterContacts",
          "inputMessagesFilterDocument",
          "inputMessagesFilterEmpty",
          "inputMessagesFilterGeo",
          "inputMessagesFilterGif",
          "inputMessagesFilterMusic",
          "inputMessagesFilterMyMentions",
          "inputMessagesFilterPhoneCalls",
          "inputMessagesFilterPhotoVideo",
          "inputMessagesFilterPhotos",
          "inputMessagesFilterPinned",
          "inputMessagesFilterRoundVideo",
          "inputMessagesFilterRoundVoice",
          "inputMessagesFilterUrl",
          "inputMessagesFilterVideo",
          "inputMessagesFilterVoice",
          "inputNotifyBroadcasts",
          "inputNotifyChats",
          "inputNotifyPeer",
          "inputNotifyUsers",
          "inputPaymentCredentials",
          "inputPaymentCredentialsAndroidPay",
          "inputPaymentCredentialsApplePay",
          "inputPaymentCredentialsSaved",
          "inputPeerChannel",
          "inputPeerChannelFromMessage",
          "inputPeerChat",
          "inputPeerEmpty",
          "inputPeerNotifySettings",
          "inputPeerPhotoFileLocation",
          "inputPeerSelf",
          "inputPeerUser",
          "inputPeerUserFromMessage",
          "inputPhoneCall",
          "inputPhoneContact",
          "inputPhoto",
          "inputPhotoEmpty",
          "inputPhotoFileLocation",
          "inputPhotoLegacyFileLocation",
          "inputPrivacyKeyAddedByPhone",
          "inputPrivacyKeyChatInvite",
          "inputPrivacyKeyForwards",
          "inputPrivacyKeyPhoneCall",
          "inputPrivacyKeyPhoneNumber",
          "inputPrivacyKeyPhoneP2P",
          "inputPrivacyKeyProfilePhoto",
          "inputPrivacyKeyStatusTimestamp",
          "inputPrivacyValueAllowAll",
          "inputPrivacyValueAllowChatParticipants",
          "inputPrivacyValueAllowContacts",
          "inputPrivacyValueAllowUsers",
          "inputPrivacyValueDisallowAll",
          "inputPrivacyValueDisallowChatParticipants",
          "inputPrivacyValueDisallowContacts",
          "inputPrivacyValueDisallowUsers",
          "inputReportReasonChildAbuse",
          "inputReportReasonCopyright",
          "inputReportReasonGeoIrrelevant",
          "inputReportReasonOther",
          "inputReportReasonPornography",
          "inputReportReasonSpam",
          "inputReportReasonViolence",
          "inputSecureFile",
          "inputSecureFileLocation",
          "inputSecureFileUploaded",
          "inputSecureValue",
          "inputSingleMedia",
          "inputStickerSetAnimatedEmoji",
          "inputStickerSetDice",
          "inputStickerSetEmpty",
          "inputStickerSetID",
          "inputStickerSetItem",
          "inputStickerSetShortName",
          "inputStickerSetThumb",
          "inputStickeredMediaDocument",
          "inputStickeredMediaPhoto",
          "inputTakeoutFileLocation",
          "inputTheme",
          "inputThemeSettings",
          "inputThemeSlug",
          "inputUser",
          "inputUserEmpty",
          "inputUserFromMessage",
          "inputUserSelf",
          "inputWallPaper",
          "inputWallPaperNoFile",
          "inputWallPaperSlug",
          "inputWebDocument",
          "inputWebFileGeoPointLocation",
          "inputWebFileLocation",
          "invoice",
          "jsonArray",
          "jsonBool",
          "jsonNull",
          "jsonNumber",
          "jsonObject",
          "jsonObjectValue",
          "jsonString",
          "keyboardButton",
          "keyboardButtonBuy",
          "keyboardButtonCallback",
          "keyboardButtonGame",
          "keyboardButtonRequestGeoLocation",
          "keyboardButtonRequestPhone",
          "keyboardButtonRequestPoll",
          "keyboardButtonRow",
          "keyboardButtonSwitchInline",
          "keyboardButtonUrl",
          "keyboardButtonUrlAuth",
          "labeledPrice",
          "langPackDifference",
          "langPackLanguage",
          "langPackString",
          "langPackStringDeleted",
          "langPackStringPluralized",
          "maskCoords",
          "message",
          "messageActionBotAllowed",
          "messageActionChannelCreate",
          "messageActionChannelMigrateFrom",
          "messageActionChatAddUser",
          "messageActionChatCreate",
          "messageActionChatDeletePhoto",
          "messageActionChatDeleteUser",
          "messageActionChatEditPhoto",
          "messageActionChatEditTitle",
          "messageActionChatJoinedByLink",
          "messageActionChatMigrateTo",
          "messageActionContactSignUp",
          "messageActionCustomAction",
          "messageActionEmpty",
          "messageActionGameScore",
          "messageActionGeoProximityReached",
          "messageActionHistoryClear",
          "messageActionPaymentSent",
          "messageActionPaymentSentMe",
          "messageActionPhoneCall",
          "messageActionPinMessage",
          "messageActionScreenshotTaken",
          "messageActionSecureValuesSent",
          "messageActionSecureValuesSentMe",
          "messageEmpty",
          "messageEntityBankCard",
          "messageEntityBlockquote",
          "messageEntityBold",
          "messageEntityBotCommand",
          "messageEntityCashtag",
          "messageEntityCode",
          "messageEntityEmail",
          "messageEntityHashtag",
          "messageEntityItalic",
          "messageEntityMention",
          "messageEntityMentionName",
          "messageEntityPhone",
          "messageEntityPre",
          "messageEntityStrike",
          "messageEntityTextUrl",
          "messageEntityUnderline",
          "messageEntityUnknown",
          "messageEntityUrl",
          "messageFwdHeader",
          "messageInteractionCounters",
          "messageMediaContact",
          "messageMediaDice",
          "messageMediaDocument",
          "messageMediaEmpty",
          "messageMediaGame",
          "messageMediaGeo",
          "messageMediaGeoLive",
          "messageMediaInvoice",
          "messageMediaPhoto",
          "messageMediaPoll",
          "messageMediaUnsupported",
          "messageMediaVenue",
          "messageMediaWebPage",
          "messageRange",
          "messageReplies",
          "messageReplyHeader",
          "messageService",
          "messageUserVote",
          "messageUserVoteInputOption",
          "messageUserVoteMultiple",
          "messageViews",
          "messages.affectedHistory",
          "messages.affectedMessages",
          "messages.allStickers",
          "messages.allStickersNotModified",
          "messages.archivedStickers",
          "messages.botCallbackAnswer",
          "messages.botResults",
          "messages.channelMessages",
          "messages.chatFull",
          "messages.chats",
          "messages.chatsSlice",
          "messages.dhConfig",
          "messages.dhConfigNotModified",
          "messages.dialogs",
          "messages.dialogsNotModified",
          "messages.dialogsSlice",
          "messages.discussionMessage",
          "messages.favedStickers",
          "messages.favedStickersNotModified",
          "messages.featuredStickers",
          "messages.featuredStickersNotModified",
          "messages.foundStickerSets",
          "messages.foundStickerSetsNotModified",
          "messages.highScores",
          "messages.inactiveChats",
          "messages.messageEditData",
          "messages.messageViews",
          "messages.messages",
          "messages.messagesNotModified",
          "messages.messagesSlice",
          "messages.peerDialogs",
          "messages.recentStickers",
          "messages.recentStickersNotModified",
          "messages.savedGifs",
          "messages.savedGifsNotModified",
          "messages.searchCounter",
          "messages.sentEncryptedFile",
          "messages.sentEncryptedMessage",
          "messages.stickerSet",
          "messages.stickerSetInstallResultArchive",
          "messages.stickerSetInstallResultSuccess",
          "messages.stickers",
          "messages.stickersNotModified",
          "messages.votesList",
          "nearestDc",
          "notifyBroadcasts",
          "notifyChats",
          "notifyPeer",
          "notifyUsers",
          "null",
          "page",
          "pageBlockAnchor",
          "pageBlockAudio",
          "pageBlockAuthorDate",
          "pageBlockBlockquote",
          "pageBlockChannel",
          "pageBlockCollage",
          "pageBlockCover",
          "pageBlockDetails",
          "pageBlockDivider",
          "pageBlockEmbed",
          "pageBlockEmbedPost",
          "pageBlockFooter",
          "pageBlockHeader",
          "pageBlockKicker",
          "pageBlockList",
          "pageBlockMap",
          "pageBlockOrderedList",
          "pageBlockParagraph",
          "pageBlockPhoto",
          "pageBlockPreformatted",
          "pageBlockPullquote",
          "pageBlockRelatedArticles",
          "pageBlockSlideshow",
          "pageBlockSubheader",
          "pageBlockSubtitle",
          "pageBlockTable",
          "pageBlockTitle",
          "pageBlockUnsupported",
          "pageBlockVideo",
          "pageCaption",
          "pageListItemBlocks",
          "pageListItemText",
          "pageListOrderedItemBlocks",
          "pageListOrderedItemText",
          "pageRelatedArticle",
          "pageTableCell",
          "pageTableRow",
          "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow",
          "passwordKdfAlgoUnknown",
          "paymentCharge",
          "paymentRequestedInfo",
          "paymentSavedCredentialsCard",
          "payments.bankCardData",
          "payments.paymentForm",
          "payments.paymentReceipt",
          "payments.paymentResult",
          "payments.paymentVerificationNeeded",
          "payments.savedInfo",
          "payments.validatedRequestedInfo",
          "peerBlocked",
          "peerChannel",
          "peerChat",
          "peerLocated",
          "peerNotifySettings",
          "peerSelfLocated",
          "peerSettings",
          "peerUser",
          "phone.phoneCall",
          "phoneCall",
          "phoneCallAccepted",
          "phoneCallDiscardReasonBusy",
          "phoneCallDiscardReasonDisconnect",
          "phoneCallDiscardReasonHangup",
          "phoneCallDiscardReasonMissed",
          "phoneCallDiscarded",
          "phoneCallEmpty",
          "phoneCallProtocol",
          "phoneCallRequested",
          "phoneCallWaiting",
          "phoneConnection",
          "phoneConnectionWebrtc",
          "photo",
          "photoCachedSize",
          "photoEmpty",
          "photoPathSize",
          "photoSize",
          "photoSizeEmpty",
          "photoSizeProgressive",
          "photoStrippedSize",
          "photos.photo",
          "photos.photos",
          "photos.photosSlice",
          "poll",
          "pollAnswer",
          "pollAnswerVoters",
          "pollResults",
          "popularContact",
          "postAddress",
          "privacyKeyAddedByPhone",
          "privacyKeyChatInvite",
          "privacyKeyForwards",
          "privacyKeyPhoneCall",
          "privacyKeyPhoneNumber",
          "privacyKeyPhoneP2P",
          "privacyKeyProfilePhoto",
          "privacyKeyStatusTimestamp",
          "privacyValueAllowAll",
          "privacyValueAllowChatParticipants",
          "privacyValueAllowContacts",
          "privacyValueAllowUsers",
          "privacyValueDisallowAll",
          "privacyValueDisallowChatParticipants",
          "privacyValueDisallowContacts",
          "privacyValueDisallowUsers",
          "receivedNotifyMessage",
          "recentMeUrlChat",
          "recentMeUrlChatInvite",
          "recentMeUrlStickerSet",
          "recentMeUrlUnknown",
          "recentMeUrlUser",
          "replyInlineMarkup",
          "replyKeyboardForceReply",
          "replyKeyboardHide",
          "replyKeyboardMarkup",
          "restrictionReason",
          "savedPhoneContact",
          "secureCredentialsEncrypted",
          "secureData",
          "secureFile",
          "secureFileEmpty",
          "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000",
          "securePasswordKdfAlgoSHA512",
          "securePasswordKdfAlgoUnknown",
          "securePlainEmail",
          "securePlainPhone",
          "secureRequiredType",
          "secureRequiredTypeOneOf",
          "secureSecretSettings",
          "secureValue",
          "secureValueError",
          "secureValueErrorData",
          "secureValueErrorFile",
          "secureValueErrorFiles",
          "secureValueErrorFrontSide",
          "secureValueErrorReverseSide",
          "secureValueErrorSelfie",
          "secureValueErrorTranslationFile",
          "secureValueErrorTranslationFiles",
          "secureValueHash",
          "secureValueTypeAddress",
          "secureValueTypeBankStatement",
          "secureValueTypeDriverLicense",
          "secureValueTypeEmail",
          "secureValueTypeIdentityCard",
          "secureValueTypeInternalPassport",
          "secureValueTypePassport",
          "secureValueTypePassportRegistration",
          "secureValueTypePersonalDetails",
          "secureValueTypePhone",
          "secureValueTypeRentalAgreement",
          "secureValueTypeTemporaryRegistration",
          "secureValueTypeUtilityBill",
          "sendMessageCancelAction",
          "sendMessageChooseContactAction",
          "sendMessageGamePlayAction",
          "sendMessageGeoLocationAction",
          "sendMessageRecordAudioAction",
          "sendMessageRecordRoundAction",
          "sendMessageRecordVideoAction",
          "sendMessageTypingAction",
          "sendMessageUploadAudioAction",
          "sendMessageUploadDocumentAction",
          "sendMessageUploadPhotoAction",
          "sendMessageUploadRoundAction",
          "sendMessageUploadVideoAction",
          "shippingOption",
          "stats.broadcastStats",
          "stats.megagroupStats",
          "stats.messageStats",
          "statsAbsValueAndPrev",
          "statsDateRangeDays",
          "statsGraph",
          "statsGraphAsync",
          "statsGraphError",
          "statsGroupTopAdmin",
          "statsGroupTopInviter",
          "statsGroupTopPoster",
          "statsPercentValue",
          "statsURL",
          "stickerPack",
          "stickerSet",
          "stickerSetCovered",
          "stickerSetMultiCovered",
          "storage.fileGif",
          "storage.fileJpeg",
          "storage.fileMov",
          "storage.fileMp3",
          "storage.fileMp4",
          "storage.filePartial",
          "storage.filePdf",
          "storage.filePng",
          "storage.fileUnknown",
          "storage.fileWebp",
          "textAnchor",
          "textBold",
          "textConcat",
          "textEmail",
          "textEmpty",
          "textFixed",
          "textImage",
          "textItalic",
          "textMarked",
          "textPhone",
          "textPlain",
          "textStrike",
          "textSubscript",
          "textSuperscript",
          "textUnderline",
          "textUrl",
          "theme",
          "themeSettings",
          "topPeer",
          "topPeerCategoryBotsInline",
          "topPeerCategoryBotsPM",
          "topPeerCategoryChannels",
          "topPeerCategoryCorrespondents",
          "topPeerCategoryForwardChats",
          "topPeerCategoryForwardUsers",
          "topPeerCategoryGroups",
          "topPeerCategoryPeers",
          "topPeerCategoryPhoneCalls",
          "true",
          "updateBotCallbackQuery",
          "updateBotInlineQuery",
          "updateBotInlineSend",
          "updateBotPrecheckoutQuery",
          "updateBotShippingQuery",
          "updateBotWebhookJSON",
          "updateBotWebhookJSONQuery",
          "updateChannel",
          "updateChannelAvailableMessages",
          "updateChannelMessageForwards",
          "updateChannelMessageViews",
          "updateChannelParticipant",
          "updateChannelReadMessagesContents",
          "updateChannelTooLong",
          "updateChannelUserTyping",
          "updateChannelWebPage",
          "updateChatDefaultBannedRights",
          "updateChatParticipantAdd",
          "updateChatParticipantAdmin",
          "updateChatParticipantDelete",
          "updateChatParticipants",
          "updateChatUserTyping",
          "updateConfig",
          "updateContactsReset",
          "updateDcOptions",
          "updateDeleteChannelMessages",
          "updateDeleteMessages",
          "updateDeleteScheduledMessages",
          "updateDialogFilter",
          "updateDialogFilterOrder",
          "updateDialogFilters",
          "updateDialogPinned",
          "updateDialogUnreadMark",
          "updateDraftMessage",
          "updateEditChannelMessage",
          "updateEditMessage",
          "updateEncryptedChatTyping",
          "updateEncryptedMessagesRead",
          "updateEncryption",
          "updateFavedStickers",
          "updateFolderPeers",
          "updateGeoLiveViewed",
          "updateInlineBotCallbackQuery",
          "updateLangPack",
          "updateLangPackTooLong",
          "updateLoginToken",
          "updateMessageID",
          "updateMessagePoll",
          "updateMessagePollVote",
          "updateNewChannelMessage",
          "updateNewEncryptedMessage",
          "updateNewMessage",
          "updateNewScheduledMessage",
          "updateNewStickerSet",
          "updateNotifySettings",
          "updatePeerBlocked",
          "updatePeerLocated",
          "updatePeerSettings",
          "updatePhoneCall",
          "updatePhoneCallSignalingData",
          "updatePinnedChannelMessages",
          "updatePinnedDialogs",
          "updatePinnedMessages",
          "updatePrivacy",
          "updatePtsChanged",
          "updateReadChannelDiscussionInbox",
          "updateReadChannelDiscussionOutbox",
          "updateReadChannelInbox",
          "updateReadChannelOutbox",
          "updateReadFeaturedStickers",
          "updateReadHistoryInbox",
          "updateReadHistoryOutbox",
          "updateReadMessagesContents",
          "updateRecentStickers",
          "updateSavedGifs",
          "updateServiceNotification",
          "updateShort",
          "updateShortChatMessage",
          "updateShortMessage",
          "updateShortSentMessage",
          "updateStickerSets",
          "updateStickerSetsOrder",
          "updateTheme",
          "updateUserName",
          "updateUserPhone",
          "updateUserPhoto",
          "updateUserStatus",
          "updateUserTyping",
          "updateWebPage",
          "updates",
          "updates.channelDifference",
          "updates.channelDifferenceEmpty",
          "updates.channelDifferenceTooLong",
          "updates.difference",
          "updates.differenceEmpty",
          "updates.differenceSlice",
          "updates.differenceTooLong",
          "updates.state",
          "updatesCombined",
          "updatesTooLong",
          "upload.cdnFile",
          "upload.cdnFileReuploadNeeded",
          "upload.file",
          "upload.fileCdnRedirect",
          "upload.webFile",
          "urlAuthResultAccepted",
          "urlAuthResultDefault",
          "urlAuthResultRequest",
          "user",
          "userEmpty",
          "userFull",
          "userProfilePhoto",
          "userProfilePhotoEmpty",
          "userStatusEmpty",
          "userStatusLastMonth",
          "userStatusLastWeek",
          "userStatusOffline",
          "userStatusOnline",
          "userStatusRecently",
          "vector",
          "videoSize",
          "wallPaper",
          "wallPaperNoFile",
          "wallPaperSettings",
          "webAuthorization",
          "webDocument",
          "webDocumentNoProxy",
          "webPage",
          "webPageAttributeTheme",
          "webPageEmpty",
          "webPageNotModified",
          "webPagePending"
        ]
      },
      {
        "name": "method",
        "values": [
          "account.acceptAuthorization",
          "account.cancelPasswordEmail",
          "account.changePhone",
          "account.checkUsername",
          "account.confirmPasswordEmail",
          "account.confirmPhone",
          "account.createTheme",
          "account.deleteAccount",
          "account.deleteSecureValue",
          "account.finishTakeoutSession",
          "account.getAccountTTL",
          "account.getAllSecureValues",
          "account.getAuthorizationForm",
          "account.getAuthorizations",
          "account.getAutoDownloadSettings",
          "account.getContactSignUpNotification",
          "account.getContentSettings",
          "account.getGlobalPrivacySettings",
          "account.getMultiWallPapers",
          "account.getNotifyExceptions",
          "account.getNotifySettings",
          "account.getPassword",
          "account.getPasswordSettings",
          "account.getPrivacy",
          "account.getSecureValue",
          "account.getTheme",
          "account.getThemes",
          "account.getTmpPassword",
          "account.getWallPaper",
          "account.getWallPapers",
          "account.getWebAuthorizations",
          "account.initTakeoutSession",
          "account.installTheme",
          "account.installWallPaper",
          "account.registerDevice",
          "account.reportPeer",
          "account.resendPasswordEmail",
          "account.resetAuthorization",
          "account.resetNotifySettings",
          "account.resetWallPapers",
          "account.resetWebAuthorization",
          "account.resetWebAuthorizations",
          "account.saveAutoDownloadSettings",
          "account.saveSecureValue",
          "account.saveTheme",
          "account.saveWallPaper",
          "account.sendChangePhoneCode",
          "account.sendConfirmPhoneCode",
          "account.sendVerifyEmailCode",
          "account.sendVerifyPhoneCode",
          "account.setAccountTTL",
          "account.setContactSignUpNotification",
          "account.setContentSettings",
          "account.setGlobalPrivacySettings",
          "account.setPrivacy",
          "account.unregisterDevice",
          "account.updateDeviceLocked",
          "account.updateNotifySettings",
          "account.updatePasswordSettings",
          "account.updateProfile",
          "account.updateStatus",
          "account.updateTheme",
          "account.updateUsername",
          "account.uploadTheme",
          "account.uploadWallPaper",
          "account.verifyEmail",
          "account.verifyPhone",
          "auth.acceptLoginToken",
          "auth.bindTempAuthKey",
          "auth.cancelCode",
          "auth.checkPassword",
          "auth.dropTempAuthKeys",
          "auth.exportAuthorization",
          "auth.exportLoginToken",
          "auth.importAuthorization",
          "auth.importBotAuthorization",
          "auth.importLoginToken",
          "auth.logOut",
          "auth.recoverPassword",
          "auth.requestPasswordRecovery",
          "auth.resendCode",
          "auth.resetAuthorizations",
          "auth.sendCode",
          "auth.signIn",
          "auth.signUp",
          "bots.answerWebhookJSONQuery",
          "bots.sendCustomRequest",
          "bots.setBotCommands",
          "channels.checkUsername",
          "channels.createChannel",
          "channels.deleteChannel",
          "channels.deleteHistory",
          "channels.deleteMessages",
          "channels.deleteUserHistory",
          "channels.editAdmin",
          "channels.editBanned",
          "channels.editCreator",
          "channels.editLocation",
          "channels.editPhoto",
          "channels.editTitle",
          "channels.exportMessageLink",
          "channels.getAdminLog",
          "channels.getAdminedPublicChannels",
          "channels.getChannels",
          "channels.getFullChannel",
          "channels.getGroupsForDiscussion",
          "channels.getInactiveChannels",
          "channels.getLeftChannels",
          "channels.getMessages",
          "channels.getParticipant",
          "channels.getParticipants",
          "channels.inviteToChannel",
          "channels.joinChannel",
          "channels.leaveChannel",
          "channels.readHistory",
          "channels.readMessageContents",
          "channels.reportSpam",
          "channels.setDiscussionGroup",
          "channels.setStickers",
          "channels.togglePreHistoryHidden",
          "channels.toggleSignatures",
          "channels.toggleSlowMode",
          "channels.updateUsername",
          "contacts.acceptContact",
          "contacts.addContact",
          "contacts.block",
          "contacts.blockFromReplies",
          "contacts.deleteByPhones",
          "contacts.deleteContacts",
          "contacts.getBlocked",
          "contacts.getContactIDs",
          "contacts.getContacts",
          "contacts.getLocated",
          "contacts.getSaved",
          "contacts.getStatuses",
          "contacts.getTopPeers",
          "contacts.importContacts",
          "contacts.resetSaved",
          "contacts.resetTopPeerRating",
          "contacts.resolveUsername",
          "contacts.search",
          "contacts.toggleTopPeers",
          "contacts.unblock",
          "folders.deleteFolder",
          "folders.editPeerFolders",
          "help.acceptTermsOfService",
          "help.dismissSuggestion",
          "help.editUserInfo",
          "help.getAppChangelog",
          "help.getAppConfig",
          "help.getAppUpdate",
          "help.getCdnConfig",
          "help.getConfig",
          "help.getCountriesList",
          "help.getDeepLinkInfo",
          "help.getInviteText",
          "help.getNearestDc",
          "help.getPassportConfig",
          "help.getPromoData",
          "help.getRecentMeUrls",
          "help.getSupport",
          "help.getSupportName",
          "help.getTermsOfServiceUpdate",
          "help.getUserInfo",
          "help.hidePromoData",
          "help.saveAppLog",
          "help.setBotUpdatesStatus",
          "initConnection",
          "invokeAfterMsg",
          "invokeAfterMsgs",
          "invokeWithLayer",
          "invokeWithMessagesRange",
          "invokeWithTakeout",
          "invokeWithoutUpdates",
          "langpack.getDifference",
          "langpack.getLangPack",
          "langpack.getLanguage",
          "langpack.getLanguages",
          "langpack.getStrings",
          "messages.acceptEncryption",
          "messages.acceptUrlAuth",
          "messages.addChatUser",
          "messages.checkChatInvite",
          "messages.clearAllDrafts",
          "messages.clearRecentStickers",
          "messages.createChat",
          "messages.deleteChatUser",
          "messages.deleteHistory",
          "messages.deleteMessages",
          "messages.deleteScheduledMessages",
          "messages.discardEncryption",
          "messages.editChatAbout",
          "messages.editChatAdmin",
          "messages.editChatDefaultBannedRights",
          "messages.editChatPhoto",
          "messages.editChatTitle",
          "messages.editInlineBotMessage",
          "messages.editMessage",
          "messages.exportChatInvite",
          "messages.faveSticker",
          "messages.forwardMessages",
          "messages.getAllChats",
          "messages.getAllDrafts",
          "messages.getAllStickers",
          "messages.getArchivedStickers",
          "messages.getAttachedStickers",
          "messages.getBotCallbackAnswer",
          "messages.getChats",
          "messages.getCommonChats",
          "messages.getDhConfig",
          "messages.getDialogFilters",
          "messages.getDialogUnreadMarks",
          "messages.getDialogs",
          "messages.getDiscussionMessage",
          "messages.getDocumentByHash",
          "messages.getEmojiKeywords",
          "messages.getEmojiKeywordsDifference",
          "messages.getEmojiKeywordsLanguages",
          "messages.getEmojiURL",
          "messages.getFavedStickers",
          "messages.getFeaturedStickers",
          "messages.getFullChat",
          "messages.getGameHighScores",
          "messages.getHistory",
          "messages.getInlineBotResults",
          "messages.getInlineGameHighScores",
          "messages.getMaskStickers",
          "messages.getMessageEditData",
          "messages.getMessages",
          "messages.getMessagesViews",
          "messages.getOldFeaturedStickers",
          "messages.getOnlines",
          "messages.getPeerDialogs",
          "messages.getPeerSettings",
          "messages.getPinnedDialogs",
          "messages.getPollResults",
          "messages.getPollVotes",
          "messages.getRecentLocations",
          "messages.getRecentStickers",
          "messages.getReplies",
          "messages.getSavedGifs",
          "messages.getScheduledHistory",
          "messages.getScheduledMessages",
          "messages.getSearchCounters",
          "messages.getSplitRanges",
          "messages.getStatsURL",
          "messages.getStickerSet",
          "messages.getStickers",
          "messages.getSuggestedDialogFilters",
          "messages.getUnreadMentions",
          "messages.getWebPage",
          "messages.getWebPagePreview",
          "messages.hidePeerSettingsBar",
          "messages.importChatInvite",
          "messages.installStickerSet",
          "messages.markDialogUnread",
          "messages.migrateChat",
          "messages.readDiscussion",
          "messages.readEncryptedHistory",
          "messages.readFeaturedStickers",
          "messages.readHistory",
          "messages.readMentions",
          "messages.readMessageContents",
          "messages.receivedMessages",
          "messages.receivedQueue",
          "messages.reorderPinnedDialogs",
          "messages.reorderStickerSets",
          "messages.report",
          "messages.reportEncryptedSpam",
          "messages.reportSpam",
          "messages.requestEncryption",
          "messages.requestUrlAuth",
          "messages.saveDraft",
          "messages.saveGif",
          "messages.saveRecentSticker",
          "messages.search",
          "messages.searchGlobal",
          "messages.searchStickerSets",
          "messages.sendEncrypted",
          "messages.sendEncryptedFile",
          "messages.sendEncryptedService",
          "messages.sendInlineBotResult",
          "messages.sendMedia",
          "messages.sendMessage",
          "messages.sendMultiMedia",
          "messages.sendScheduledMessages",
          "messages.sendScreenshotNotification",
          "messages.sendVote",
          "messages.setBotCallbackAnswer",
          "messages.setBotPrecheckoutResults",
          "messages.setBotShippingResults",
          "messages.setEncryptedTyping",
          "messages.setGameScore",
          "messages.setInlineBotResults",
          "messages.setInlineGameScore",
          "messages.setTyping",
          "messages.startBot",
          "messages.toggleDialogPin",
          "messages.toggleStickerSets",
          "messages.uninstallStickerSet",
          "messages.unpinAllMessages",
          "messages.updateDialogFilter",
          "messages.updateDialogFiltersOrder",
          "messages.updatePinnedMessage",
          "messages.uploadEncryptedFile",
          "messages.uploadMedia",
          "payments.clearSavedInfo",
          "payments.getBankCardData",
          "payments.getPaymentForm",
          "payments.getPaymentReceipt",
          "payments.getSavedInfo",
          "payments.sendPaymentForm",
          "payments.validateRequestedInfo",
          "phone.acceptCall",
          "phone.confirmCall",
          "phone.discardCall",
          "phone.getCallConfig",
          "phone.receivedCall",
          "phone.requestCall",
          "phone.saveCallDebug",
          "phone.sendSignalingData",
          "phone.setCallRating",
          "photos.deletePhotos",
          "photos.getUserPhotos",
          "photos.updateProfilePhoto",
          "photos.uploadProfilePhoto",
          "stats.getBroadcastStats",
          "stats.getMegagroupStats",
          "stats.getMessagePublicForwards",
          "stats.getMessageStats",
          "stats.loadAsyncGraph",
          "stickers.addStickerToSet",
          "stickers.changeStickerPosition",
          "stickers.createStickerSet",
          "stickers.removeStickerFromSet",
          "stickers.setStickerSetThumb",
          "updates.getChannelDifference",
          "updates.getDifference",
          "updates.getState",
          "upload.getCdnFile",
          "upload.getCdnFileHashes",
          "upload.getFile",
          "upload.getFileHashes",
          "upload.getWebFile",
          "upload.reuploadCdnFile",
          "upload.saveBigFilePart",
          "upload.saveFilePart",
          "users.getFullUser",
          "users.getUsers",
          "users.setSecureValueErrors"
        ]
      },
      {
        "name": "type",
        "values": [
          "#",
          "AccountDaysTTL",
          "Authorization",
          "AutoDownloadSettings",
          "BankCardOpenUrl",
          "BaseTheme",
          "Bool",
          "BotCommand",
          "BotInfo",
          "BotInlineMessage",
          "BotInlineResult",
          "CdnConfig",
          "CdnPublicKey",
          "ChannelAdminLogEvent",
          "ChannelAdminLogEventAction",
          "ChannelAdminLogEventsFilter",
          "ChannelLocation",
          "ChannelMessagesFilter",
          "ChannelParticipant",
          "ChannelParticipantsFilter",
          "Chat",
          "ChatAdminRights",
          "ChatBannedRights",
          "ChatFull",
          "ChatInvite",
          "ChatOnlines",
          "ChatParticipant",
          "ChatParticipants",
          "ChatPhoto",
          "CodeSettings",
          "Config",
          "Contact",
          "ContactStatus",
          "DataJSON",
          "DcOption",
          "Dialog",
          "DialogFilter",
          "DialogFilterSuggested",
          "DialogPeer",
          "Document",
          "DocumentAttribute",
          "DraftMessage",
          "EmojiKeyword",
          "EmojiKeywordsDifference",
          "EmojiLanguage",
          "EmojiURL",
          "EncryptedChat",
          "EncryptedFile",
          "EncryptedMessage",
          "Error",
          "ExportedChatInvite",
          "ExportedMessageLink",
          "FileHash",
          "FileLocation",
          "Folder",
          "FolderPeer",
          "Game",
          "GeoPoint",
          "GlobalPrivacySettings",
          "HighScore",
          "ImportedContact",
          "InlineBotSwitchPM",
          "InputAppEvent",
          "InputBotInlineMessage",
          "InputBotInlineMessageID",
          "InputBotInlineResult",
          "InputChannel",
          "InputChatPhoto",
          "InputCheckPasswordSRP",
          "InputClientProxy",
          "InputContact",
          "InputDialogPeer",
          "InputDocument",
          "InputEncryptedChat",
          "InputEncryptedFile",
          "InputFile",
          "InputFileLocation",
          "InputFolderPeer",
          "InputGame",
          "InputGeoPoint",
          "InputMedia",
          "InputMessage",
          "InputNotifyPeer",
          "InputPaymentCredentials",
          "InputPeer",
          "InputPeerNotifySettings",
          "InputPhoneCall",
          "InputPhoto",
          "InputPrivacyKey",
          "InputPrivacyRule",
          "InputSecureFile",
          "InputSecureValue",
          "InputSingleMedia",
          "InputStickerSet",
          "InputStickerSetItem",
          "InputStickeredMedia",
          "InputTheme",
          "InputThemeSettings",
          "InputUser",
          "InputWallPaper",
          "InputWebDocument",
          "InputWebFileLocation",
          "Invoice",
          "JSONObjectValue",
          "JSONValue",
          "KeyboardButton",
          "KeyboardButtonRow",
          "LabeledPrice",
          "LangPackDifference",
          "LangPackLanguage",
          "LangPackString",
          "MaskCoords",
          "Message",
          "MessageAction",
          "MessageEntity",
          "MessageFwdHeader",
          "MessageInteractionCounters",
          "MessageMedia",
          "MessageRange",
          "MessageReplies",
          "MessageReplyHeader",
          "MessageUserVote",
          "MessageViews",
          "MessagesFilter",
          "NearestDc",
          "NotifyPeer",
          "Null",
          "Page",
          "PageBlock",
          "PageCaption",
          "PageListItem",
          "PageListOrderedItem",
          "PageRelatedArticle",
          "PageTableCell",
          "PageTableRow",
          "PasswordKdfAlgo",
          "PaymentCharge",
          "PaymentRequestedInfo",
          "PaymentSavedCredentials",
          "Peer",
          "PeerBlocked",
          "PeerLocated",
          "PeerNotifySettings",
          "PeerSettings",
          "PhoneCall",
          "PhoneCallDiscardReason",
          "PhoneCallProtocol",
          "PhoneConnection",
          "Photo",
          "PhotoSize",
          "Poll",
          "PollAnswer",
          "PollAnswerVoters",
          "PollResults",
          "PopularContact",
          "PostAddress",
          "PrivacyKey",
          "PrivacyRule",
          "ReceivedNotifyMessage",
          "RecentMeUrl",
          "ReplyMarkup",
          "ReportReason",
          "RestrictionReason",
          "RichText",
          "SavedContact",
          "SecureCredentialsEncrypted",
          "SecureData",
          "SecureFile",
          "SecurePasswordKdfAlgo",
          "SecurePlainData",
          "SecureRequiredType",
          "SecureSecretSettings",
          "SecureValue",
          "SecureValueError",
          "SecureValueHash",
          "SecureValueType",
          "SendMessageAction",
          "ShippingOption",
          "StatsAbsValueAndPrev",
          "StatsDateRangeDays",
          "StatsGraph",
          "StatsGroupTopAdmin",
          "StatsGroupTopInviter",
          "StatsGroupTopPoster",
          "StatsPercentValue",
          "StatsURL",
          "StickerPack",
          "StickerSet",
          "StickerSetCovered",
          "Theme",
          "ThemeSettings",
          "TopPeer",
          "TopPeerCategory",
          "TopPeerCategoryPeers",
          "True",
          "Update",
          "Updates",
          "UrlAuthResult",
          "User",
          "UserFull",
          "UserProfilePhoto",
          "UserStatus",
          "Vector t",
          "VideoSize",
          "WallPaper",
          "WallPaperSettings",
          "WebAuthorization",
          "WebDocument",
          "WebPage",
          "WebPageAttribute",
          "account.AuthorizationForm",
          "account.Authorizations",
          "account.AutoDownloadSettings",
          "account.ContentSettings",
          "account.Password",
          "account.PasswordInputSettings",
          "account.PasswordSettings",
          "account.PrivacyRules",
          "account.SentEmailCode",
          "account.Takeout",
          "account.Themes",
          "account.TmpPassword",
          "account.WallPapers",
          "account.WebAuthorizations",
          "auth.Authorization",
          "auth.CodeType",
          "auth.ExportedAuthorization",
          "auth.LoginToken",
          "auth.PasswordRecovery",
          "auth.SentCode",
          "auth.SentCodeType",
          "bytes",
          "channels.AdminLogResults",
          "channels.ChannelParticipant",
          "channels.ChannelParticipants",
          "contacts.Blocked",
          "contacts.Contacts",
          "contacts.Found",
          "contacts.ImportedContacts",
          "contacts.ResolvedPeer",
          "contacts.TopPeers",
          "double",
          "help.AppUpdate",
          "help.CountriesList",
          "help.Country",
          "help.CountryCode",
          "help.DeepLinkInfo",
          "help.InviteText",
          "help.PassportConfig",
          "help.PromoData",
          "help.RecentMeUrls",
          "help.Support",
          "help.SupportName",
          "help.TermsOfService",
          "help.TermsOfServiceUpdate",
          "help.UserInfo",
          "int",
          "long",
          "messages.AffectedHistory",
          "messages.AffectedMessages",
          "messages.AllStickers",
          "messages.ArchivedStickers",
          "messages.BotCallbackAnswer",
          "messages.BotResults",
          "messages.ChatFull",
          "messages.Chats",
          "messages.DhConfig",
          "messages.Dialogs",
          "messages.DiscussionMessage",
          "messages.FavedStickers",
          "messages.FeaturedStickers",
          "messages.FoundStickerSets",
          "messages.HighScores",
          "messages.InactiveChats",
          "messages.MessageEditData",
          "messages.MessageViews",
          "messages.Messages",
          "messages.PeerDialogs",
          "messages.RecentStickers",
          "messages.SavedGifs",
          "messages.SearchCounter",
          "messages.SentEncryptedMessage",
          "messages.StickerSet",
          "messages.StickerSetInstallResult",
          "messages.Stickers",
          "messages.VotesList",
          "payments.BankCardData",
          "payments.PaymentForm",
          "payments.PaymentReceipt",
          "payments.PaymentResult",
          "payments.SavedInfo",
          "payments.ValidatedRequestedInfo",
          "phone.PhoneCall",
          "photos.Photo",
          "photos.Photos",
          "stats.BroadcastStats",
          "stats.MegagroupStats",
          "stats.MessageStats",
          "storage.FileType",
          "string",
          "updates.ChannelDifference",
          "updates.Difference",
          "updates.State",
          "upload.CdnFile",
          "upload.File",
          "upload.WebFile"
        ]
      }
    ]
  },
  "constructors": {
    "FileHash": {
      "name": "FileHash",
      "description": [
        "SHA256 Hash of an uploaded file, to be checked for validity after download"
      ],
      "fields": {
        "hash": {
          "description": "SHA-256 Hash of file chunk, to be checked for validity after download",
          "links": null
        },
        "limit": {
          "description": "Length",
          "links": null
        },
        "offset": {
          "description": "Offset from where to start computing SHA-256 hash",
          "links": null
        }
      }
    },
    "Updates": {
      "name": "Updates",
      "description": [
        "Full constructor of updates"
      ],
      "fields": {
        "chats": {
          "description": "List of chats mentioned in updates",
          "links": null
        },
        "date": {
          "description": "Current date",
          "links": null
        },
        "seq": {
          "description": "Total number of sent updates",
          "links": null
        },
        "updates": {
          "description": "List of updates",
          "links": null
        },
        "users": {
          "description": "List of users mentioned in updates",
          "links": null
        }
      }
    },
    "account.authorizationForm": {
      "name": "account.authorizationForm",
      "description": [
        "Telegram Passport¹ authorization form"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "fields": {
        "errors": {
          "description": "Telegram Passport¹ errors",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "privacy_policy_url": {
          "description": "URL of the service's privacy policy",
          "links": null
        },
        "required_types": {
          "description": "Required Telegram Passport¹ documents",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "users": {
          "description": "Info about the bot to which the form will be submitted",
          "links": null
        },
        "values": {
          "description": "Already submitted Telegram Passport¹ documents",
          "links": [
            "https://core.telegram.org/passport"
          ]
        }
      }
    },
    "account.authorizations": {
      "name": "account.authorizations",
      "description": [
        "Logged-in sessions"
      ],
      "fields": {
        "authorizations": {
          "description": "Logged-in sessions",
          "links": null
        }
      }
    },
    "account.autoDownloadSettings": {
      "name": "account.autoDownloadSettings",
      "description": [
        "Media autodownload settings"
      ],
      "fields": {
        "high": {
          "description": "High data usage preset",
          "links": null
        },
        "low": {
          "description": "Low data usage preset",
          "links": null
        },
        "medium": {
          "description": "Medium data usage preset",
          "links": null
        }
      }
    },
    "account.contentSettings": {
      "name": "account.contentSettings",
      "description": [
        "Sensitive content settings"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "sensitive_can_change": {
          "description": "Whether the current client can change the sensitive content settings to view NSFW content",
          "links": null
        },
        "sensitive_enabled": {
          "description": "Whether viewing of sensitive (NSFW) content is enabled",
          "links": null
        }
      }
    },
    "account.password": {
      "name": "account.password",
      "description": [
        "Configuration for two-factor authorization"
      ],
      "fields": {
        "current_algo": {
          "description": "The KDF algorithm for SRP two-factor authentication¹ of the current password",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "email_unconfirmed_pattern": {
          "description": "A password recovery email¹ with the specified pattern² is still awaiting verification",
          "links": [
            "https://core.telegram.org/api/srp#email-verification",
            "https://core.telegram.org/api/pattern"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "has_password": {
          "description": "Whether the user has a password",
          "links": null
        },
        "has_recovery": {
          "description": "Whether the user has a recovery method configured",
          "links": null
        },
        "has_secure_values": {
          "description": "Whether telegram passport¹ is enabled",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "hint": {
          "description": "Text hint for the password",
          "links": null
        },
        "new_algo": {
          "description": "The KDF algorithm for SRP two-factor authentication¹ to use when creating new passwords",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "new_secure_algo": {
          "description": "The KDF algorithm for telegram passport¹",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "secure_random": {
          "description": "Secure random string",
          "links": null
        },
        "srp_B": {
          "description": "Srp B param for SRP authorization¹",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "srp_id": {
          "description": "Srp ID param for SRP authorization¹",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        }
      }
    },
    "account.passwordInputSettings": {
      "name": "account.passwordInputSettings",
      "description": [
        "Settings for setting up a new password"
      ],
      "fields": {
        "email": {
          "description": "Password recovery email",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "hint": {
          "description": "Text hint for the password",
          "links": null
        },
        "new_algo": {
          "description": "The SRP algorithm¹ to use",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "new_password_hash": {
          "description": "The computed password hash¹",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "new_secure_settings": {
          "description": "Telegram passport¹ settings",
          "links": [
            "https://core.telegram.org/passport"
          ]
        }
      }
    },
    "account.passwordSettings": {
      "name": "account.passwordSettings",
      "description": [
        "Private info associated to the password info (recovery email, telegram passport¹ info \u0026 so on)"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "fields": {
        "email": {
          "description": "2FA Recovery email¹",
          "links": [
            "https://core.telegram.org/api/srp#email-verification"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "secure_settings": {
          "description": "Telegram passport¹ settings",
          "links": [
            "https://core.telegram.org/passport"
          ]
        }
      }
    },
    "account.privacyRules": {
      "name": "account.privacyRules",
      "description": [
        "Privacy rules"
      ],
      "fields": {
        "chats": {
          "description": "Chats to which the rules apply",
          "links": null
        },
        "rules": {
          "description": "Privacy rules",
          "links": null
        },
        "users": {
          "description": "Users to which the rules apply",
          "links": null
        }
      }
    },
    "account.sentEmailCode": {
      "name": "account.sentEmailCode",
      "description": [
        "The sent email code"
      ],
      "fields": {
        "email_pattern": {
          "description": "The email (to which the code was sent) must match this pattern¹",
          "links": [
            "https://core.telegram.org/api/pattern"
          ]
        },
        "length": {
          "description": "The length of the verification code",
          "links": null
        }
      }
    },
    "account.takeout": {
      "name": "account.takeout",
      "description": [
        "Takout info"
      ],
      "fields": {
        "id": {
          "description": "Takeout ID",
          "links": null
        }
      }
    },
    "account.themes": {
      "name": "account.themes",
      "description": [
        "Installed themes"
      ],
      "fields": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "themes": {
          "description": "Themes",
          "links": null
        }
      }
    },
    "account.themesNotModified": {
      "name": "account.themesNotModified",
      "description": [
        "No new themes were installed"
      ]
    },
    "account.tmpPassword": {
      "name": "account.tmpPassword",
      "description": [
        "Temporary payment password"
      ],
      "fields": {
        "tmp_password": {
          "description": "Temporary password",
          "links": null
        },
        "valid_until": {
          "description": "Validity period",
          "links": null
        }
      }
    },
    "account.wallPapers": {
      "name": "account.wallPapers",
      "description": [
        "Installed wallpapers"
      ],
      "fields": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "wallpapers": {
          "description": "Wallpapers",
          "links": null
        }
      }
    },
    "account.wallPapersNotModified": {
      "name": "account.wallPapersNotModified",
      "description": [
        "No new wallpapers were found"
      ]
    },
    "account.webAuthorizations": {
      "name": "account.webAuthorizations",
      "description": [
        "Web authorizations"
      ],
      "fields": {
        "authorizations": {
          "description": "Web authorization list",
          "links": null
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "accountDaysTTL": {
      "name": "accountDaysTTL",
      "description": [
        "Time to live in days of the current account"
      ],
      "fields": {
        "days": {
          "description": "This account will self-destruct in the specified number of days",
          "links": null
        }
      }
    },
    "auth.authorization": {
      "name": "auth.authorization",
      "description": [
        "Contains user authorization info."
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "tmp_sessions": {
          "description": "Temporary passport¹ sessions",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "user": {
          "description": "Info on authorized user",
          "links": null
        }
      }
    },
    "auth.authorizationSignUpRequired": {
      "name": "auth.authorizationSignUpRequired",
      "description": [
        "An account with this phone number doesn't exist on telegram: the user has to enter basic information and sign up¹"
      ],
      "links": [
        "https://core.telegram.org/api/auth"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "terms_of_service": {
          "description": "Telegram's terms of service: the user must read and accept the terms of service before signing up to telegram",
          "links": null
        }
      }
    },
    "auth.codeTypeCall": {
      "name": "auth.codeTypeCall",
      "description": [
        "Type of verification code that will be sent next if you call the resendCode method: SMS code"
      ]
    },
    "auth.codeTypeFlashCall": {
      "name": "auth.codeTypeFlashCall",
      "description": [
        "Type of verification code that will be sent next if you call the resendCode method: SMS code"
      ]
    },
    "auth.codeTypeSms": {
      "name": "auth.codeTypeSms",
      "description": [
        "Type of verification code that will be sent next if you call the resendCode method: SMS code"
      ]
    },
    "auth.exportedAuthorization": {
      "name": "auth.exportedAuthorization",
      "description": [
        "Data for copying of authorization between data centres."
      ],
      "fields": {
        "bytes": {
          "description": "authorizes key",
          "links": null
        },
        "id": {
          "description": "current user identifier",
          "links": null
        }
      }
    },
    "auth.loginToken": {
      "name": "auth.loginToken",
      "description": [
        "Login token (for QR code login¹)"
      ],
      "links": [
        "https://core.telegram.org/api/qr-login"
      ],
      "fields": {
        "expires": {
          "description": "Expiry date of QR code",
          "links": null
        },
        "token": {
          "description": "Token to render in QR code",
          "links": null
        }
      }
    },
    "auth.loginTokenMigrateTo": {
      "name": "auth.loginTokenMigrateTo",
      "description": [
        "Repeat the query to the specified DC"
      ],
      "fields": {
        "dc_id": {
          "description": "DC ID",
          "links": null
        },
        "token": {
          "description": "Token to use for login",
          "links": null
        }
      }
    },
    "auth.loginTokenSuccess": {
      "name": "auth.loginTokenSuccess",
      "description": [
        "Login via token (QR code) succeded!"
      ],
      "fields": {
        "authorization": {
          "description": "Authorization info",
          "links": null
        }
      }
    },
    "auth.passwordRecovery": {
      "name": "auth.passwordRecovery",
      "description": [
        "Recovery info of a 2FA password¹, only for accounts with a recovery email configured²."
      ],
      "links": [
        "https://core.telegram.org/api/srp",
        "https://core.telegram.org/api/srp#email-verification"
      ],
      "fields": {
        "email_pattern": {
          "description": "The email to which the recovery code was sent must match this pattern¹.",
          "links": [
            "https://core.telegram.org/api/pattern"
          ]
        }
      }
    },
    "auth.sentCode": {
      "name": "auth.sentCode",
      "description": [
        "Contains info about a sent verification code."
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "next_type": {
          "description": "Phone code type that will be sent next, if the phone code is not received within timeout seconds: to send it use auth.resendCode¹",
          "links": [
            "https://core.telegram.org/method/auth.resendCode"
          ]
        },
        "phone_code_hash": {
          "description": "Phone code hash, to be stored and later re-used with auth.signIn¹",
          "links": [
            "https://core.telegram.org/method/auth.signIn"
          ]
        },
        "timeout": {
          "description": "Timeout for reception of the phone code",
          "links": null
        },
        "type": {
          "description": "Phone code type",
          "links": null
        }
      }
    },
    "auth.sentCodeTypeApp": {
      "name": "auth.sentCodeTypeApp",
      "description": [
        "The code was sent through the telegram app"
      ],
      "fields": {
        "length": {
          "description": "Length of the code in bytes",
          "links": null
        }
      }
    },
    "auth.sentCodeTypeCall": {
      "name": "auth.sentCodeTypeCall",
      "description": [
        "The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input."
      ],
      "fields": {
        "length": {
          "description": "Length of the verification code",
          "links": null
        }
      }
    },
    "auth.sentCodeTypeFlashCall": {
      "name": "auth.sentCodeTypeFlashCall",
      "description": [
        "The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern."
      ],
      "fields": {
        "pattern": {
          "description": "pattern¹ to match",
          "links": [
            "https://core.telegram.org/api/pattern"
          ]
        }
      }
    },
    "auth.sentCodeTypeSms": {
      "name": "auth.sentCodeTypeSms",
      "description": [
        "The code was sent via SMS"
      ],
      "fields": {
        "length": {
          "description": "Length of the code in bytes",
          "links": null
        }
      }
    },
    "authorization": {
      "name": "authorization",
      "description": [
        "Logged-in session"
      ],
      "fields": {
        "api_id": {
          "description": "API ID¹",
          "links": [
            "https://core.telegram.org/api/obtaining_api_id"
          ]
        },
        "app_name": {
          "description": "App name",
          "links": null
        },
        "app_version": {
          "description": "App version",
          "links": null
        },
        "country": {
          "description": "Country determined from IP",
          "links": null
        },
        "current": {
          "description": "Whether this is the current session",
          "links": null
        },
        "date_active": {
          "description": "When was the session last active",
          "links": null
        },
        "date_created": {
          "description": "When was the session created",
          "links": null
        },
        "device_model": {
          "description": "Device model",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "hash": {
          "description": "Identifier",
          "links": null
        },
        "ip": {
          "description": "Last known IP",
          "links": null
        },
        "official_app": {
          "description": "Whether the session is from an official app",
          "links": null
        },
        "password_pending": {
          "description": "Whether the session is still waiting for a 2FA password",
          "links": null
        },
        "platform": {
          "description": "Platform",
          "links": null
        },
        "region": {
          "description": "Region determined from IP",
          "links": null
        },
        "system_version": {
          "description": "System version",
          "links": null
        }
      }
    },
    "autoDownloadSettings": {
      "name": "autoDownloadSettings",
      "description": [
        "Autodownload settings"
      ],
      "fields": {
        "audio_preload_next": {
          "description": "Whether to preload the next audio track when you're listening to music",
          "links": null
        },
        "disabled": {
          "description": "Disable automatic media downloads?",
          "links": null
        },
        "file_size_max": {
          "description": "Maximum size of other files to preload",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "phonecalls_less_data": {
          "description": "Whether to enable data saving mode in phone calls",
          "links": null
        },
        "photo_size_max": {
          "description": "Maximum size of photos to preload",
          "links": null
        },
        "video_preload_large": {
          "description": "Whether to preload the first seconds of videos larger than the specified limit",
          "links": null
        },
        "video_size_max": {
          "description": "Maximum size of videos to preload",
          "links": null
        },
        "video_upload_maxbitrate": {
          "description": "Maximum suggested bitrate for uploading videos",
          "links": null
        }
      }
    },
    "bankCardOpenUrl": {
      "name": "bankCardOpenUrl",
      "description": [
        "Credit card info URL provided by the bank"
      ],
      "fields": {
        "name": {
          "description": "Bank name",
          "links": null
        },
        "url": {
          "description": "Info URL",
          "links": null
        }
      }
    },
    "baseThemeArctic": {
      "name": "baseThemeArctic",
      "description": [
        "Arctic theme"
      ]
    },
    "baseThemeClassic": {
      "name": "baseThemeClassic",
      "description": [
        "Classic theme"
      ]
    },
    "baseThemeDay": {
      "name": "baseThemeDay",
      "description": [
        "Day theme"
      ]
    },
    "baseThemeNight": {
      "name": "baseThemeNight",
      "description": [
        "Night theme"
      ]
    },
    "baseThemeTinted": {
      "name": "baseThemeTinted",
      "description": [
        "Tinted theme"
      ]
    },
    "boolFalse": {
      "name": "boolFalse",
      "description": [
        "Constructor may be interpreted as a booleanfalse value."
      ]
    },
    "boolTrue": {
      "name": "boolTrue",
      "description": [
        "The constructor can be interpreted as a booleantrue value."
      ]
    },
    "botCommand": {
      "name": "botCommand",
      "description": [
        "Describes a bot command that can be used in a chat"
      ],
      "fields": {
        "command": {
          "description": "/command name",
          "links": null
        },
        "description": {
          "description": "Description of the command",
          "links": null
        }
      }
    },
    "botInfo": {
      "name": "botInfo",
      "description": [
        "Info about bots (available bot commands, etc)"
      ],
      "fields": {
        "commands": {
          "description": "Bot commands that can be used in the chat",
          "links": null
        },
        "description": {
          "description": "Description of the bot",
          "links": null
        },
        "user_id": {
          "description": "ID of the bot",
          "links": null
        }
      }
    },
    "botInlineMediaResult": {
      "name": "botInlineMediaResult",
      "description": [
        "Media result"
      ],
      "fields": {
        "description": {
          "description": "Description",
          "links": null
        },
        "document": {
          "description": "If type is document, the document to send",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Result ID",
          "links": null
        },
        "photo": {
          "description": "If type is photo, the photo to send",
          "links": null
        },
        "send_message": {
          "description": "Depending on the type and on the constructor¹, contains the caption of the media or the content of the message to be sent instead of the media",
          "links": [
            "https://core.telegram.org/type/BotInlineMessage"
          ]
        },
        "title": {
          "description": "Result title",
          "links": null
        },
        "type": {
          "description": "Result type (see bot API docs¹)",
          "links": [
            "https://core.telegram.org/bots/api#inlinequeryresult"
          ]
        }
      }
    },
    "botInlineMessageMediaAuto": {
      "name": "botInlineMessageMediaAuto",
      "description": [
        "Send whatever media is attached to the botInlineMediaResult¹"
      ],
      "links": [
        "https://core.telegram.org/constructor/botInlineMediaResult"
      ],
      "fields": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "Caption",
          "links": null
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        }
      }
    },
    "botInlineMessageMediaContact": {
      "name": "botInlineMessageMediaContact",
      "description": [
        "Send a contact"
      ],
      "fields": {
        "first_name": {
          "description": "First name",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "last_name": {
          "description": "Last name",
          "links": null
        },
        "phone_number": {
          "description": "Phone number",
          "links": null
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        },
        "vcard": {
          "description": "VCard info",
          "links": null
        }
      }
    },
    "botInlineMessageMediaGeo": {
      "name": "botInlineMessageMediaGeo",
      "description": [
        "Send a geolocation"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo": {
          "description": "Geolocation",
          "links": null
        },
        "heading": {
          "description": "For live locations¹, a direction in which the location moves, in degrees; 1-360.",
          "links": [
            "https://core.telegram.org/api/live-location"
          ]
        },
        "period": {
          "description": "Validity period",
          "links": null
        },
        "proximity_notification_radius": {
          "description": "For live locations¹, a maximum distance to another chat member for proximity alerts, in meters (0-100000).",
          "links": [
            "https://core.telegram.org/api/live-location"
          ]
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        }
      }
    },
    "botInlineMessageMediaVenue": {
      "name": "botInlineMessageMediaVenue",
      "description": [
        "Send a venue"
      ],
      "fields": {
        "address": {
          "description": "Address",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo": {
          "description": "Geolocation of venue",
          "links": null
        },
        "provider": {
          "description": "Venue provider: currently only \"foursquare\" needs to be supported",
          "links": null
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        },
        "title": {
          "description": "Venue name",
          "links": null
        },
        "venue_id": {
          "description": "Venue ID in the provider's database",
          "links": null
        },
        "venue_type": {
          "description": "Venue type in the provider's database",
          "links": null
        }
      }
    },
    "botInlineMessageText": {
      "name": "botInlineMessageText",
      "description": [
        "Send a simple text message"
      ],
      "fields": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "The message",
          "links": null
        },
        "no_webpage": {
          "description": "Disable webpage preview",
          "links": null
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        }
      }
    },
    "botInlineResult": {
      "name": "botInlineResult",
      "description": [
        "Generic result"
      ],
      "fields": {
        "content": {
          "description": "Content of the result",
          "links": null
        },
        "description": {
          "description": "Result description",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Result ID",
          "links": null
        },
        "send_message": {
          "description": "Message to send",
          "links": null
        },
        "thumb": {
          "description": "Thumbnail for the result",
          "links": null
        },
        "title": {
          "description": "Result title",
          "links": null
        },
        "type": {
          "description": "Result type (see bot API docs¹)",
          "links": [
            "https://core.telegram.org/bots/api#inlinequeryresult"
          ]
        },
        "url": {
          "description": "URL of article or webpage",
          "links": null
        }
      }
    },
    "cdnConfig": {
      "name": "cdnConfig",
      "description": [
        "Configuration for CDN¹ file downloads."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "fields": {
        "public_keys": {
          "description": "Vector of public keys to use only during handshakes to CDN¹ DCs.",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        }
      }
    },
    "cdnPublicKey": {
      "name": "cdnPublicKey",
      "description": [
        "Public key to use only during handshakes to CDN¹ DCs."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "fields": {
        "dc_id": {
          "description": "CDN DC¹ ID",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        },
        "public_key": {
          "description": "RSA public key",
          "links": null
        }
      }
    },
    "channel": {
      "name": "channel",
      "description": [
        "Channel/supergroup info"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "admin_rights": {
          "description": "Admin rights of the user in this channel (see rights¹)",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "banned_rights": {
          "description": "Banned rights of the user in this channel (see rights¹)",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "broadcast": {
          "description": "Is this a channel?",
          "links": null
        },
        "creator": {
          "description": "Whether the current user is the creator of this channel",
          "links": null
        },
        "date": {
          "description": "Date when the user joined the supergroup/channel, or if the user isn't a member, its creation date",
          "links": null
        },
        "default_banned_rights": {
          "description": "Default chat rights (see rights¹)",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "has_geo": {
          "description": "Whether this chanel has a geoposition",
          "links": null
        },
        "has_link": {
          "description": "Whether this channel has a private join link",
          "links": null
        },
        "id": {
          "description": "ID of the channel",
          "links": null
        },
        "left": {
          "description": "Whether the current user has left this channel",
          "links": null
        },
        "megagroup": {
          "description": "Is this a supergroup?",
          "links": null
        },
        "min": {
          "description": "See min¹",
          "links": [
            "https://core.telegram.org/api/min"
          ]
        },
        "participants_count": {
          "description": "Participant count",
          "links": null
        },
        "photo": {
          "description": "Profile photo",
          "links": null
        },
        "restricted": {
          "description": "Whether viewing/writing in this channel for a reason (see restriction_reason",
          "links": null
        },
        "restriction_reason": {
          "description": "Contains the reason why access to this channel must be restricted.",
          "links": null
        },
        "scam": {
          "description": "This channel/supergroup is probably a scam",
          "links": null
        },
        "signatures": {
          "description": "Whether signatures are enabled (channels)",
          "links": null
        },
        "slowmode_enabled": {
          "description": "Whether slow mode is enabled for groups to prevent flood in chat",
          "links": null
        },
        "title": {
          "description": "Title",
          "links": null
        },
        "username": {
          "description": "Username",
          "links": null
        },
        "verified": {
          "description": "Is this channel verified by telegram?",
          "links": null
        },
        "version": {
          "description": "Version of the channel (always 0)",
          "links": null
        }
      }
    },
    "channelAdminLogEvent": {
      "name": "channelAdminLogEvent",
      "description": [
        "Admin log event"
      ],
      "fields": {
        "action": {
          "description": "Action",
          "links": null
        },
        "date": {
          "description": "Date",
          "links": null
        },
        "id": {
          "description": "Event ID",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionChangeAbout": {
      "name": "channelAdminLogEventActionChangeAbout",
      "description": [
        "The description was changed"
      ],
      "fields": {
        "new_value": {
          "description": "New description",
          "links": null
        },
        "prev_value": {
          "description": "Previous description",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionChangeLinkedChat": {
      "name": "channelAdminLogEventActionChangeLinkedChat",
      "description": [
        "The linked chat was changed"
      ],
      "fields": {
        "new_value": {
          "description": "New linked chat",
          "links": null
        },
        "prev_value": {
          "description": "Previous linked chat",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionChangeLocation": {
      "name": "channelAdminLogEventActionChangeLocation",
      "description": [
        "The geogroup location was changed"
      ],
      "fields": {
        "new_value": {
          "description": "New location",
          "links": null
        },
        "prev_value": {
          "description": "Previous location",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionChangePhoto": {
      "name": "channelAdminLogEventActionChangePhoto",
      "description": [
        "The channel/supergroup's picture was changed"
      ],
      "fields": {
        "new_photo": {
          "description": "New picture",
          "links": null
        },
        "prev_photo": {
          "description": "Previous picture",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionChangeStickerSet": {
      "name": "channelAdminLogEventActionChangeStickerSet",
      "description": [
        "The supergroup's stickerset was changed"
      ],
      "fields": {
        "new_stickerset": {
          "description": "New stickerset",
          "links": null
        },
        "prev_stickerset": {
          "description": "Previous stickerset",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionChangeTitle": {
      "name": "channelAdminLogEventActionChangeTitle",
      "description": [
        "Channel/supergroup title was changed"
      ],
      "fields": {
        "new_value": {
          "description": "New title",
          "links": null
        },
        "prev_value": {
          "description": "Previous title",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionChangeUsername": {
      "name": "channelAdminLogEventActionChangeUsername",
      "description": [
        "Channel/supergroup username was changed"
      ],
      "fields": {
        "new_value": {
          "description": "New username",
          "links": null
        },
        "prev_value": {
          "description": "Old username",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionDefaultBannedRights": {
      "name": "channelAdminLogEventActionDefaultBannedRights",
      "description": [
        "The default banned rights were modified"
      ],
      "fields": {
        "new_banned_rights": {
          "description": "New glboal banned rights¹.",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "prev_banned_rights": {
          "description": "Previous global banned rights¹",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        }
      }
    },
    "channelAdminLogEventActionDeleteMessage": {
      "name": "channelAdminLogEventActionDeleteMessage",
      "description": [
        "A message was deleted"
      ],
      "fields": {
        "message": {
          "description": "The message that was deleted",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionEditMessage": {
      "name": "channelAdminLogEventActionEditMessage",
      "description": [
        "A message was edited"
      ],
      "fields": {
        "new_message": {
          "description": "New message",
          "links": null
        },
        "prev_message": {
          "description": "Old message",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionParticipantInvite": {
      "name": "channelAdminLogEventActionParticipantInvite",
      "description": [
        "A user was invited to the group"
      ],
      "fields": {
        "participant": {
          "description": "The user that was invited",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionParticipantJoin": {
      "name": "channelAdminLogEventActionParticipantJoin",
      "description": [
        "A user has joined the group (in the case of big groups, info of the user that has joined isn't shown)"
      ]
    },
    "channelAdminLogEventActionParticipantLeave": {
      "name": "channelAdminLogEventActionParticipantLeave",
      "description": [
        "A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn't shown)"
      ]
    },
    "channelAdminLogEventActionParticipantToggleAdmin": {
      "name": "channelAdminLogEventActionParticipantToggleAdmin",
      "description": [
        "The admin rights¹ of a user were changed"
      ],
      "links": [
        "https://core.telegram.org/api/rights"
      ],
      "fields": {
        "new_participant": {
          "description": "New admin rights",
          "links": null
        },
        "prev_participant": {
          "description": "Previous admin rights",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionParticipantToggleBan": {
      "name": "channelAdminLogEventActionParticipantToggleBan",
      "description": [
        "The banned rights¹ of a user were changed"
      ],
      "links": [
        "https://core.telegram.org/api/rights"
      ],
      "fields": {
        "new_participant": {
          "description": "New banned rights of user",
          "links": null
        },
        "prev_participant": {
          "description": "Old banned rights of user",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionStopPoll": {
      "name": "channelAdminLogEventActionStopPoll",
      "description": [
        "A poll was stopped"
      ],
      "fields": {
        "message": {
          "description": "The poll that was stopped",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionToggleInvites": {
      "name": "channelAdminLogEventActionToggleInvites",
      "description": [
        "Invites were enabled/disabled"
      ],
      "fields": {
        "new_value": {
          "description": "New value",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionTogglePreHistoryHidden": {
      "name": "channelAdminLogEventActionTogglePreHistoryHidden",
      "description": [
        "The hidden prehistory setting was changed¹"
      ],
      "links": [
        "https://core.telegram.org/method/channels.togglePreHistoryHidden"
      ],
      "fields": {
        "new_value": {
          "description": "New value",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionToggleSignatures": {
      "name": "channelAdminLogEventActionToggleSignatures",
      "description": [
        "Channel signatures were enabled/disabled"
      ],
      "fields": {
        "new_value": {
          "description": "New value",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionToggleSlowMode": {
      "name": "channelAdminLogEventActionToggleSlowMode",
      "description": [
        "Slow mode setting for supergroups was changed¹"
      ],
      "links": [
        "https://core.telegram.org/method/channels.toggleSlowMode"
      ],
      "fields": {
        "new_value": {
          "description": "New slow mode value",
          "links": null
        },
        "prev_value": {
          "description": "Previous slow mode value",
          "links": null
        }
      }
    },
    "channelAdminLogEventActionUpdatePinned": {
      "name": "channelAdminLogEventActionUpdatePinned",
      "description": [
        "A message was pinned"
      ],
      "fields": {
        "message": {
          "description": "The message that was pinned",
          "links": null
        }
      }
    },
    "channelAdminLogEventsFilter": {
      "name": "channelAdminLogEventsFilter",
      "description": [
        "Filter only certain admin log events"
      ],
      "fields": {
        "ban": {
          "description": "Ban events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan"
          ]
        },
        "delete": {
          "description": "Message deletion events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionDeleteMessage"
          ]
        },
        "demote": {
          "description": "Admin demotion events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin"
          ]
        },
        "edit": {
          "description": "Message edit events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionEditMessage"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "info": {
          "description": "Info change events (when about¹, linked chat², location³, photo⁴, stickerset⁵, title⁶ or username⁷ data of a channel gets modified)",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionChangeAbout",
            "https://core.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat",
            "https://core.telegram.org/constructor/channelAdminLogEventActionChangeLocation",
            "https://core.telegram.org/constructor/channelAdminLogEventActionChangePhoto",
            "https://core.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet",
            "https://core.telegram.org/constructor/channelAdminLogEventActionChangeTitle",
            "https://core.telegram.org/constructor/channelAdminLogEventActionChangeUsername"
          ]
        },
        "invite": {
          "description": "Invite events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantInvite"
          ]
        },
        "join": {
          "description": "Join events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoin"
          ]
        },
        "kick": {
          "description": "Kick events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan"
          ]
        },
        "leave": {
          "description": "Leave events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantLeave"
          ]
        },
        "pinned": {
          "description": "Message pin events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionUpdatePinned"
          ]
        },
        "promote": {
          "description": "Admin promotion events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin"
          ]
        },
        "settings": {
          "description": "Settings change events (invites¹, hidden prehistory², signatures³, default banned rights⁴)",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionToggleInvites",
            "https://core.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden",
            "https://core.telegram.org/constructor/channelAdminLogEventActionToggleSignatures",
            "https://core.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights"
          ]
        },
        "unban": {
          "description": "Unban events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan"
          ]
        },
        "unkick": {
          "description": "Unkick events¹",
          "links": [
            "https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan"
          ]
        }
      }
    },
    "channelForbidden": {
      "name": "channelForbidden",
      "description": [
        "Indicates a channel/supergroup we can't access because we were banned, or for some other reason."
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "broadcast": {
          "description": "Is this a channel",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Channel ID",
          "links": null
        },
        "megagroup": {
          "description": "Is this a supergroup",
          "links": null
        },
        "title": {
          "description": "Title",
          "links": null
        },
        "until_date": {
          "description": "The ban is valid until the specified date",
          "links": null
        }
      }
    },
    "channelFull": {
      "name": "channelFull",
      "description": [
        "Full info about a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "about": {
          "description": "Info about the channel",
          "links": null
        },
        "admins_count": {
          "description": "Number of channel admins",
          "links": null
        },
        "available_min_id": {
          "description": "Identifier of a maximum unavailable message in a channel due to hidden history.",
          "links": null
        },
        "banned_count": {
          "description": "Number of users banned¹ from the channel",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "blocked": {
          "description": "Whether any anonymous admin of this supergroup was blocked: if set, you won't receive messages from anonymous group admins in discussion replies via @replies¹",
          "links": [
            "https://core.telegram.org/api/discussion"
          ]
        },
        "bot_info": {
          "description": "Info about bots in the channel/supergrup",
          "links": null
        },
        "can_set_location": {
          "description": "Can we set the geolocation of this group (for geogroups)",
          "links": null
        },
        "can_set_stickers": {
          "description": "Can we associate¹ a stickerpack to the supergroup?",
          "links": [
            "https://core.telegram.org/method/channels.setStickers"
          ]
        },
        "can_set_username": {
          "description": "Can we set the channel's username?",
          "links": null
        },
        "can_view_participants": {
          "description": "Can we vew the participant list?",
          "links": null
        },
        "can_view_stats": {
          "description": "Can the user view channel/supergroup statistics¹",
          "links": [
            "https://core.telegram.org/api/stats"
          ]
        },
        "chat_photo": {
          "description": "Channel picture",
          "links": null
        },
        "exported_invite": {
          "description": "Invite link",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "has_scheduled": {
          "description": "Whether scheduled messages are available",
          "links": null
        },
        "hidden_prehistory": {
          "description": "Is the history before we joined hidden to us?",
          "links": null
        },
        "id": {
          "description": "ID of the channel",
          "links": null
        },
        "kicked_count": {
          "description": "Number of users kicked¹ from the channel",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "linked_chat_id": {
          "description": "ID of the linked discussion chat¹ for channels",
          "links": [
            "https://core.telegram.org/api/discussion"
          ]
        },
        "location": {
          "description": "Location of the geogroup",
          "links": null
        },
        "migrated_from_chat_id": {
          "description": "The chat ID from which this group was migrated¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "migrated_from_max_id": {
          "description": "The message ID in the original chat at which this group was migrated¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "notify_settings": {
          "description": "Notification settings",
          "links": null
        },
        "online_count": {
          "description": "Number of users currently online",
          "links": null
        },
        "participants_count": {
          "description": "Number of participants of the channel",
          "links": null
        },
        "pinned_msg_id": {
          "description": "Message ID of the last pinned message¹",
          "links": [
            "https://core.telegram.org/api/pin"
          ]
        },
        "pts": {
          "description": "Latest PTS¹ for this channel",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "read_inbox_max_id": {
          "description": "Position up to which all incoming messages are read.",
          "links": null
        },
        "read_outbox_max_id": {
          "description": "Position up to which all outgoing messages are read.",
          "links": null
        },
        "slowmode_next_send_date": {
          "description": "Indicates when the user will be allowed to send another message in the supergroup (unixdate)",
          "links": null
        },
        "slowmode_seconds": {
          "description": "If specified, users in supergroups will only be able to send one message every slowmode_seconds seconds",
          "links": null
        },
        "stats_dc": {
          "description": "If set, specifies the DC to use for fetching channel statistics",
          "links": null
        },
        "stickerset": {
          "description": "Associated stickerset",
          "links": null
        },
        "unread_count": {
          "description": "Count of unread messages",
          "links": null
        }
      }
    },
    "channelLocation": {
      "name": "channelLocation",
      "description": [
        "Geographical location of supergroup (geogroups)"
      ],
      "fields": {
        "address": {
          "description": "Textual description of the address",
          "links": null
        },
        "geo_point": {
          "description": "Geographical location of supergrup",
          "links": null
        }
      }
    },
    "channelLocationEmpty": {
      "name": "channelLocationEmpty",
      "description": [
        "No location (normal supergroup)"
      ]
    },
    "channelMessagesFilter": {
      "name": "channelMessagesFilter",
      "description": [
        "Filter for getting only certain types of channel messages"
      ],
      "fields": {
        "exclude_new_messages": {
          "description": "Whether to exclude new messages from the search",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "ranges": {
          "description": "A range of messages to fetch",
          "links": null
        }
      }
    },
    "channelMessagesFilterEmpty": {
      "name": "channelMessagesFilterEmpty",
      "description": [
        "No filter"
      ]
    },
    "channelParticipant": {
      "name": "channelParticipant",
      "description": [
        "Channel/supergroup participant"
      ],
      "fields": {
        "date": {
          "description": "Date joined",
          "links": null
        },
        "user_id": {
          "description": "Pariticipant user ID",
          "links": null
        }
      }
    },
    "channelParticipantAdmin": {
      "name": "channelParticipantAdmin",
      "description": [
        "Admin"
      ],
      "fields": {
        "admin_rights": {
          "description": "Admin rights¹",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "can_edit": {
          "description": "Can this admin promote other admins with the same permissions?",
          "links": null
        },
        "date": {
          "description": "When did the user join",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "inviter_id": {
          "description": "User that invited the admin to the channel/group",
          "links": null
        },
        "promoted_by": {
          "description": "User that promoted the user to admin",
          "links": null
        },
        "rank": {
          "description": "The role (rank) of the admin in the group: just an arbitrary string, admin by default",
          "links": null
        },
        "self": {
          "description": "Is this the current user",
          "links": null
        },
        "user_id": {
          "description": "Admin user ID",
          "links": null
        }
      }
    },
    "channelParticipantBanned": {
      "name": "channelParticipantBanned",
      "description": [
        "Banned/kicked user"
      ],
      "fields": {
        "banned_rights": {
          "description": "Banned rights¹",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "date": {
          "description": "When did the user join the group",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "kicked_by": {
          "description": "User was kicked by the specified admin",
          "links": null
        },
        "left": {
          "description": "Whether the user has left the group",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "channelParticipantCreator": {
      "name": "channelParticipantCreator",
      "description": [
        "Channel/supergroup creator"
      ],
      "fields": {
        "admin_rights": {
          "description": "Creator admin rights",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "rank": {
          "description": "The role (rank) of the group creator in the group: just an arbitrary string, admin by default",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "channelParticipantLeft": {
      "name": "channelParticipantLeft",
      "description": [
        "A participant that left the channel/supergroup"
      ],
      "fields": {
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "channelParticipantSelf": {
      "name": "channelParticipantSelf",
      "description": [
        "Myself"
      ],
      "fields": {
        "date": {
          "description": "When did I join the channel/supergroup",
          "links": null
        },
        "inviter_id": {
          "description": "User that invited me to the channel/supergroup",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "channelParticipantsAdmins": {
      "name": "channelParticipantsAdmins",
      "description": [
        "Fetch only admin participants"
      ]
    },
    "channelParticipantsBanned": {
      "name": "channelParticipantsBanned",
      "description": [
        "Fetch only banned participants"
      ],
      "fields": {
        "q": {
          "description": "Optional filter for searching banned participants by name (otherwise empty)",
          "links": null
        }
      }
    },
    "channelParticipantsBots": {
      "name": "channelParticipantsBots",
      "description": [
        "Fetch only bot participants"
      ]
    },
    "channelParticipantsContacts": {
      "name": "channelParticipantsContacts",
      "description": [
        "Fetch only participants that are also contacts"
      ],
      "fields": {
        "q": {
          "description": "Optional search query for searching contact participants by name",
          "links": null
        }
      }
    },
    "channelParticipantsKicked": {
      "name": "channelParticipantsKicked",
      "description": [
        "Fetch only kicked participants"
      ],
      "fields": {
        "q": {
          "description": "Optional filter for searching kicked participants by name (otherwise empty)",
          "links": null
        }
      }
    },
    "channelParticipantsMentions": {
      "name": "channelParticipantsMentions",
      "description": [
        "This filter is used when looking for supergroup members to mention.",
        "This filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific thread¹ through the comment section² of a channel."
      ],
      "links": [
        "https://core.telegram.org/api/threads",
        "https://core.telegram.org/api/threads#channel-comments"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "q": {
          "description": "Filter by user name or username",
          "links": null
        },
        "top_msg_id": {
          "description": "Look only for users that posted in this thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        }
      }
    },
    "channelParticipantsRecent": {
      "name": "channelParticipantsRecent",
      "description": [
        "Fetch only recent participants"
      ]
    },
    "channelParticipantsSearch": {
      "name": "channelParticipantsSearch",
      "description": [
        "Query participants by name"
      ],
      "fields": {
        "q": {
          "description": "Search query",
          "links": null
        }
      }
    },
    "channels.adminLogResults": {
      "name": "channels.adminLogResults",
      "description": [
        "Admin log events"
      ],
      "fields": {
        "chats": {
          "description": "Chats mentioned in events",
          "links": null
        },
        "events": {
          "description": "Admin log events",
          "links": null
        },
        "users": {
          "description": "Users mentioned in events",
          "links": null
        }
      }
    },
    "channels.channelParticipant": {
      "name": "channels.channelParticipant",
      "description": [
        "Represents a channel participant"
      ],
      "fields": {
        "participant": {
          "description": "The channel participant",
          "links": null
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "channels.channelParticipants": {
      "name": "channels.channelParticipants",
      "description": [
        "Represents multiple channel participants"
      ],
      "fields": {
        "count": {
          "description": "Total number of participants that correspond to the given query",
          "links": null
        },
        "participants": {
          "description": "Participants",
          "links": null
        },
        "users": {
          "description": "Users mentioned in participant info",
          "links": null
        }
      }
    },
    "channels.channelParticipantsNotModified": {
      "name": "channels.channelParticipantsNotModified",
      "description": [
        "No new participant info could be found"
      ]
    },
    "chat": {
      "name": "chat",
      "description": [
        "Info about a group"
      ],
      "fields": {
        "admin_rights": {
          "description": "Admin rights¹ of the user in the group",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "creator": {
          "description": "Whether the current user is the creator of the group",
          "links": null
        },
        "date": {
          "description": "Date of creation of the group",
          "links": null
        },
        "deactivated": {
          "description": "Whether the group was migrated¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "default_banned_rights": {
          "description": "Default banned rights¹ of all users in the group",
          "links": [
            "https://core.telegram.org/api/rights"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID of the group",
          "links": null
        },
        "kicked": {
          "description": "Whether the current user was kicked from the group",
          "links": null
        },
        "left": {
          "description": "Whether the current user has left the group",
          "links": null
        },
        "migrated_to": {
          "description": "Means this chat was upgraded¹ to a supergroup",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "participants_count": {
          "description": "Participant count",
          "links": null
        },
        "photo": {
          "description": "Chat photo",
          "links": null
        },
        "title": {
          "description": "Title",
          "links": null
        },
        "version": {
          "description": "Used in basic groups to reorder updates and make sure that all of them were received.",
          "links": null
        }
      }
    },
    "chatAdminRights": {
      "name": "chatAdminRights",
      "description": [
        "Represents the rights of an admin in a channel/supergroup¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "add_admins": {
          "description": "If set, allows the admin to add other admins with the same (or more limited) permissions in the channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "anonymous": {
          "description": "Whether this admin is anonymous",
          "links": null
        },
        "ban_users": {
          "description": "If set, allows the admin to ban users from the channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "change_info": {
          "description": "If set, allows the admin to modify the description of the channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "delete_messages": {
          "description": "If set, allows the admin to also delete messages from other admins in the channel¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "edit_messages": {
          "description": "If set, allows the admin to also edit messages from other admins in the channel¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "invite_users": {
          "description": "If set, allows the admin to invite users in the channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "pin_messages": {
          "description": "If set, allows the admin to pin messages in the channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "post_messages": {
          "description": "If set, allows the admin to post messages in the channel¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        }
      }
    },
    "chatBannedRights": {
      "name": "chatBannedRights",
      "description": [
        "Represents the rights of a normal user in a supergroup/channel/chat¹. In this case, the flags are inverted: if set, a flag does not allow a user to do X."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "change_info": {
          "description": "If set, does not allow any user to change the description of a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "embed_links": {
          "description": "If set, does not allow a user to embed links in the messages of a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "invite_users": {
          "description": "If set, does not allow any user to invite users in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "pin_messages": {
          "description": "If set, does not allow any user to pin messages in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "send_games": {
          "description": "If set, does not allow a user to send games in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "send_gifs": {
          "description": "If set, does not allow a user to send gifs in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "send_inline": {
          "description": "If set, does not allow a user to use inline bots in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "send_media": {
          "description": "If set, does not allow a user to send any media in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "send_messages": {
          "description": "If set, does not allow a user to send messages in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "send_polls": {
          "description": "If set, does not allow a user to send stickers in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "send_stickers": {
          "description": "If set, does not allow a user to send stickers in a supergroup/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "until_date": {
          "description": "Validity of said permissions (it is considered forever any value less then 30 seconds or more then 366 days).",
          "links": null
        },
        "view_messages": {
          "description": "If set, does not allow a user to view messages in a supergroup/channel/chat¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        }
      }
    },
    "chatEmpty": {
      "name": "chatEmpty",
      "description": [
        "Empty constructor, group doesn't exist"
      ],
      "fields": {
        "id": {
          "description": "Group identifier",
          "links": null
        }
      }
    },
    "chatForbidden": {
      "name": "chatForbidden",
      "description": [
        "A group to which the user has no access. E.g., because the user was kicked from the group."
      ],
      "fields": {
        "id": {
          "description": "User identifier",
          "links": null
        },
        "title": {
          "description": "Group name",
          "links": null
        }
      }
    },
    "chatFull": {
      "name": "chatFull",
      "description": [
        "Detailed chat info"
      ],
      "fields": {
        "about": {
          "description": "About string for this chat",
          "links": null
        },
        "bot_info": {
          "description": "Info about bots that are in this chat",
          "links": null
        },
        "can_set_username": {
          "description": "Can we change the username of this chat",
          "links": null
        },
        "chat_photo": {
          "description": "Chat photo",
          "links": null
        },
        "exported_invite": {
          "description": "Chat invite",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "has_scheduled": {
          "description": "Whether scheduled messages¹ are available",
          "links": [
            "https://core.telegram.org/api/scheduled-messages"
          ]
        },
        "id": {
          "description": "ID of the chat",
          "links": null
        },
        "notify_settings": {
          "description": "Notification settings",
          "links": null
        },
        "participants": {
          "description": "Participant list",
          "links": null
        },
        "pinned_msg_id": {
          "description": "Message ID of the last pinned message¹",
          "links": [
            "https://core.telegram.org/api/pin"
          ]
        }
      }
    },
    "chatInvite": {
      "name": "chatInvite",
      "description": [
        "Chat invite info"
      ],
      "fields": {
        "broadcast": {
          "description": "Whether this is a channel¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "channel": {
          "description": "Whether this is a channel/supergroup¹ or a normal group²",
          "links": [
            "https://core.telegram.org/api/channel",
            "https://core.telegram.org/api/channel"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "megagroup": {
          "description": "Whether this is a supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "participants": {
          "description": "A few of the participants that are in the group",
          "links": null
        },
        "participants_count": {
          "description": "Participant count",
          "links": null
        },
        "photo": {
          "description": "Chat/supergroup/channel photo",
          "links": null
        },
        "public": {
          "description": "Whether this is a public channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "title": {
          "description": "Chat/supergroup/channel title",
          "links": null
        }
      }
    },
    "chatInviteAlready": {
      "name": "chatInviteAlready",
      "description": [
        "The user has already joined this chat"
      ],
      "fields": {
        "chat": {
          "description": "The chat connected to the invite",
          "links": null
        }
      }
    },
    "chatInviteEmpty": {
      "name": "chatInviteEmpty",
      "description": [
        "No info is associated to the chat invite"
      ]
    },
    "chatInviteExported": {
      "name": "chatInviteExported",
      "description": [
        "Exported chat invite"
      ],
      "fields": {
        "link": {
          "description": "Chat invitation link",
          "links": null
        }
      }
    },
    "chatInvitePeek": {
      "name": "chatInvitePeek",
      "description": [
        "A chat invitation that also allows peeking into the group to read messages without joining it."
      ],
      "fields": {
        "chat": {
          "description": "Chat information",
          "links": null
        },
        "expires": {
          "description": "Read-only anonymous access to this group will be revoked at this date",
          "links": null
        }
      }
    },
    "chatOnlines": {
      "name": "chatOnlines",
      "description": [
        "Number of online users in a chat"
      ],
      "fields": {
        "onlines": {
          "description": "Number of online users",
          "links": null
        }
      }
    },
    "chatParticipant": {
      "name": "chatParticipant",
      "description": [
        "Group member."
      ],
      "fields": {
        "date": {
          "description": "Date added to the group",
          "links": null
        },
        "inviter_id": {
          "description": "ID of the user that added the member to the group",
          "links": null
        },
        "user_id": {
          "description": "Member user ID",
          "links": null
        }
      }
    },
    "chatParticipantAdmin": {
      "name": "chatParticipantAdmin",
      "description": [
        "Chat admin"
      ],
      "fields": {
        "date": {
          "description": "Date when the user was added",
          "links": null
        },
        "inviter_id": {
          "description": "ID of the user that added the member to the group",
          "links": null
        },
        "user_id": {
          "description": "ID of a group member that is admin",
          "links": null
        }
      }
    },
    "chatParticipantCreator": {
      "name": "chatParticipantCreator",
      "description": [
        "Represents the creator of the group"
      ],
      "fields": {
        "user_id": {
          "description": "ID of the user that created the group",
          "links": null
        }
      }
    },
    "chatParticipants": {
      "name": "chatParticipants",
      "description": [
        "Group members."
      ],
      "fields": {
        "chat_id": {
          "description": "Group identifier",
          "links": null
        },
        "participants": {
          "description": "List of group members",
          "links": null
        },
        "version": {
          "description": "Group version number",
          "links": null
        }
      }
    },
    "chatParticipantsForbidden": {
      "name": "chatParticipantsForbidden",
      "description": [
        "Info on members is unavailable"
      ],
      "fields": {
        "chat_id": {
          "description": "Group ID",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "self_participant": {
          "description": "Info about the group membership of the current user",
          "links": null
        }
      }
    },
    "chatPhoto": {
      "name": "chatPhoto",
      "description": [
        "Group profile photo."
      ],
      "fields": {
        "dc_id": {
          "description": "DC where this photo is stored",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "has_video": {
          "description": "Whether the user has an animated profile picture",
          "links": null
        },
        "photo_big": {
          "description": "Location of the file corresponding to the small thumbnail for group profile photo",
          "links": null
        },
        "photo_small": {
          "description": "Location of the file corresponding to the small thumbnail for group profile photo",
          "links": null
        }
      }
    },
    "chatPhotoEmpty": {
      "name": "chatPhotoEmpty",
      "description": [
        "Group photo is not set."
      ]
    },
    "codeSettings": {
      "name": "codeSettings",
      "description": [
        "Settings used by telegram servers for sending the confirm code.",
        "Example implementations: telegram for android¹, tdlib²."
      ],
      "links": [
        "https://github.com/DrKLO/Telegram/blob/master/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java",
        "https://github.com/tdlib/td/tree/master/td/telegram/SendCodeHelper.cpp"
      ],
      "fields": {
        "allow_app_hash": {
          "description": "If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the android SMS receiver APIs¹",
          "links": [
            "https://developers.google.com/identity/sms-retriever/overview"
          ]
        },
        "allow_flashcall": {
          "description": "Whether to allow phone verification via phone calls¹.",
          "links": [
            "https://core.telegram.org/api/auth"
          ]
        },
        "current_number": {
          "description": "Pass true if the phone number is used on the current device. Ignored if allow_flashcall is not set.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      }
    },
    "config": {
      "name": "config",
      "description": [
        "Current configuration"
      ],
      "fields": {
        "autoupdate_url_prefix": {
          "description": "URL to use to auto-update the current app",
          "links": null
        },
        "base_lang_pack_version": {
          "description": "Basic language pack version",
          "links": null
        },
        "blocked_mode": {
          "description": "Indicates that telegram is probably censored by governments/ISPs in the current region",
          "links": null
        },
        "call_connect_timeout_ms": {
          "description": "VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn't connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted",
          "links": null
        },
        "call_packet_timeout_ms": {
          "description": "If during a VoIP call a packet isn't received for the specified period of time, the call must be aborted",
          "links": null
        },
        "call_receive_timeout_ms": {
          "description": "Maximum allowed outgoing ring time in VoIP calls: if the user we're calling doesn't reply within the specified time (in milliseconds), we should hang up the call",
          "links": null
        },
        "call_ring_timeout_ms": {
          "description": "Maximum allowed incoming ring time in VoIP calls: if the current user doesn't reply within the specified time (in milliseconds), the call will be automatically refused",
          "links": null
        },
        "caption_length_max": {
          "description": "Maximum length of caption (length in utf8 codepoints)",
          "links": null
        },
        "channels_read_media_period": {
          "description": "Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read",
          "links": null
        },
        "chat_size_max": {
          "description": "Maximum member count for normal groups¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "date": {
          "description": "Current date at the server",
          "links": null
        },
        "dc_options": {
          "description": "DC IP list",
          "links": null
        },
        "dc_txt_domain_name": {
          "description": "Domain name for fetching encrypted DC list from DNS TXT record",
          "links": null
        },
        "default_p2p_contacts": {
          "description": "Whether the client should use P2P by default for phone calls with contacts",
          "links": null
        },
        "edit_time_limit": {
          "description": "Only messages with age smaller than the one specified can be edited",
          "links": null
        },
        "expires": {
          "description": "Expiration date of this config: when it expires it'll have to be refetched using help.getConfig¹",
          "links": [
            "https://core.telegram.org/method/help.getConfig"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "forwarded_count_max": {
          "description": "Maximum number of messages that can be forwarded at once using messages.forwardMessages¹.",
          "links": [
            "https://core.telegram.org/method/messages.forwardMessages"
          ]
        },
        "gif_search_username": {
          "description": "Username of the bot to use to search for GIFs",
          "links": null
        },
        "ignore_phone_entities": {
          "description": "Whether the client should ignore phone entities¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "img_search_username": {
          "description": "Username of the bot to use for image search",
          "links": null
        },
        "lang_pack_version": {
          "description": "Language pack version",
          "links": null
        },
        "me_url_prefix": {
          "description": "The domain to use to parse in-app links.For example t.me indicates that t.me/username links should parsed to @username, t.me/addsticker/name should be parsed to the appropriate stickerset and so on...",
          "links": null
        },
        "megagroup_size_max": {
          "description": "Maximum member count for supergroups¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "message_length_max": {
          "description": "Maximum length of messages (length in utf8 codepoints)",
          "links": null
        },
        "notify_cloud_delay_ms": {
          "description": "If we are offline, but online from some other client then delay sending the offline notification for notify_cloud_delay_ms milliseconds.",
          "links": null
        },
        "notify_default_delay_ms": {
          "description": "If some other client is online, then delay notification for notification_default_delay_ms milliseconds",
          "links": null
        },
        "offline_blur_timeout_ms": {
          "description": "Delay before offline status needs to be sent to the server",
          "links": null
        },
        "offline_idle_timeout_ms": {
          "description": "Time without any user activity after which it should be treated offline",
          "links": null
        },
        "online_cloud_timeout_ms": {
          "description": "If we are offline, but were online from some other client in last online_cloud_timeout_ms milliseconds after we had gone offline, then delay offline notification for notify_cloud_delay_ms milliseconds.",
          "links": null
        },
        "online_update_period_ms": {
          "description": "The client should update its online status¹ every N milliseconds",
          "links": [
            "https://core.telegram.org/method/account.updateStatus"
          ]
        },
        "pfs_enabled": {
          "description": "Whether pfs¹ was used",
          "links": [
            "https://core.telegram.org/api/pfs"
          ]
        },
        "phonecalls_enabled": {
          "description": "Whether phone calls can be used",
          "links": null
        },
        "pinned_dialogs_count_max": {
          "description": "Maximum count of pinned dialogs",
          "links": null
        },
        "pinned_infolder_count_max": {
          "description": "Maximum count of dialogs per folder",
          "links": null
        },
        "preload_featured_stickers": {
          "description": "Whether the client should preload featured stickers",
          "links": null
        },
        "push_chat_limit": {
          "description": "Not for client use",
          "links": null
        },
        "push_chat_period_ms": {
          "description": "Not for client use",
          "links": null
        },
        "rating_e_decay": {
          "description": "Exponential decay rate for computing top peer rating¹",
          "links": [
            "https://core.telegram.org/api/top-rating"
          ]
        },
        "revoke_pm_inbox": {
          "description": "Whether incoming private messages can be deleted for both participants",
          "links": null
        },
        "revoke_pm_time_limit": {
          "description": "Only private messages with age smaller than the specified can be deleted",
          "links": null
        },
        "revoke_time_limit": {
          "description": "Only channel/supergroup messages with age smaller than the specified can be deleted",
          "links": null
        },
        "saved_gifs_limit": {
          "description": "Maximum count of saved gifs",
          "links": null
        },
        "static_maps_provider": {
          "description": "ID of the map provider to use for venues",
          "links": null
        },
        "stickers_faved_limit": {
          "description": "Maximum number of faved stickers",
          "links": null
        },
        "stickers_recent_limit": {
          "description": "Maximum number of recent stickers",
          "links": null
        },
        "suggested_lang_code": {
          "description": "Suggested language code",
          "links": null
        },
        "test_mode": {
          "description": "Whether we're connected to the test DCs",
          "links": null
        },
        "this_dc": {
          "description": "ID of the DC that returned the reply",
          "links": null
        },
        "tmp_sessions": {
          "description": "Temporary passport¹ sessions",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "venue_search_username": {
          "description": "Username of the bot to use to search for venues",
          "links": null
        },
        "webfile_dc_id": {
          "description": "DC ID to use to download webfiles¹",
          "links": [
            "https://core.telegram.org/api/files"
          ]
        }
      }
    },
    "contact": {
      "name": "contact",
      "description": [
        "A contact of the current user that is registered in the system."
      ],
      "fields": {
        "mutual": {
          "description": "Current user is in the user's contact list",
          "links": null
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      }
    },
    "contactStatus": {
      "name": "contactStatus",
      "description": [
        "Contact status: online / offline."
      ],
      "fields": {
        "status": {
          "description": "Online status",
          "links": null
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      }
    },
    "contacts.blocked": {
      "name": "contacts.blocked",
      "description": [
        "Full list of blocked users."
      ],
      "fields": {
        "blocked": {
          "description": "List of blocked users",
          "links": null
        },
        "chats": {
          "description": "Blocked chats",
          "links": null
        },
        "users": {
          "description": "List of users",
          "links": null
        }
      }
    },
    "contacts.blockedSlice": {
      "name": "contacts.blockedSlice",
      "description": [
        "Incomplete list of blocked users."
      ],
      "fields": {
        "blocked": {
          "description": "List of blocked users",
          "links": null
        },
        "chats": {
          "description": "Blocked chats",
          "links": null
        },
        "count": {
          "description": "Total number of elements in the list",
          "links": null
        },
        "users": {
          "description": "List of users",
          "links": null
        }
      }
    },
    "contacts.contacts": {
      "name": "contacts.contacts",
      "description": [
        "The current user's contact list and info on users."
      ],
      "fields": {
        "contacts": {
          "description": "Contact list",
          "links": null
        },
        "saved_count": {
          "description": "Number of contacts that were saved successfully",
          "links": null
        },
        "users": {
          "description": "User list",
          "links": null
        }
      }
    },
    "contacts.contactsNotModified": {
      "name": "contacts.contactsNotModified",
      "description": [
        "Contact list on the server is the same as the list on the client."
      ]
    },
    "contacts.found": {
      "name": "contacts.found",
      "description": [
        "Users found by name substring and auxiliary data."
      ],
      "fields": {
        "chats": {
          "description": "Found chats",
          "links": null
        },
        "my_results": {
          "description": "Personalized results",
          "links": null
        },
        "results": {
          "description": "List of found user identifiers",
          "links": null
        },
        "users": {
          "description": "List of users",
          "links": null
        }
      }
    },
    "contacts.importedContacts": {
      "name": "contacts.importedContacts",
      "description": [
        "Info on succesfully imported contacts."
      ],
      "fields": {
        "imported": {
          "description": "List of succesfully imported contacts",
          "links": null
        },
        "popular_invites": {
          "description": "Popular contacts",
          "links": null
        },
        "retry_contacts": {
          "description": "List of contact ids that could not be imported due to system limitation and will need to be imported at a later date.Parameter added in Layer 13¹",
          "links": [
            "https://core.telegram.org/api/layers#layer-13"
          ]
        },
        "users": {
          "description": "List of users",
          "links": null
        }
      }
    },
    "contacts.resolvedPeer": {
      "name": "contacts.resolvedPeer",
      "description": [
        "Resolved peer"
      ],
      "fields": {
        "chats": {
          "description": "Chats",
          "links": null
        },
        "peer": {
          "description": "The peer",
          "links": null
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "contacts.topPeers": {
      "name": "contacts.topPeers",
      "description": [
        "Top peers"
      ],
      "fields": {
        "categories": {
          "description": "Top peers by top peer category",
          "links": null
        },
        "chats": {
          "description": "Chats",
          "links": null
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "contacts.topPeersDisabled": {
      "name": "contacts.topPeersDisabled",
      "description": [
        "Top peers disabled"
      ]
    },
    "contacts.topPeersNotModified": {
      "name": "contacts.topPeersNotModified",
      "description": [
        "Top peer info hasn't changed"
      ]
    },
    "dataJSON": {
      "name": "dataJSON",
      "description": [
        "Represents a json-encoded object"
      ],
      "fields": {
        "data": {
          "description": "JSON-encoded object",
          "links": null
        }
      }
    },
    "dcOption": {
      "name": "dcOption",
      "description": [
        "Data centre"
      ],
      "fields": {
        "cdn": {
          "description": "Whether this is a CDN DC¹.",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "DC ID",
          "links": null
        },
        "ip_address": {
          "description": "IP address of DC",
          "links": null
        },
        "ipv6": {
          "description": "Whether the specified IP is an IPv6 address",
          "links": null
        },
        "media_only": {
          "description": "Whether this DC should only be used to download or upload files¹",
          "links": [
            "https://core.telegram.org/api/files"
          ]
        },
        "port": {
          "description": "Port",
          "links": null
        },
        "secret": {
          "description": "If the tcpo_only flag is set, specifies the secret to use when connecting using transport obfuscation¹",
          "links": [
            "https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation"
          ]
        },
        "static": {
          "description": "If set, this IP should be used when connecting through a proxy",
          "links": null
        },
        "tcpo_only": {
          "description": "Whether this DC only supports connection with transport obfuscation¹",
          "links": [
            "https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation"
          ]
        }
      }
    },
    "dialog": {
      "name": "dialog",
      "description": [
        "Chat"
      ],
      "fields": {
        "draft": {
          "description": "Message draft",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "notify_settings": {
          "description": "Notification settings",
          "links": null
        },
        "peer": {
          "description": "The chat",
          "links": null
        },
        "pinned": {
          "description": "Is the dialog pinned",
          "links": null
        },
        "pts": {
          "description": "PTS¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "read_inbox_max_id": {
          "description": "Position up to which all incoming messages are read.",
          "links": null
        },
        "read_outbox_max_id": {
          "description": "Position up to which all outgoing messages are read.",
          "links": null
        },
        "top_message": {
          "description": "The latest message ID",
          "links": null
        },
        "unread_count": {
          "description": "Number of unread messages",
          "links": null
        },
        "unread_mark": {
          "description": "Whether the chat was manually marked as unread",
          "links": null
        },
        "unread_mentions_count": {
          "description": "Number of unread mentions¹",
          "links": [
            "https://core.telegram.org/api/mentions"
          ]
        }
      }
    },
    "dialogFilter": {
      "name": "dialogFilter",
      "description": [
        "Dialog filter AKA folder¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ],
      "fields": {
        "bots": {
          "description": "Whether to include all bots in this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "broadcasts": {
          "description": "Whether to include all channels in this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "contacts": {
          "description": "Whether to include all contacts in this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "emoticon": {
          "description": "Folder¹ emoticon",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "exclude_archived": {
          "description": "Whether to exclude archived chats from this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "exclude_muted": {
          "description": "Whether to exclude muted chats from this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "exclude_peers": {
          "description": "Exclude the following chats from this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "exclude_read": {
          "description": "Whether to exclude read chats from this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "groups": {
          "description": "Whether to include all groups in this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "id": {
          "description": "Folder¹ ID",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "include_peers": {
          "description": "Include the following chats in this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "non_contacts": {
          "description": "Whether to include all non-contacts in this folder¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "pinned_peers": {
          "description": "Pinned chats, folders¹ can have unlimited pinned chats",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "title": {
          "description": "Folder¹ name",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        }
      }
    },
    "dialogFilterSuggested": {
      "name": "dialogFilterSuggested",
      "description": [
        "Suggested folders¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ],
      "fields": {
        "description": {
          "description": "Folder¹ description",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "filter": {
          "description": "Folder info¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        }
      }
    },
    "dialogFolder": {
      "name": "dialogFolder",
      "description": [
        "Dialog in folder"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder": {
          "description": "The folder",
          "links": null
        },
        "peer": {
          "description": "Peer in folder",
          "links": null
        },
        "pinned": {
          "description": "Is this folder pinned",
          "links": null
        },
        "top_message": {
          "description": "Latest message ID of dialog",
          "links": null
        },
        "unread_muted_messages_count": {
          "description": "Number of unread messages from muted peers in folder",
          "links": null
        },
        "unread_muted_peers_count": {
          "description": "Number of unread muted peers in folder",
          "links": null
        },
        "unread_unmuted_messages_count": {
          "description": "Number of unread messages from unmuted peers in folder",
          "links": null
        },
        "unread_unmuted_peers_count": {
          "description": "Number of unread unmuted peers in folder",
          "links": null
        }
      }
    },
    "dialogPeer": {
      "name": "dialogPeer",
      "description": [
        "Peer"
      ],
      "fields": {
        "peer": {
          "description": "Peer",
          "links": null
        }
      }
    },
    "dialogPeerFolder": {
      "name": "dialogPeerFolder",
      "description": [
        "Peer folder¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders#peer-folders"
      ],
      "fields": {
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        }
      }
    },
    "document": {
      "name": "document",
      "description": [
        "Document"
      ],
      "fields": {
        "access_hash": {
          "description": "Check sum, dependant on document ID",
          "links": null
        },
        "attributes": {
          "description": "Attributes",
          "links": null
        },
        "date": {
          "description": "Creation date",
          "links": null
        },
        "dc_id": {
          "description": "DC ID",
          "links": null
        },
        "file_reference": {
          "description": "File reference¹",
          "links": [
            "https://core.telegram.org/api/file_reference"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Document ID",
          "links": null
        },
        "mime_type": {
          "description": "MIME type",
          "links": null
        },
        "size": {
          "description": "Size",
          "links": null
        },
        "thumbs": {
          "description": "Thumbnails",
          "links": null
        },
        "video_thumbs": {
          "description": "Video thumbnails",
          "links": null
        }
      }
    },
    "documentAttributeAnimated": {
      "name": "documentAttributeAnimated",
      "description": [
        "Defines an animated GIF"
      ]
    },
    "documentAttributeAudio": {
      "name": "documentAttributeAudio",
      "description": [
        "Represents an audio file"
      ],
      "fields": {
        "duration": {
          "description": "Duration in seconds",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "performer": {
          "description": "Performer",
          "links": null
        },
        "title": {
          "description": "Name of song",
          "links": null
        },
        "voice": {
          "description": "Whether this is a voice message",
          "links": null
        },
        "waveform": {
          "description": "Waveform",
          "links": null
        }
      }
    },
    "documentAttributeFilename": {
      "name": "documentAttributeFilename",
      "description": [
        "A simple document with a file name"
      ],
      "fields": {
        "file_name": {
          "description": "The file name",
          "links": null
        }
      }
    },
    "documentAttributeHasStickers": {
      "name": "documentAttributeHasStickers",
      "description": [
        "Whether the current document has stickers attached"
      ]
    },
    "documentAttributeImageSize": {
      "name": "documentAttributeImageSize",
      "description": [
        "Defines the width and height of an image uploaded as document"
      ],
      "fields": {
        "h": {
          "description": "Height of image",
          "links": null
        },
        "w": {
          "description": "Width of image",
          "links": null
        }
      }
    },
    "documentAttributeSticker": {
      "name": "documentAttributeSticker",
      "description": [
        "Defines a sticker"
      ],
      "fields": {
        "alt": {
          "description": "Alternative emoji representation of sticker",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "mask": {
          "description": "Whether this is a mask sticker",
          "links": null
        },
        "mask_coords": {
          "description": "Mask coordinates (if this is a mask sticker, attached to a photo)",
          "links": null
        },
        "stickerset": {
          "description": "Associated stickerset",
          "links": null
        }
      }
    },
    "documentAttributeVideo": {
      "name": "documentAttributeVideo",
      "description": [
        "Defines a video"
      ],
      "fields": {
        "duration": {
          "description": "Duration in seconds",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "h": {
          "description": "Video height",
          "links": null
        },
        "round_message": {
          "description": "Whether this is a round video",
          "links": null
        },
        "supports_streaming": {
          "description": "Whether the video supports streaming",
          "links": null
        },
        "w": {
          "description": "Video width",
          "links": null
        }
      }
    },
    "documentEmpty": {
      "name": "documentEmpty",
      "description": [
        "Empty constructor, document doesn't exist."
      ],
      "fields": {
        "id": {
          "description": "Document ID or 0",
          "links": null
        }
      }
    },
    "draftMessage": {
      "name": "draftMessage",
      "description": [
        "Represents a message draft¹."
      ],
      "links": [
        "https://core.telegram.org/api/drafts"
      ],
      "fields": {
        "date": {
          "description": "Date of last update of the draft.",
          "links": null
        },
        "entities": {
          "description": "Message entities¹ for styled text.",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "The draft",
          "links": null
        },
        "no_webpage": {
          "description": "Whether no webpage preview will be generated",
          "links": null
        },
        "reply_to_msg_id": {
          "description": "The message this message will reply to",
          "links": null
        }
      }
    },
    "draftMessageEmpty": {
      "name": "draftMessageEmpty",
      "description": [
        "Empty draft"
      ],
      "fields": {
        "date": {
          "description": "When was the draft last updated",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      }
    },
    "emojiKeyword": {
      "name": "emojiKeyword",
      "description": [
        "Emoji keyword"
      ],
      "fields": {
        "emoticons": {
          "description": "Emojis associated to keyword",
          "links": null
        },
        "keyword": {
          "description": "Keyword",
          "links": null
        }
      }
    },
    "emojiKeywordDeleted": {
      "name": "emojiKeywordDeleted",
      "description": [
        "Deleted emoji keyword"
      ],
      "fields": {
        "emoticons": {
          "description": "Emojis that were associated to keyword",
          "links": null
        },
        "keyword": {
          "description": "Keyword",
          "links": null
        }
      }
    },
    "emojiKeywordsDifference": {
      "name": "emojiKeywordsDifference",
      "description": [
        "Changes to emoji keywords"
      ],
      "fields": {
        "from_version": {
          "description": "Previous emoji keyword list version",
          "links": null
        },
        "keywords": {
          "description": "Emojis associated to keywords",
          "links": null
        },
        "lang_code": {
          "description": "Language code for keywords",
          "links": null
        },
        "version": {
          "description": "Current version of emoji keyword list",
          "links": null
        }
      }
    },
    "emojiLanguage": {
      "name": "emojiLanguage",
      "description": [
        "Emoji language"
      ],
      "fields": {
        "lang_code": {
          "description": "Language code",
          "links": null
        }
      }
    },
    "emojiURL": {
      "name": "emojiURL",
      "description": [
        "An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation"
      ],
      "fields": {
        "url": {
          "description": "An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation",
          "links": null
        }
      }
    },
    "encryptedChat": {
      "name": "encryptedChat",
      "description": [
        "Encrypted chat"
      ],
      "fields": {
        "access_hash": {
          "description": "Check sum dependant on the user ID",
          "links": null
        },
        "admin_id": {
          "description": "Chat creator ID",
          "links": null
        },
        "date": {
          "description": "Date chat was created",
          "links": null
        },
        "g_a_or_b": {
          "description": "B = g ^ b mod p, if the currently authorized user is the chat's creator,or A = g ^ a mod p otherwiseSee Wikipedia¹ for more info",
          "links": [
            "https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"
          ]
        },
        "id": {
          "description": "Chat ID",
          "links": null
        },
        "key_fingerprint": {
          "description": "64-bit fingerprint of received key",
          "links": null
        },
        "participant_id": {
          "description": "ID of the second chat participant",
          "links": null
        }
      }
    },
    "encryptedChatDiscarded": {
      "name": "encryptedChatDiscarded",
      "description": [
        "Discarded or deleted chat."
      ],
      "fields": {
        "id": {
          "description": "Chat ID",
          "links": null
        }
      }
    },
    "encryptedChatEmpty": {
      "name": "encryptedChatEmpty",
      "description": [
        "Empty constructor."
      ],
      "fields": {
        "id": {
          "description": "Chat ID",
          "links": null
        }
      }
    },
    "encryptedChatRequested": {
      "name": "encryptedChatRequested",
      "description": [
        "Request to create an encrypted chat."
      ],
      "fields": {
        "access_hash": {
          "description": "Check sum depending on user ID",
          "links": null
        },
        "admin_id": {
          "description": "Chat creator ID",
          "links": null
        },
        "date": {
          "description": "Chat creation date",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "g_a": {
          "description": "A = g ^ a mod p, see Wikipedia¹",
          "links": [
            "https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"
          ]
        },
        "id": {
          "description": "Chat ID",
          "links": null
        },
        "participant_id": {
          "description": "ID of second chat participant",
          "links": null
        }
      }
    },
    "encryptedChatWaiting": {
      "name": "encryptedChatWaiting",
      "description": [
        "Chat waiting for approval of second participant."
      ],
      "fields": {
        "access_hash": {
          "description": "Checking sum depending on user ID",
          "links": null
        },
        "admin_id": {
          "description": "Chat creator ID",
          "links": null
        },
        "date": {
          "description": "Date of chat creation",
          "links": null
        },
        "id": {
          "description": "Chat ID",
          "links": null
        },
        "participant_id": {
          "description": "ID of second chat participant",
          "links": null
        }
      }
    },
    "encryptedFile": {
      "name": "encryptedFile",
      "description": [
        "Encrypted file."
      ],
      "fields": {
        "access_hash": {
          "description": "Checking sum depending on user ID",
          "links": null
        },
        "dc_id": {
          "description": "Number of data centre",
          "links": null
        },
        "id": {
          "description": "File ID",
          "links": null
        },
        "key_fingerprint": {
          "description": "32-bit fingerprint of key used for file encryption",
          "links": null
        },
        "size": {
          "description": "File size in bytes",
          "links": null
        }
      }
    },
    "encryptedFileEmpty": {
      "name": "encryptedFileEmpty",
      "description": [
        "Empty constructor, unexisitng file."
      ]
    },
    "encryptedMessage": {
      "name": "encryptedMessage",
      "description": [
        "Encrypted message."
      ],
      "fields": {
        "bytes": {
          "description": "TL-serialising of DecryptedMessage¹ type, encrypted with the key creatied at stage of chat initialization",
          "links": [
            "https://core.telegram.org/type/DecryptedMessage"
          ]
        },
        "chat_id": {
          "description": "ID of encrypted chat",
          "links": null
        },
        "date": {
          "description": "Date of sending",
          "links": null
        },
        "file": {
          "description": "Attached encrypted file",
          "links": null
        },
        "random_id": {
          "description": "Random message ID, assigned by the author of message",
          "links": null
        }
      }
    },
    "encryptedMessageService": {
      "name": "encryptedMessageService",
      "description": [
        "Encrypted service message"
      ],
      "fields": {
        "bytes": {
          "description": "TL-serialising of DecryptedMessage¹ type, encrypted with the key creatied at stage of chat initialization",
          "links": [
            "https://core.telegram.org/type/DecryptedMessage"
          ]
        },
        "chat_id": {
          "description": "ID of encrypted chat",
          "links": null
        },
        "date": {
          "description": "Date of sending",
          "links": null
        },
        "random_id": {
          "description": "Random message ID, assigned by the author of message",
          "links": null
        }
      }
    },
    "error": {
      "name": "error",
      "description": [
        "Error."
      ],
      "fields": {
        "code": {
          "description": "Error code",
          "links": null
        },
        "text": {
          "description": "Message",
          "links": null
        }
      }
    },
    "exportedMessageLink": {
      "name": "exportedMessageLink",
      "description": [
        "Link to a message in a supergroup/channel"
      ],
      "fields": {
        "html": {
          "description": "Embed code",
          "links": null
        },
        "link": {
          "description": "URL",
          "links": null
        }
      }
    },
    "fileLocationToBeDeprecated": {
      "name": "fileLocationToBeDeprecated",
      "description": [
        "Indicates the location of a photo, will be deprecated soon"
      ],
      "fields": {
        "local_id": {
          "description": "Local ID",
          "links": null
        },
        "volume_id": {
          "description": "Volume ID",
          "links": null
        }
      }
    },
    "folder": {
      "name": "folder",
      "description": [
        "Folder"
      ],
      "fields": {
        "autofill_new_broadcasts": {
          "description": "Automatically add new channels to this folder",
          "links": null
        },
        "autofill_new_correspondents": {
          "description": "Automatically add new private chats to this folder",
          "links": null
        },
        "autofill_public_groups": {
          "description": "Automatically add joined new public supergroups to this folder",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Folder ID",
          "links": null
        },
        "photo": {
          "description": "Folder picture",
          "links": null
        },
        "title": {
          "description": "Folder title",
          "links": null
        }
      }
    },
    "folderPeer": {
      "name": "folderPeer",
      "description": [
        "Peer in a folder"
      ],
      "fields": {
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "peer": {
          "description": "Folder peer info",
          "links": null
        }
      }
    },
    "game": {
      "name": "game",
      "description": [
        "Indicates an already sent game"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash of the game",
          "links": null
        },
        "description": {
          "description": "Game description",
          "links": null
        },
        "document": {
          "description": "Optional attached document",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID of the game",
          "links": null
        },
        "photo": {
          "description": "Game preview",
          "links": null
        },
        "short_name": {
          "description": "Short name for the game",
          "links": null
        },
        "title": {
          "description": "Title of the game",
          "links": null
        }
      }
    },
    "geoPoint": {
      "name": "geoPoint",
      "description": [
        "GeoPoint."
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "accuracy_radius": {
          "description": "The estimated horizontal accuracy of the location, in meters; as defined by the sender.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "lat": {
          "description": "Latitude",
          "links": null
        },
        "long": {
          "description": "Longtitude",
          "links": null
        }
      }
    },
    "geoPointEmpty": {
      "name": "geoPointEmpty",
      "description": [
        "Empty constructor."
      ]
    },
    "globalPrivacySettings": {
      "name": "globalPrivacySettings",
      "description": [
        "Global privacy settings"
      ],
      "fields": {
        "archive_and_mute_new_noncontact_peers": {
          "description": "Whether to archive and mute new chats from non-contacts",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      }
    },
    "help.appUpdate": {
      "name": "help.appUpdate",
      "description": [
        "An update is available for the application."
      ],
      "fields": {
        "can_not_skip": {
          "description": "Unskippable, the new info must be shown to the user (with a popup or something else)",
          "links": null
        },
        "document": {
          "description": "Application binary",
          "links": null
        },
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Update ID",
          "links": null
        },
        "text": {
          "description": "Text description of the update",
          "links": null
        },
        "url": {
          "description": "Application download URL",
          "links": null
        },
        "version": {
          "description": "New version name",
          "links": null
        }
      }
    },
    "help.countriesList": {
      "name": "help.countriesList",
      "description": [
        "Name, ISO code, localized name and phone codes/patterns of all available countries"
      ],
      "fields": {
        "countries": {
          "description": "Name, ISO code, localized name and phone codes/patterns of all available countries",
          "links": null
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      }
    },
    "help.countriesListNotModified": {
      "name": "help.countriesListNotModified",
      "description": [
        "The country list has not changed"
      ]
    },
    "help.country": {
      "name": "help.country",
      "description": [
        "Name, ISO code, localized name and phone codes/patterns of a specific country"
      ],
      "fields": {
        "country_codes": {
          "description": "Phone codes/patterns",
          "links": null
        },
        "default_name": {
          "description": "Name of the country in the country's language",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "hidden": {
          "description": "Whether this country should not be shown in the list",
          "links": null
        },
        "iso2": {
          "description": "ISO code of country",
          "links": null
        },
        "name": {
          "description": "Name of the country in the user's language, if different from the original name",
          "links": null
        }
      }
    },
    "help.countryCode": {
      "name": "help.countryCode",
      "description": [
        "Country code and phone number pattern of a specific country"
      ],
      "fields": {
        "country_code": {
          "description": "ISO country code",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "patterns": {
          "description": "Phone patterns: for example, XXX XXX XXX",
          "links": null
        },
        "prefixes": {
          "description": "Possible phone prefixes",
          "links": null
        }
      }
    },
    "help.deepLinkInfo": {
      "name": "help.deepLinkInfo",
      "description": [
        "Deep linking info"
      ],
      "fields": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "Message to show to the user",
          "links": null
        },
        "update_app": {
          "description": "An update of the app is required to parse this link",
          "links": null
        }
      }
    },
    "help.deepLinkInfoEmpty": {
      "name": "help.deepLinkInfoEmpty",
      "description": [
        "Deep link info empty"
      ]
    },
    "help.inviteText": {
      "name": "help.inviteText",
      "description": [
        "Text of a text message with an invitation to install Telegram."
      ],
      "fields": {
        "message": {
          "description": "Text of the message",
          "links": null
        }
      }
    },
    "help.noAppUpdate": {
      "name": "help.noAppUpdate",
      "description": [
        "No updates are available for the application."
      ]
    },
    "help.passportConfig": {
      "name": "help.passportConfig",
      "description": [
        "Telegram passport¹ configuration"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "fields": {
        "countries_langs": {
          "description": "Localization",
          "links": null
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      }
    },
    "help.passportConfigNotModified": {
      "name": "help.passportConfigNotModified",
      "description": [
        "Password configuration not modified"
      ]
    },
    "help.promoData": {
      "name": "help.promoData",
      "description": [
        "MTProxy/Public Service Announcement information"
      ],
      "fields": {
        "chats": {
          "description": "Chat info",
          "links": null
        },
        "expires": {
          "description": "Expiry of PSA/MTProxy info",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "MTProxy/PSA peer",
          "links": null
        },
        "proxy": {
          "description": "MTProxy-related channel",
          "links": null
        },
        "psa_message": {
          "description": "PSA message",
          "links": null
        },
        "psa_type": {
          "description": "PSA type",
          "links": null
        },
        "users": {
          "description": "User info",
          "links": null
        }
      }
    },
    "help.promoDataEmpty": {
      "name": "help.promoDataEmpty",
      "description": [
        "No PSA/MTProxy info is available"
      ],
      "fields": {
        "expires": {
          "description": "Re-fetch PSA/MTProxy info after the specified number of seconds",
          "links": null
        }
      }
    },
    "help.recentMeUrls": {
      "name": "help.recentMeUrls",
      "description": [
        "Recent t.me URLs"
      ],
      "fields": {
        "chats": {
          "description": "Chats",
          "links": null
        },
        "urls": {
          "description": "URLs",
          "links": null
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "help.support": {
      "name": "help.support",
      "description": [
        "Info on support user."
      ],
      "fields": {
        "phone_number": {
          "description": "Phone number",
          "links": null
        },
        "user": {
          "description": "User",
          "links": null
        }
      }
    },
    "help.supportName": {
      "name": "help.supportName",
      "description": [
        "Localized name for telegram support"
      ],
      "fields": {
        "name": {
          "description": "Localized name",
          "links": null
        }
      }
    },
    "help.termsOfService": {
      "name": "help.termsOfService",
      "description": [
        "Info about the latest telegram Terms Of Service"
      ],
      "fields": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID of the new terms",
          "links": null
        },
        "min_age_confirm": {
          "description": "Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age.",
          "links": null
        },
        "popup": {
          "description": "Whether a prompt must be showed to the user, in order to accept the new terms.",
          "links": null
        },
        "text": {
          "description": "Text of the new terms",
          "links": null
        }
      }
    },
    "help.termsOfServiceUpdate": {
      "name": "help.termsOfServiceUpdate",
      "description": [
        "Info about an update of telegram's terms of service. If the terms of service are declined, then the account.deleteAccount¹ method should be called with the reason \"Decline ToS update\""
      ],
      "links": [
        "https://core.telegram.org/method/account.deleteAccount"
      ],
      "fields": {
        "expires": {
          "description": "New TOS updates will have to be queried using help.getTermsOfServiceUpdate¹ in expires seconds",
          "links": [
            "https://core.telegram.org/method/help.getTermsOfServiceUpdate"
          ]
        },
        "terms_of_service": {
          "description": "New terms of service",
          "links": null
        }
      }
    },
    "help.termsOfServiceUpdateEmpty": {
      "name": "help.termsOfServiceUpdateEmpty",
      "description": [
        "No changes were made to telegram's terms of service"
      ],
      "fields": {
        "expires": {
          "description": "New TOS updates will have to be queried using help.getTermsOfServiceUpdate¹ in expires seconds",
          "links": [
            "https://core.telegram.org/method/help.getTermsOfServiceUpdate"
          ]
        }
      }
    },
    "help.userInfo": {
      "name": "help.userInfo",
      "description": [
        "Internal use"
      ],
      "fields": {
        "author": {
          "description": "Author",
          "links": null
        },
        "date": {
          "description": "Date",
          "links": null
        },
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "message": {
          "description": "Info",
          "links": null
        }
      }
    },
    "help.userInfoEmpty": {
      "name": "help.userInfoEmpty",
      "description": [
        "Internal use"
      ]
    },
    "highScore": {
      "name": "highScore",
      "description": [
        "Game highscore"
      ],
      "fields": {
        "pos": {
          "description": "Position in highscore list",
          "links": null
        },
        "score": {
          "description": "Score",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "importedContact": {
      "name": "importedContact",
      "description": [
        "Successfully imported contact."
      ],
      "fields": {
        "client_id": {
          "description": "The contact's client identifier (passed to one of the InputContact¹ constructors)",
          "links": [
            "https://core.telegram.org/type/InputContact"
          ]
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      }
    },
    "inlineBotSwitchPM": {
      "name": "inlineBotSwitchPM",
      "description": [
        "The bot requested the user to message him in private"
      ],
      "fields": {
        "start_param": {
          "description": "The parameter for the /start parameter",
          "links": null
        },
        "text": {
          "description": "Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter start_parameter (can be empty)",
          "links": null
        }
      }
    },
    "inputAppEvent": {
      "name": "inputAppEvent",
      "description": [
        "Event that occured in the application."
      ],
      "fields": {
        "data": {
          "description": "Details of the event",
          "links": null
        },
        "peer": {
          "description": "Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object",
          "links": null
        },
        "time": {
          "description": "Client's exact timestamp for the event",
          "links": null
        },
        "type": {
          "description": "Type of event",
          "links": null
        }
      }
    },
    "inputBotInlineMessageGame": {
      "name": "inputBotInlineMessageGame",
      "description": [
        "A game"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        }
      }
    },
    "inputBotInlineMessageID": {
      "name": "inputBotInlineMessageID",
      "description": [
        "Represents a sent inline message from the perspective of a bot"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash of message",
          "links": null
        },
        "dc_id": {
          "description": "DC ID to use when working with this inline message",
          "links": null
        },
        "id": {
          "description": "ID of message",
          "links": null
        }
      }
    },
    "inputBotInlineMessageMediaAuto": {
      "name": "inputBotInlineMessageMediaAuto",
      "description": [
        "A media"
      ],
      "fields": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "Caption",
          "links": null
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        }
      }
    },
    "inputBotInlineMessageMediaContact": {
      "name": "inputBotInlineMessageMediaContact",
      "description": [
        "A contact"
      ],
      "fields": {
        "first_name": {
          "description": "First name",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "last_name": {
          "description": "Last name",
          "links": null
        },
        "phone_number": {
          "description": "Phone number",
          "links": null
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        },
        "vcard": {
          "description": "VCard info",
          "links": null
        }
      }
    },
    "inputBotInlineMessageMediaGeo": {
      "name": "inputBotInlineMessageMediaGeo",
      "description": [
        "Geolocation"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo_point": {
          "description": "Geolocation",
          "links": null
        },
        "heading": {
          "description": "For live locations¹, a direction in which the location moves, in degrees; 1-360",
          "links": [
            "https://core.telegram.org/api/live-location"
          ]
        },
        "period": {
          "description": "Validity period",
          "links": null
        },
        "proximity_notification_radius": {
          "description": "For live locations¹, a maximum distance to another chat member for proximity alerts, in meters (0-100000)",
          "links": [
            "https://core.telegram.org/api/live-location"
          ]
        },
        "reply_markup": {
          "description": "Reply markup for bot/inline keyboards",
          "links": null
        }
      }
    },
    "inputBotInlineMessageMediaVenue": {
      "name": "inputBotInlineMessageMediaVenue",
      "description": [
        "Venue"
      ],
      "fields": {
        "address": {
          "description": "Address",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo_point": {
          "description": "Geolocation",
          "links": null
        },
        "provider": {
          "description": "Venue provider: currently only \"foursquare\" needs to be supported",
          "links": null
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        },
        "title": {
          "description": "Venue name",
          "links": null
        },
        "venue_id": {
          "description": "Venue ID in the provider's database",
          "links": null
        },
        "venue_type": {
          "description": "Venue type in the provider's database",
          "links": null
        }
      }
    },
    "inputBotInlineMessageText": {
      "name": "inputBotInlineMessageText",
      "description": [
        "Simple text message"
      ],
      "fields": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "Message",
          "links": null
        },
        "no_webpage": {
          "description": "Disable webpage preview",
          "links": null
        },
        "reply_markup": {
          "description": "Inline keyboard",
          "links": null
        }
      }
    },
    "inputBotInlineResult": {
      "name": "inputBotInlineResult",
      "description": [
        "An inline bot result"
      ],
      "fields": {
        "content": {
          "description": "Result contents",
          "links": null
        },
        "description": {
          "description": "Result description",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID of result",
          "links": null
        },
        "send_message": {
          "description": "Message to send when the result is selected",
          "links": null
        },
        "thumb": {
          "description": "Thumbnail for result",
          "links": null
        },
        "title": {
          "description": "Result title",
          "links": null
        },
        "type": {
          "description": "Result type (see bot API docs¹)",
          "links": [
            "https://core.telegram.org/bots/api#inlinequeryresult"
          ]
        },
        "url": {
          "description": "URL of result",
          "links": null
        }
      }
    },
    "inputBotInlineResultDocument": {
      "name": "inputBotInlineResultDocument",
      "description": [
        "Document (media of any type except for photos)"
      ],
      "fields": {
        "description": {
          "description": "Result description",
          "links": null
        },
        "document": {
          "description": "Document to send",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Result ID",
          "links": null
        },
        "send_message": {
          "description": "Message to send when the result is selected",
          "links": null
        },
        "title": {
          "description": "Result title",
          "links": null
        },
        "type": {
          "description": "Result type (see bot API docs¹)",
          "links": [
            "https://core.telegram.org/bots/api#inlinequeryresult"
          ]
        }
      }
    },
    "inputBotInlineResultGame": {
      "name": "inputBotInlineResultGame",
      "description": [
        "Game"
      ],
      "fields": {
        "id": {
          "description": "Result ID",
          "links": null
        },
        "send_message": {
          "description": "Message to send when the result is selected",
          "links": null
        },
        "short_name": {
          "description": "Game short name",
          "links": null
        }
      }
    },
    "inputBotInlineResultPhoto": {
      "name": "inputBotInlineResultPhoto",
      "description": [
        "Photo"
      ],
      "fields": {
        "id": {
          "description": "Result ID",
          "links": null
        },
        "photo": {
          "description": "Photo to send",
          "links": null
        },
        "send_message": {
          "description": "Message to send when the result is selected",
          "links": null
        },
        "type": {
          "description": "Result type (see bot API docs¹)",
          "links": [
            "https://core.telegram.org/bots/api#inlinequeryresult"
          ]
        }
      }
    },
    "inputChannel": {
      "name": "inputChannel",
      "description": [
        "Represents a channel"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash taken from the channel¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/channel"
          ]
        },
        "channel_id": {
          "description": "Channel ID",
          "links": null
        }
      }
    },
    "inputChannelEmpty": {
      "name": "inputChannelEmpty",
      "description": [
        "Represents the absence of a channel"
      ]
    },
    "inputChannelFromMessage": {
      "name": "inputChannelFromMessage",
      "description": [
        "Defines a min¹ channel that was seen in a certain message of a certain chat."
      ],
      "links": [
        "https://core.telegram.org/api/min"
      ],
      "fields": {
        "channel_id": {
          "description": "The channel ID",
          "links": null
        },
        "msg_id": {
          "description": "The message ID in the chat where the channel was seen",
          "links": null
        },
        "peer": {
          "description": "The chat where the channel was seen",
          "links": null
        }
      }
    },
    "inputChatPhoto": {
      "name": "inputChatPhoto",
      "description": [
        "Existing photo to be set as a chat profile photo."
      ],
      "fields": {
        "id": {
          "description": "Existing photo",
          "links": null
        }
      }
    },
    "inputChatPhotoEmpty": {
      "name": "inputChatPhotoEmpty",
      "description": [
        "Empty constructor, remove group photo."
      ]
    },
    "inputChatUploadedPhoto": {
      "name": "inputChatUploadedPhoto",
      "description": [
        "New photo to be set as group profile photo."
      ],
      "fields": {
        "file": {
          "description": "File saved in parts using the method upload.saveFilePart¹",
          "links": [
            "https://core.telegram.org/method/upload.saveFilePart"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "video": {
          "description": "Square video for animated profile picture",
          "links": null
        },
        "video_start_ts": {
          "description": "Timestamp that should be shown as static preview to the user (seconds)",
          "links": null
        }
      }
    },
    "inputCheckPasswordEmpty": {
      "name": "inputCheckPasswordEmpty",
      "description": [
        "There is no password"
      ]
    },
    "inputCheckPasswordSRP": {
      "name": "inputCheckPasswordSRP",
      "description": [
        "Constructor for checking the validity of a 2FA SRP password (see SRP¹)"
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ],
      "fields": {
        "A": {
          "description": "A parameter (see SRP¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "M1": {
          "description": "M1 parameter (see SRP¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "srp_id": {
          "description": "SRP ID¹",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        }
      }
    },
    "inputClientProxy": {
      "name": "inputClientProxy",
      "description": [
        "Info about an MTProxy¹ used to connect."
      ],
      "links": [
        "https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation"
      ],
      "fields": {
        "address": {
          "description": "Proxy address",
          "links": null
        },
        "port": {
          "description": "Proxy port",
          "links": null
        }
      }
    },
    "inputDialogPeer": {
      "name": "inputDialogPeer",
      "description": [
        "A peer"
      ],
      "fields": {
        "peer": {
          "description": "Peer",
          "links": null
        }
      }
    },
    "inputDialogPeerFolder": {
      "name": "inputDialogPeerFolder",
      "description": [
        "All peers in a peer folder¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders#peer-folders"
      ],
      "fields": {
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        }
      }
    },
    "inputDocument": {
      "name": "inputDocument",
      "description": [
        "Defines a video for subsequent interaction."
      ],
      "fields": {
        "access_hash": {
          "description": "access_hash parameter from the document¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/document"
          ]
        },
        "file_reference": {
          "description": "File reference¹",
          "links": [
            "https://core.telegram.org/api/file_reference"
          ]
        },
        "id": {
          "description": "Document ID",
          "links": null
        }
      }
    },
    "inputDocumentEmpty": {
      "name": "inputDocumentEmpty",
      "description": [
        "Empty constructor."
      ]
    },
    "inputDocumentFileLocation": {
      "name": "inputDocumentFileLocation",
      "description": [
        "Document location (video, voice, audio, basically every type except photo)"
      ],
      "fields": {
        "access_hash": {
          "description": "access_hash parameter from the document¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/document"
          ]
        },
        "file_reference": {
          "description": "File reference¹",
          "links": [
            "https://core.telegram.org/api/file_reference"
          ]
        },
        "id": {
          "description": "Document ID",
          "links": null
        },
        "thumb_size": {
          "description": "Thumbnail size to download the thumbnail",
          "links": null
        }
      }
    },
    "inputEncryptedChat": {
      "name": "inputEncryptedChat",
      "description": [
        "Creates an encrypted chat."
      ],
      "fields": {
        "access_hash": {
          "description": "Checking sum from constructor encryptedChat¹, encryptedChatWaiting² or encryptedChatRequested³",
          "links": [
            "https://core.telegram.org/constructor/encryptedChat",
            "https://core.telegram.org/constructor/encryptedChatWaiting",
            "https://core.telegram.org/constructor/encryptedChatRequested"
          ]
        },
        "chat_id": {
          "description": "Chat ID",
          "links": null
        }
      }
    },
    "inputEncryptedFile": {
      "name": "inputEncryptedFile",
      "description": [
        "Sets forwarded encrypted file for attachment."
      ],
      "fields": {
        "access_hash": {
          "description": "Checking sum, value of access_hash parameter from encryptedFile¹",
          "links": [
            "https://core.telegram.org/constructor/encryptedFile"
          ]
        },
        "id": {
          "description": "File ID, value of id parameter from encryptedFile¹",
          "links": [
            "https://core.telegram.org/constructor/encryptedFile"
          ]
        }
      }
    },
    "inputEncryptedFileBigUploaded": {
      "name": "inputEncryptedFileBigUploaded",
      "description": [
        "Assigns a new big encrypted file (over 10Mb in size), saved in parts using the method upload.saveBigFilePart¹."
      ],
      "links": [
        "https://core.telegram.org/method/upload.saveBigFilePart"
      ],
      "fields": {
        "id": {
          "description": "Random file id, created by the client",
          "links": null
        },
        "key_fingerprint": {
          "description": "32-bit imprint of the key used to encrypt the file",
          "links": null
        },
        "parts": {
          "description": "Number of saved parts",
          "links": null
        }
      }
    },
    "inputEncryptedFileEmpty": {
      "name": "inputEncryptedFileEmpty",
      "description": [
        "Empty constructor."
      ]
    },
    "inputEncryptedFileLocation": {
      "name": "inputEncryptedFileLocation",
      "description": [
        "Location of encrypted secret chat file."
      ],
      "fields": {
        "access_hash": {
          "description": "Checksum, access_hash parameter value from encryptedFile¹",
          "links": [
            "https://core.telegram.org/constructor/encryptedFile"
          ]
        },
        "id": {
          "description": "File ID, id parameter value from encryptedFile¹",
          "links": [
            "https://core.telegram.org/constructor/encryptedFile"
          ]
        }
      }
    },
    "inputEncryptedFileUploaded": {
      "name": "inputEncryptedFileUploaded",
      "description": [
        "Sets new encrypted file saved by parts using upload.saveFilePart method."
      ],
      "fields": {
        "id": {
          "description": "Random file ID created by clien",
          "links": null
        },
        "key_fingerprint": {
          "description": "32-bit fingerprint of the key used to encrypt a file",
          "links": null
        },
        "md5_checksum": {
          "description": "In case md5-HASH¹ of the (already encrypted) file was transmitted, file content will be checked prior to use",
          "links": [
            "https://en.wikipedia.org/wiki/MD5"
          ]
        },
        "parts": {
          "description": "Number of saved parts",
          "links": null
        }
      }
    },
    "inputFile": {
      "name": "inputFile",
      "description": [
        "Defines a file saved in parts using the method upload.saveFilePart¹."
      ],
      "links": [
        "https://core.telegram.org/method/upload.saveFilePart"
      ],
      "fields": {
        "id": {
          "description": "Random file identifier created by the client",
          "links": null
        },
        "md5_checksum": {
          "description": "In case the file's md5-hash¹ was passed, contents of the file will be checked prior to use",
          "links": [
            "https://en.wikipedia.org/wiki/MD5#MD5_hashes"
          ]
        },
        "name": {
          "description": "Full name of the file",
          "links": null
        },
        "parts": {
          "description": "Number of parts saved",
          "links": null
        }
      }
    },
    "inputFileBig": {
      "name": "inputFileBig",
      "description": [
        "Assigns a big file (over 10Mb in size), saved in part using the method upload.saveBigFilePart¹."
      ],
      "links": [
        "https://core.telegram.org/method/upload.saveBigFilePart"
      ],
      "fields": {
        "id": {
          "description": "Random file id, created by the client",
          "links": null
        },
        "name": {
          "description": "Full file name",
          "links": null
        },
        "parts": {
          "description": "Number of parts saved",
          "links": null
        }
      }
    },
    "inputFileLocation": {
      "name": "inputFileLocation",
      "description": [
        "DEPRECATED location of a photo"
      ],
      "fields": {
        "file_reference": {
          "description": "File reference¹",
          "links": [
            "https://core.telegram.org/api/file_reference"
          ]
        },
        "local_id": {
          "description": "File identifier",
          "links": null
        },
        "secret": {
          "description": "Check sum to access the file",
          "links": null
        },
        "volume_id": {
          "description": "Server volume",
          "links": null
        }
      }
    },
    "inputFolderPeer": {
      "name": "inputFolderPeer",
      "description": [
        "Peer in a folder"
      ],
      "fields": {
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "peer": {
          "description": "Peer",
          "links": null
        }
      }
    },
    "inputGameID": {
      "name": "inputGameID",
      "description": [
        "Indicates an already sent game"
      ],
      "fields": {
        "access_hash": {
          "description": "access hash from Game¹ constructor",
          "links": [
            "https://core.telegram.org/type/Game"
          ]
        },
        "id": {
          "description": "game ID from Game¹ constructor",
          "links": [
            "https://core.telegram.org/type/Game"
          ]
        }
      }
    },
    "inputGameShortName": {
      "name": "inputGameShortName",
      "description": [
        "Game by short name"
      ],
      "fields": {
        "bot_id": {
          "description": "The bot that provides the game",
          "links": null
        },
        "short_name": {
          "description": "The game's short name",
          "links": null
        }
      }
    },
    "inputGeoPoint": {
      "name": "inputGeoPoint",
      "description": [
        "Defines a GeoPoint by its coordinates."
      ],
      "fields": {
        "accuracy_radius": {
          "description": "The estimated horizontal accuracy of the location, in meters; as defined by the sender.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "lat": {
          "description": "Latitide",
          "links": null
        },
        "long": {
          "description": "Longtitude",
          "links": null
        }
      }
    },
    "inputGeoPointEmpty": {
      "name": "inputGeoPointEmpty",
      "description": [
        "Empty GeoPoint constructor."
      ]
    },
    "inputKeyboardButtonUrlAuth": {
      "name": "inputKeyboardButtonUrlAuth",
      "description": [
        "Button to request a user to authorize¹ via URL using Seamless Telegram Login²."
      ],
      "links": [
        "https://core.telegram.org/method/messages.acceptUrlAuth",
        "https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots"
      ],
      "fields": {
        "bot": {
          "description": "Username of a bot, which will be used for user authorization. See Setting up a bot¹ for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot² for more details.",
          "links": [
            "https://core.telegram.org/widgets/login#setting-up-a-bot",
            "https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "fwd_text": {
          "description": "New text of the button in forwarded messages.",
          "links": null
        },
        "request_write_access": {
          "description": "Set this flag to request the permission for your bot to send messages to the user.",
          "links": null
        },
        "text": {
          "description": "Button text",
          "links": null
        },
        "url": {
          "description": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data¹.NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization².",
          "links": [
            "https://core.telegram.org/widgets/login#receiving-authorization-data",
            "https://core.telegram.org/widgets/login#checking-authorization"
          ]
        }
      }
    },
    "inputMediaContact": {
      "name": "inputMediaContact",
      "description": [
        "Phonebook contact"
      ],
      "fields": {
        "first_name": {
          "description": "Contact's first name",
          "links": null
        },
        "last_name": {
          "description": "Contact's last name",
          "links": null
        },
        "phone_number": {
          "description": "Phone number",
          "links": null
        },
        "vcard": {
          "description": "Contact vcard",
          "links": null
        }
      }
    },
    "inputMediaDice": {
      "name": "inputMediaDice",
      "description": [
        "Send a dice-based animated sticker¹"
      ],
      "links": [
        "https://core.telegram.org/api/dice"
      ],
      "fields": {
        "emoticon": {
          "description": "The emoji, for now ,  and  are supported",
          "links": null
        }
      }
    },
    "inputMediaDocument": {
      "name": "inputMediaDocument",
      "description": [
        "Forwarded document"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "The document to be forwarded.",
          "links": null
        },
        "ttl_seconds": {
          "description": "Time to live of self-destructing document",
          "links": null
        }
      }
    },
    "inputMediaDocumentExternal": {
      "name": "inputMediaDocumentExternal",
      "description": [
        "Document that will be downloaded by the telegram servers"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "ttl_seconds": {
          "description": "Self-destruct time to live of document",
          "links": null
        },
        "url": {
          "description": "URL of the document",
          "links": null
        }
      }
    },
    "inputMediaEmpty": {
      "name": "inputMediaEmpty",
      "description": [
        "Empty media content of a message."
      ]
    },
    "inputMediaGame": {
      "name": "inputMediaGame",
      "description": [
        "A game"
      ],
      "fields": {
        "id": {
          "description": "The game to forward",
          "links": null
        }
      }
    },
    "inputMediaGeoLive": {
      "name": "inputMediaGeoLive",
      "description": [
        "Live geolocation¹"
      ],
      "links": [
        "https://core.telegram.org/api/live-location"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo_point": {
          "description": "Current geolocation",
          "links": null
        },
        "heading": {
          "description": "For live locations¹, a direction in which the location moves, in degrees; 1-360.",
          "links": [
            "https://core.telegram.org/api/live-location"
          ]
        },
        "period": {
          "description": "Validity period of the current location",
          "links": null
        },
        "proximity_notification_radius": {
          "description": "For live locations¹, a maximum distance to another chat member for proximity alerts, in meters (0-100000)",
          "links": [
            "https://core.telegram.org/api/live-location"
          ]
        },
        "stopped": {
          "description": "Whether sending of the geolocation was stopped",
          "links": null
        }
      }
    },
    "inputMediaGeoPoint": {
      "name": "inputMediaGeoPoint",
      "description": [
        "Map."
      ],
      "fields": {
        "geo_point": {
          "description": "GeoPoint",
          "links": null
        }
      }
    },
    "inputMediaInvoice": {
      "name": "inputMediaInvoice",
      "description": [
        "Generated invoice of a bot payment¹"
      ],
      "links": [
        "https://core.telegram.org/bots/payments"
      ],
      "fields": {
        "description": {
          "description": "Product description, 1-255 characters",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "invoice": {
          "description": "The actual invoice",
          "links": null
        },
        "payload": {
          "description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.",
          "links": null
        },
        "photo": {
          "description": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.",
          "links": null
        },
        "provider": {
          "description": "Payments provider token, obtained via Botfather¹",
          "links": [
            "https://t.me/botfather"
          ]
        },
        "provider_data": {
          "description": "JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.",
          "links": null
        },
        "start_param": {
          "description": "Start parameter",
          "links": null
        },
        "title": {
          "description": "Product name, 1-32 characters",
          "links": null
        }
      }
    },
    "inputMediaPhoto": {
      "name": "inputMediaPhoto",
      "description": [
        "Forwarded photo"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Photo to be forwarded",
          "links": null
        },
        "ttl_seconds": {
          "description": "Time to live in seconds of self-destructing photo",
          "links": null
        }
      }
    },
    "inputMediaPhotoExternal": {
      "name": "inputMediaPhotoExternal",
      "description": [
        "New photo that will be uploaded by the server using the specified URL"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "ttl_seconds": {
          "description": "Self-destruct time to live of photo",
          "links": null
        },
        "url": {
          "description": "URL of the photo",
          "links": null
        }
      }
    },
    "inputMediaPoll": {
      "name": "inputMediaPoll",
      "description": [
        "A poll"
      ],
      "fields": {
        "correct_answers": {
          "description": "Correct answer IDs (for quiz polls)",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "poll": {
          "description": "The poll to send",
          "links": null
        },
        "solution": {
          "description": "Explanation of quiz solution",
          "links": null
        },
        "solution_entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        }
      }
    },
    "inputMediaUploadedDocument": {
      "name": "inputMediaUploadedDocument",
      "description": [
        "New document"
      ],
      "fields": {
        "attributes": {
          "description": "Attributes that specify the type of the document (video, audio, voice, sticker, etc.)",
          "links": null
        },
        "file": {
          "description": "The uploaded file¹",
          "links": [
            "https://core.telegram.org/api/files"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "force_file": {
          "description": "Force the media file to be uploaded as document",
          "links": null
        },
        "mime_type": {
          "description": "MIME type of document",
          "links": null
        },
        "nosound_video": {
          "description": "Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example)",
          "links": null
        },
        "stickers": {
          "description": "Attached stickers",
          "links": null
        },
        "thumb": {
          "description": "Thumbnail of the document, uploaded as for the file",
          "links": null
        },
        "ttl_seconds": {
          "description": "Time to live in seconds of self-destructing document",
          "links": null
        }
      }
    },
    "inputMediaUploadedPhoto": {
      "name": "inputMediaUploadedPhoto",
      "description": [
        "Photo"
      ],
      "fields": {
        "file": {
          "description": "The uploaded file¹",
          "links": [
            "https://core.telegram.org/api/files"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "stickers": {
          "description": "Attached mask stickers",
          "links": null
        },
        "ttl_seconds": {
          "description": "Time to live in seconds of self-destructing photo",
          "links": null
        }
      }
    },
    "inputMediaVenue": {
      "name": "inputMediaVenue",
      "description": [
        "Can be used to send a venue geolocation."
      ],
      "fields": {
        "address": {
          "description": "Physical address of the venue",
          "links": null
        },
        "geo_point": {
          "description": "Geolocation",
          "links": null
        },
        "provider": {
          "description": "Venue provider: currently only \"foursquare\" needs to be supported",
          "links": null
        },
        "title": {
          "description": "Venue name",
          "links": null
        },
        "venue_id": {
          "description": "Venue ID in the provider's database",
          "links": null
        },
        "venue_type": {
          "description": "Venue type in the provider's database",
          "links": null
        }
      }
    },
    "inputMessageCallbackQuery": {
      "name": "inputMessageCallbackQuery",
      "description": [
        "Used by bots for fetching information about the message that originated a callback query"
      ],
      "fields": {
        "id": {
          "description": "Message ID",
          "links": null
        },
        "query_id": {
          "description": "Callback query ID",
          "links": null
        }
      }
    },
    "inputMessageEntityMentionName": {
      "name": "inputMessageEntityMentionName",
      "description": [
        "Message entity that can be used to create a user user mention¹: received mentions use the messageEntityMentionName² constructor, instead."
      ],
      "links": [
        "https://core.telegram.org/api/mentions",
        "https://core.telegram.org/constructor/messageEntityMentionName"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "user_id": {
          "description": "Identifier of the user that was mentioned",
          "links": null
        }
      }
    },
    "inputMessageID": {
      "name": "inputMessageID",
      "description": [
        "Message by ID"
      ],
      "fields": {
        "id": {
          "description": "Message ID",
          "links": null
        }
      }
    },
    "inputMessagePinned": {
      "name": "inputMessagePinned",
      "description": [
        "Pinned message"
      ]
    },
    "inputMessageReplyTo": {
      "name": "inputMessageReplyTo",
      "description": [
        "Message to which the specified message replies to"
      ],
      "fields": {
        "id": {
          "description": "ID of the message that replies to the message we need",
          "links": null
        }
      }
    },
    "inputMessagesFilterChatPhotos": {
      "name": "inputMessagesFilterChatPhotos",
      "description": [
        "Return only chat photo changes"
      ]
    },
    "inputMessagesFilterContacts": {
      "name": "inputMessagesFilterContacts",
      "description": [
        "Return only messages containing contacts"
      ]
    },
    "inputMessagesFilterDocument": {
      "name": "inputMessagesFilterDocument",
      "description": [
        "Filter for messages containing documents."
      ]
    },
    "inputMessagesFilterEmpty": {
      "name": "inputMessagesFilterEmpty",
      "description": [
        "Filter is absent."
      ]
    },
    "inputMessagesFilterGeo": {
      "name": "inputMessagesFilterGeo",
      "description": [
        "Return only messages containing geolocations"
      ]
    },
    "inputMessagesFilterGif": {
      "name": "inputMessagesFilterGif",
      "description": [
        "Return only messages containing gifs"
      ]
    },
    "inputMessagesFilterMusic": {
      "name": "inputMessagesFilterMusic",
      "description": [
        "Return only messages containing audio files"
      ]
    },
    "inputMessagesFilterMyMentions": {
      "name": "inputMessagesFilterMyMentions",
      "description": [
        "Return only messages where the current user was mentioned¹."
      ],
      "links": [
        "https://core.telegram.org/api/mentions"
      ]
    },
    "inputMessagesFilterPhoneCalls": {
      "name": "inputMessagesFilterPhoneCalls",
      "description": [
        "Return only phone calls"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "missed": {
          "description": "Return only missed phone calls",
          "links": null
        }
      }
    },
    "inputMessagesFilterPhotoVideo": {
      "name": "inputMessagesFilterPhotoVideo",
      "description": [
        "Filter for messages containing photos or videos."
      ]
    },
    "inputMessagesFilterPhotos": {
      "name": "inputMessagesFilterPhotos",
      "description": [
        "Filter for messages containing photos."
      ]
    },
    "inputMessagesFilterPinned": {
      "name": "inputMessagesFilterPinned",
      "description": [
        "Fetch only pinned messages"
      ]
    },
    "inputMessagesFilterRoundVideo": {
      "name": "inputMessagesFilterRoundVideo",
      "description": [
        "Return only round videos"
      ]
    },
    "inputMessagesFilterRoundVoice": {
      "name": "inputMessagesFilterRoundVoice",
      "description": [
        "Return only round videos and voice notes"
      ]
    },
    "inputMessagesFilterUrl": {
      "name": "inputMessagesFilterUrl",
      "description": [
        "Return only messages containing URLs"
      ]
    },
    "inputMessagesFilterVideo": {
      "name": "inputMessagesFilterVideo",
      "description": [
        "Filter for messages containing videos."
      ]
    },
    "inputMessagesFilterVoice": {
      "name": "inputMessagesFilterVoice",
      "description": [
        "Return only messages containing voice notes"
      ]
    },
    "inputNotifyBroadcasts": {
      "name": "inputNotifyBroadcasts",
      "description": [
        "All channels¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ]
    },
    "inputNotifyChats": {
      "name": "inputNotifyChats",
      "description": [
        "Notifications generated by all groups."
      ]
    },
    "inputNotifyPeer": {
      "name": "inputNotifyPeer",
      "description": [
        "Notifications generated by a certain user or group."
      ],
      "fields": {
        "peer": {
          "description": "User or group",
          "links": null
        }
      }
    },
    "inputNotifyUsers": {
      "name": "inputNotifyUsers",
      "description": [
        "Notifications generated by all users."
      ]
    },
    "inputPaymentCredentials": {
      "name": "inputPaymentCredentials",
      "description": [
        "Payment credentials"
      ],
      "fields": {
        "data": {
          "description": "Payment credentials",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "save": {
          "description": "Save payment credential for future use",
          "links": null
        }
      }
    },
    "inputPaymentCredentialsAndroidPay": {
      "name": "inputPaymentCredentialsAndroidPay",
      "description": [
        "Android pay payment credentials"
      ],
      "fields": {
        "google_transaction_id": {
          "description": "Google transaction ID",
          "links": null
        },
        "payment_token": {
          "description": "Android pay payment token",
          "links": null
        }
      }
    },
    "inputPaymentCredentialsApplePay": {
      "name": "inputPaymentCredentialsApplePay",
      "description": [
        "Apple pay payment credentials"
      ],
      "fields": {
        "payment_data": {
          "description": "Payment data",
          "links": null
        }
      }
    },
    "inputPaymentCredentialsSaved": {
      "name": "inputPaymentCredentialsSaved",
      "description": [
        "Saved payment credentials"
      ],
      "fields": {
        "id": {
          "description": "Credential ID",
          "links": null
        },
        "tmp_password": {
          "description": "Temporary password",
          "links": null
        }
      }
    },
    "inputPeerChannel": {
      "name": "inputPeerChannel",
      "description": [
        "Defines a channel for further interaction."
      ],
      "fields": {
        "access_hash": {
          "description": "access_hash value from the channel¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/channel"
          ]
        },
        "channel_id": {
          "description": "Channel identifier",
          "links": null
        }
      }
    },
    "inputPeerChannelFromMessage": {
      "name": "inputPeerChannelFromMessage",
      "description": [
        "Defines a min¹ channel that was seen in a certain message of a certain chat."
      ],
      "links": [
        "https://core.telegram.org/api/min"
      ],
      "fields": {
        "channel_id": {
          "description": "The identifier of the channel that was seen",
          "links": null
        },
        "msg_id": {
          "description": "The message ID",
          "links": null
        },
        "peer": {
          "description": "The chat where the channel's message was seen",
          "links": null
        }
      }
    },
    "inputPeerChat": {
      "name": "inputPeerChat",
      "description": [
        "Defines a chat for further interaction."
      ],
      "fields": {
        "chat_id": {
          "description": "Chat idientifier",
          "links": null
        }
      }
    },
    "inputPeerEmpty": {
      "name": "inputPeerEmpty",
      "description": [
        "An empty constructor, no user or chat is defined."
      ]
    },
    "inputPeerNotifySettings": {
      "name": "inputPeerNotifySettings",
      "description": [
        "Notification settings."
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "mute_until": {
          "description": "Date until which all notifications shall be switched off",
          "links": null
        },
        "show_previews": {
          "description": "If the text of the message shall be displayed in notification",
          "links": null
        },
        "silent": {
          "description": "Peer was muted?",
          "links": null
        },
        "sound": {
          "description": "Name of an audio file for notification",
          "links": null
        }
      }
    },
    "inputPeerPhotoFileLocation": {
      "name": "inputPeerPhotoFileLocation",
      "description": [
        "Location of profile photo of channel/group/supergroup/user"
      ],
      "fields": {
        "big": {
          "description": "Whether to download the high-quality version of the picture",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "local_id": {
          "description": "Local ID from FileLocation¹ met in the profile photo container.",
          "links": [
            "https://core.telegram.org/type/FileLocation"
          ]
        },
        "peer": {
          "description": "The peer whose profile picture should be downloaded",
          "links": null
        },
        "volume_id": {
          "description": "Volume ID from FileLocation¹ met in the profile photo container.",
          "links": [
            "https://core.telegram.org/type/FileLocation"
          ]
        }
      }
    },
    "inputPeerSelf": {
      "name": "inputPeerSelf",
      "description": [
        "Defines the current user."
      ]
    },
    "inputPeerUser": {
      "name": "inputPeerUser",
      "description": [
        "Defines a user for further interaction."
      ],
      "fields": {
        "access_hash": {
          "description": "access_hash value from the user¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/user"
          ]
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      }
    },
    "inputPeerUserFromMessage": {
      "name": "inputPeerUserFromMessage",
      "description": [
        "Defines a min¹ user that was seen in a certain message of a certain chat."
      ],
      "links": [
        "https://core.telegram.org/api/min"
      ],
      "fields": {
        "msg_id": {
          "description": "The message ID",
          "links": null
        },
        "peer": {
          "description": "The chat where the user was seen",
          "links": null
        },
        "user_id": {
          "description": "The identifier of the user that was seen",
          "links": null
        }
      }
    },
    "inputPhoneCall": {
      "name": "inputPhoneCall",
      "description": [
        "Phone call"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "id": {
          "description": "Call ID",
          "links": null
        }
      }
    },
    "inputPhoneContact": {
      "name": "inputPhoneContact",
      "description": [
        "Phone contact. The client_id is just an arbitrary contact ID: it should be set, for example, to an incremental number when using contacts.importContacts¹, in order to retry importing only the contacts that weren't imported successfully."
      ],
      "links": [
        "https://core.telegram.org/method/contacts.importContacts"
      ],
      "fields": {
        "client_id": {
          "description": "User identifier on the client",
          "links": null
        },
        "first_name": {
          "description": "Contact's first name",
          "links": null
        },
        "last_name": {
          "description": "Contact's last name",
          "links": null
        },
        "phone": {
          "description": "Phone number",
          "links": null
        }
      }
    },
    "inputPhoto": {
      "name": "inputPhoto",
      "description": [
        "Defines a photo for further interaction."
      ],
      "fields": {
        "access_hash": {
          "description": "access_hash value from the photo¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/photo"
          ]
        },
        "file_reference": {
          "description": "File reference¹",
          "links": [
            "https://core.telegram.org/api/file_reference"
          ]
        },
        "id": {
          "description": "Photo identifier",
          "links": null
        }
      }
    },
    "inputPhotoEmpty": {
      "name": "inputPhotoEmpty",
      "description": [
        "Empty constructor."
      ]
    },
    "inputPhotoFileLocation": {
      "name": "inputPhotoFileLocation",
      "description": [
        "Use this object to download a photo with upload.getFile¹ method"
      ],
      "links": [
        "https://core.telegram.org/method/upload.getFile"
      ],
      "fields": {
        "access_hash": {
          "description": "Photo's access hash, obtained from the photo¹ object",
          "links": [
            "https://core.telegram.org/constructor/photo"
          ]
        },
        "file_reference": {
          "description": "File reference¹",
          "links": [
            "https://core.telegram.org/api/file_reference"
          ]
        },
        "id": {
          "description": "Photo ID, obtained from the photo¹ object",
          "links": [
            "https://core.telegram.org/constructor/photo"
          ]
        },
        "thumb_size": {
          "description": "The PhotoSize¹ to download: must be set to the type field of the desired PhotoSize object of the photo²",
          "links": [
            "https://core.telegram.org/type/PhotoSize",
            "https://core.telegram.org/constructor/photo"
          ]
        }
      }
    },
    "inputPhotoLegacyFileLocation": {
      "name": "inputPhotoLegacyFileLocation",
      "description": [
        "Legacy photo file location"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "file_reference": {
          "description": "File reference",
          "links": null
        },
        "id": {
          "description": "Photo ID",
          "links": null
        },
        "local_id": {
          "description": "Local ID",
          "links": null
        },
        "secret": {
          "description": "Secret",
          "links": null
        },
        "volume_id": {
          "description": "Volume ID",
          "links": null
        }
      }
    },
    "inputPrivacyKeyAddedByPhone": {
      "name": "inputPrivacyKeyAddedByPhone",
      "description": [
        "Whether people can add you to their contact list by your phone number"
      ]
    },
    "inputPrivacyKeyChatInvite": {
      "name": "inputPrivacyKeyChatInvite",
      "description": [
        "Whether the user can be invited to chats"
      ]
    },
    "inputPrivacyKeyForwards": {
      "name": "inputPrivacyKeyForwards",
      "description": [
        "Whether messages forwarded from this user will be anonymous¹"
      ],
      "links": [
        "https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding"
      ]
    },
    "inputPrivacyKeyPhoneCall": {
      "name": "inputPrivacyKeyPhoneCall",
      "description": [
        "Whether the user will accept phone calls"
      ]
    },
    "inputPrivacyKeyPhoneNumber": {
      "name": "inputPrivacyKeyPhoneNumber",
      "description": [
        "Whether people will be able to see the user's phone number"
      ]
    },
    "inputPrivacyKeyPhoneP2P": {
      "name": "inputPrivacyKeyPhoneP2P",
      "description": [
        "Whether the user allows P2P communication during VoIP calls"
      ]
    },
    "inputPrivacyKeyProfilePhoto": {
      "name": "inputPrivacyKeyProfilePhoto",
      "description": [
        "Whether people will be able to see the user's profile picture"
      ]
    },
    "inputPrivacyKeyStatusTimestamp": {
      "name": "inputPrivacyKeyStatusTimestamp",
      "description": [
        "Whether we can see the exact last online timestamp of the user"
      ]
    },
    "inputPrivacyValueAllowAll": {
      "name": "inputPrivacyValueAllowAll",
      "description": [
        "Allow all users"
      ]
    },
    "inputPrivacyValueAllowChatParticipants": {
      "name": "inputPrivacyValueAllowChatParticipants",
      "description": [
        "Allow only participants of certain chats"
      ],
      "fields": {
        "chats": {
          "description": "Allowed chat IDs",
          "links": null
        }
      }
    },
    "inputPrivacyValueAllowContacts": {
      "name": "inputPrivacyValueAllowContacts",
      "description": [
        "Allow only contacts"
      ]
    },
    "inputPrivacyValueAllowUsers": {
      "name": "inputPrivacyValueAllowUsers",
      "description": [
        "Allow only certain users"
      ],
      "fields": {
        "users": {
          "description": "Allowed users",
          "links": null
        }
      }
    },
    "inputPrivacyValueDisallowAll": {
      "name": "inputPrivacyValueDisallowAll",
      "description": [
        "Disallow all"
      ]
    },
    "inputPrivacyValueDisallowChatParticipants": {
      "name": "inputPrivacyValueDisallowChatParticipants",
      "description": [
        "Disallow only participants of certain chats"
      ],
      "fields": {
        "chats": {
          "description": "Disallowed chat IDs",
          "links": null
        }
      }
    },
    "inputPrivacyValueDisallowContacts": {
      "name": "inputPrivacyValueDisallowContacts",
      "description": [
        "Disallow only contacts"
      ]
    },
    "inputPrivacyValueDisallowUsers": {
      "name": "inputPrivacyValueDisallowUsers",
      "description": [
        "Disallow only certain users"
      ],
      "fields": {
        "users": {
          "description": "Users to disallow",
          "links": null
        }
      }
    },
    "inputReportReasonChildAbuse": {
      "name": "inputReportReasonChildAbuse",
      "description": [
        "Report for child abuse"
      ]
    },
    "inputReportReasonCopyright": {
      "name": "inputReportReasonCopyright",
      "description": [
        "Report for copyrighted content"
      ]
    },
    "inputReportReasonGeoIrrelevant": {
      "name": "inputReportReasonGeoIrrelevant",
      "description": [
        "Report an irrelevant geogroup"
      ]
    },
    "inputReportReasonOther": {
      "name": "inputReportReasonOther",
      "description": [
        "Other"
      ],
      "fields": {
        "text": {
          "description": "Other report reason",
          "links": null
        }
      }
    },
    "inputReportReasonPornography": {
      "name": "inputReportReasonPornography",
      "description": [
        "Report for pornography"
      ]
    },
    "inputReportReasonSpam": {
      "name": "inputReportReasonSpam",
      "description": [
        "Report for spam"
      ]
    },
    "inputReportReasonViolence": {
      "name": "inputReportReasonViolence",
      "description": [
        "Report for violence"
      ]
    },
    "inputSecureFile": {
      "name": "inputSecureFile",
      "description": [
        "Preuploaded passport¹ file, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#inputsecurefile"
      ],
      "fields": {
        "access_hash": {
          "description": "Secure file access hash",
          "links": null
        },
        "id": {
          "description": "Secure file ID",
          "links": null
        }
      }
    },
    "inputSecureFileLocation": {
      "name": "inputSecureFileLocation",
      "description": [
        "Location of encrypted telegram passport¹ file."
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "fields": {
        "access_hash": {
          "description": "Checksum, access_hash parameter value from secureFile¹",
          "links": [
            "https://core.telegram.org/constructor/secureFile"
          ]
        },
        "id": {
          "description": "File ID, id parameter value from secureFile¹",
          "links": [
            "https://core.telegram.org/constructor/secureFile"
          ]
        }
      }
    },
    "inputSecureFileUploaded": {
      "name": "inputSecureFileUploaded",
      "description": [
        "Uploaded secure file, for more info see the passport docs »¹"
      ],
      "links": [
        "https://core.telegram.org/passport/encryption#inputsecurefile"
      ],
      "fields": {
        "file_hash": {
          "description": "File hash",
          "links": null
        },
        "id": {
          "description": "Secure file ID",
          "links": null
        },
        "md5_checksum": {
          "description": "MD5 hash of encrypted uploaded file, to be checked server-side",
          "links": null
        },
        "parts": {
          "description": "Secure file part count",
          "links": null
        },
        "secret": {
          "description": "Secret",
          "links": null
        }
      }
    },
    "inputSecureValue": {
      "name": "inputSecureValue",
      "description": [
        "Secure value, for more info see the passport docs »¹"
      ],
      "links": [
        "https://core.telegram.org/passport/encryption#encryption"
      ],
      "fields": {
        "data": {
          "description": "Encrypted Telegram Passport¹ element data",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "files": {
          "description": "Array of encrypted passport¹ files with photos the of the documents",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "front_side": {
          "description": "Encrypted passport¹ file with the front side of the document",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "plain_data": {
          "description": "Plaintext verified passport¹ data",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "reverse_side": {
          "description": "Encrypted passport¹ file with the reverse side of the document",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "selfie": {
          "description": "Encrypted passport¹ file with a selfie of the user holding the document",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "translation": {
          "description": "Array of encrypted passport¹ files with translated versions of the provided documents",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "type": {
          "description": "Secure passport¹ value type",
          "links": [
            "https://core.telegram.org/passport"
          ]
        }
      }
    },
    "inputSingleMedia": {
      "name": "inputSingleMedia",
      "description": [
        "A single media in an album or grouped media¹ sent with messages.sendMultiMedia²."
      ],
      "links": [
        "https://core.telegram.org/api/files#albums-grouped-media",
        "https://core.telegram.org/method/messages.sendMultiMedia"
      ],
      "fields": {
        "entities": {
          "description": "Message entities¹ for styled text",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "media": {
          "description": "The media",
          "links": null
        },
        "message": {
          "description": "A caption for the media",
          "links": null
        },
        "random_id": {
          "description": "Unique client media ID required to prevent message resending",
          "links": null
        }
      }
    },
    "inputStickerSetAnimatedEmoji": {
      "name": "inputStickerSetAnimatedEmoji",
      "description": [
        "Animated emojis stickerset"
      ]
    },
    "inputStickerSetDice": {
      "name": "inputStickerSetDice",
      "description": [
        "Used for fetching animated dice stickers¹"
      ],
      "links": [
        "https://core.telegram.org/api/dice"
      ],
      "fields": {
        "emoticon": {
          "description": "The emoji, for now ,  and  are supported",
          "links": null
        }
      }
    },
    "inputStickerSetEmpty": {
      "name": "inputStickerSetEmpty",
      "description": [
        "Empty constructor"
      ]
    },
    "inputStickerSetID": {
      "name": "inputStickerSetID",
      "description": [
        "Stickerset by ID"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "id": {
          "description": "ID",
          "links": null
        }
      }
    },
    "inputStickerSetItem": {
      "name": "inputStickerSetItem",
      "description": [
        "Sticker in a stickerset"
      ],
      "fields": {
        "document": {
          "description": "The sticker",
          "links": null
        },
        "emoji": {
          "description": "Associated emoji",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "mask_coords": {
          "description": "Coordinates for mask sticker",
          "links": null
        }
      }
    },
    "inputStickerSetShortName": {
      "name": "inputStickerSetShortName",
      "description": [
        "Stickerset by short name, from tg://addstickers?set=short_name"
      ],
      "fields": {
        "short_name": {
          "description": "From tg://addstickers?set=short_name",
          "links": null
        }
      }
    },
    "inputStickerSetThumb": {
      "name": "inputStickerSetThumb",
      "description": [
        "Location of stickerset thumbnail (see files¹)"
      ],
      "links": [
        "https://core.telegram.org/api/files"
      ],
      "fields": {
        "local_id": {
          "description": "Local ID",
          "links": null
        },
        "stickerset": {
          "description": "Sticker set",
          "links": null
        },
        "volume_id": {
          "description": "Volume ID",
          "links": null
        }
      }
    },
    "inputStickeredMediaDocument": {
      "name": "inputStickeredMediaDocument",
      "description": [
        "A document with stickers attached"
      ],
      "fields": {
        "id": {
          "description": "The document",
          "links": null
        }
      }
    },
    "inputStickeredMediaPhoto": {
      "name": "inputStickeredMediaPhoto",
      "description": [
        "A photo with stickers attached"
      ],
      "fields": {
        "id": {
          "description": "The photo",
          "links": null
        }
      }
    },
    "inputTakeoutFileLocation": {
      "name": "inputTakeoutFileLocation",
      "description": [
        "Empty constructor for takeout"
      ]
    },
    "inputTheme": {
      "name": "inputTheme",
      "description": [
        "Theme"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "id": {
          "description": "ID",
          "links": null
        }
      }
    },
    "inputThemeSettings": {
      "name": "inputThemeSettings",
      "description": [
        "Theme settings"
      ],
      "fields": {
        "accent_color": {
          "description": "Accent color, RGB24 format",
          "links": null
        },
        "base_theme": {
          "description": "Default theme on which this theme is based",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message_bottom_color": {
          "description": "Message gradient color (bottom), RGB24 format",
          "links": null
        },
        "message_top_color": {
          "description": "Message gradient color (top), RGB24 format",
          "links": null
        },
        "wallpaper": {
          "description": "Wallpaper",
          "links": null
        },
        "wallpaper_settings": {
          "description": "Wallpaper settings",
          "links": null
        }
      }
    },
    "inputThemeSlug": {
      "name": "inputThemeSlug",
      "description": [
        "Theme by theme ID"
      ],
      "fields": {
        "slug": {
          "description": "Unique theme ID",
          "links": null
        }
      }
    },
    "inputUser": {
      "name": "inputUser",
      "description": [
        "Defines a user for further interaction."
      ],
      "fields": {
        "access_hash": {
          "description": "access_hash value from the user¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/user"
          ]
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      }
    },
    "inputUserEmpty": {
      "name": "inputUserEmpty",
      "description": [
        "Empty constructor, does not define a user."
      ]
    },
    "inputUserFromMessage": {
      "name": "inputUserFromMessage",
      "description": [
        "Defines a min¹ user that was seen in a certain message of a certain chat."
      ],
      "links": [
        "https://core.telegram.org/api/min"
      ],
      "fields": {
        "msg_id": {
          "description": "The message ID",
          "links": null
        },
        "peer": {
          "description": "The chat where the user was seen",
          "links": null
        },
        "user_id": {
          "description": "The identifier of the user that was seen",
          "links": null
        }
      }
    },
    "inputUserSelf": {
      "name": "inputUserSelf",
      "description": [
        "Defines the current user."
      ]
    },
    "inputWallPaper": {
      "name": "inputWallPaper",
      "description": [
        "Wallpaper"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "id": {
          "description": "Wallpaper ID",
          "links": null
        }
      }
    },
    "inputWallPaperNoFile": {
      "name": "inputWallPaperNoFile",
      "description": [
        "Wallpaper with no file"
      ]
    },
    "inputWallPaperSlug": {
      "name": "inputWallPaperSlug",
      "description": [
        "Wallpaper by slug (a unique ID)"
      ],
      "fields": {
        "slug": {
          "description": "Unique wallpaper ID",
          "links": null
        }
      }
    },
    "inputWebDocument": {
      "name": "inputWebDocument",
      "description": [
        "The document"
      ],
      "fields": {
        "attributes": {
          "description": "Attributes for media types",
          "links": null
        },
        "mime_type": {
          "description": "Mime type",
          "links": null
        },
        "size": {
          "description": "Remote file size",
          "links": null
        },
        "url": {
          "description": "Remote document URL to be downloaded using the appropriate method¹",
          "links": [
            "https://core.telegram.org/api/files"
          ]
        }
      }
    },
    "inputWebFileGeoPointLocation": {
      "name": "inputWebFileGeoPointLocation",
      "description": [
        "Geolocation"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "geo_point": {
          "description": "Geolocation",
          "links": null
        },
        "h": {
          "description": "Map height in pixels before applying scale; 16-1024",
          "links": null
        },
        "scale": {
          "description": "Map scale; 1-3",
          "links": null
        },
        "w": {
          "description": "Map width in pixels before applying scale; 16-1024",
          "links": null
        },
        "zoom": {
          "description": "Map zoom level; 13-20",
          "links": null
        }
      }
    },
    "inputWebFileLocation": {
      "name": "inputWebFileLocation",
      "description": [
        "Location of a remote HTTP(s) file"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "url": {
          "description": "HTTP URL of file",
          "links": null
        }
      }
    },
    "invoice": {
      "name": "invoice",
      "description": [
        "Invoice"
      ],
      "fields": {
        "currency": {
          "description": "Three-letter ISO 4217 currency¹ code",
          "links": [
            "https://core.telegram.org/bots/payments#supported-currencies"
          ]
        },
        "email_requested": {
          "description": "Set this flag if you require the user's email address to complete the order",
          "links": null
        },
        "email_to_provider": {
          "description": "Set this flag if user's email address should be sent to provider",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "flexible": {
          "description": "Set this flag if the final price depends on the shipping method",
          "links": null
        },
        "name_requested": {
          "description": "Set this flag if you require the user's full name to complete the order",
          "links": null
        },
        "phone_requested": {
          "description": "Set this flag if you require the user's phone number to complete the order",
          "links": null
        },
        "phone_to_provider": {
          "description": "Set this flag if user's phone number should be sent to provider",
          "links": null
        },
        "prices": {
          "description": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)",
          "links": null
        },
        "shipping_address_requested": {
          "description": "Set this flag if you require the user's shipping address to complete the order",
          "links": null
        },
        "test": {
          "description": "Test invoice",
          "links": null
        }
      }
    },
    "jsonArray": {
      "name": "jsonArray",
      "description": [
        "JSON array"
      ],
      "fields": {
        "value": {
          "description": "JSON values",
          "links": null
        }
      }
    },
    "jsonBool": {
      "name": "jsonBool",
      "description": [
        "JSON boolean value"
      ],
      "fields": {
        "value": {
          "description": "Value",
          "links": null
        }
      }
    },
    "jsonNull": {
      "name": "jsonNull",
      "description": [
        "null JSON value"
      ]
    },
    "jsonNumber": {
      "name": "jsonNumber",
      "description": [
        "JSON numeric value"
      ],
      "fields": {
        "value": {
          "description": "Value",
          "links": null
        }
      }
    },
    "jsonObject": {
      "name": "jsonObject",
      "description": [
        "JSON object value"
      ],
      "fields": {
        "value": {
          "description": "Values",
          "links": null
        }
      }
    },
    "jsonObjectValue": {
      "name": "jsonObjectValue",
      "description": [
        "JSON key: value pair"
      ],
      "fields": {
        "key": {
          "description": "Key",
          "links": null
        },
        "value": {
          "description": "Value",
          "links": null
        }
      }
    },
    "jsonString": {
      "name": "jsonString",
      "description": [
        "JSON string"
      ],
      "fields": {
        "value": {
          "description": "Value",
          "links": null
        }
      }
    },
    "keyboardButton": {
      "name": "keyboardButton",
      "description": [
        "Bot keyboard button"
      ],
      "fields": {
        "text": {
          "description": "Button text",
          "links": null
        }
      }
    },
    "keyboardButtonBuy": {
      "name": "keyboardButtonBuy",
      "description": [
        "Button to buy a product"
      ],
      "fields": {
        "text": {
          "description": "Button text",
          "links": null
        }
      }
    },
    "keyboardButtonCallback": {
      "name": "keyboardButtonCallback",
      "description": [
        "Callback button"
      ],
      "fields": {
        "data": {
          "description": "Callback data",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "requires_password": {
          "description": "Whether the user should verify his identity by entering his 2FA SRP parameters¹ to the messages.getBotCallbackAnswer² method. NOTE: telegram and the bot WILL NOT have access to the plaintext password, thanks to SRP³. This button is mainly used by the official @botfather⁴ bot, for verifying the user's identity before transferring ownership of a bot to another user.",
          "links": [
            "https://core.telegram.org/api/srp",
            "https://core.telegram.org/method/messages.getBotCallbackAnswer",
            "https://core.telegram.org/api/srp",
            "https://t.me/botfather"
          ]
        },
        "text": {
          "description": "Button text",
          "links": null
        }
      }
    },
    "keyboardButtonGame": {
      "name": "keyboardButtonGame",
      "description": [
        "Button to start a game"
      ],
      "fields": {
        "text": {
          "description": "Button text",
          "links": null
        }
      }
    },
    "keyboardButtonRequestGeoLocation": {
      "name": "keyboardButtonRequestGeoLocation",
      "description": [
        "Button to request a user's geolocation"
      ],
      "fields": {
        "text": {
          "description": "Button text",
          "links": null
        }
      }
    },
    "keyboardButtonRequestPhone": {
      "name": "keyboardButtonRequestPhone",
      "description": [
        "Button to request a user's phone number"
      ],
      "fields": {
        "text": {
          "description": "Button text",
          "links": null
        }
      }
    },
    "keyboardButtonRequestPoll": {
      "name": "keyboardButtonRequestPoll",
      "description": [
        "A button that allows the user to create and send a poll when pressed; available only in private"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "quiz": {
          "description": "If set, only quiz polls can be sent",
          "links": null
        },
        "text": {
          "description": "Button text",
          "links": null
        }
      }
    },
    "keyboardButtonRow": {
      "name": "keyboardButtonRow",
      "description": [
        "Inline keyboard row"
      ],
      "fields": {
        "buttons": {
          "description": "Bot or inline keyboard buttons",
          "links": null
        }
      }
    },
    "keyboardButtonSwitchInline": {
      "name": "keyboardButtonSwitchInline",
      "description": [
        "Button to force a user to switch to inline mode Pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field."
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "query": {
          "description": "The inline query to use",
          "links": null
        },
        "same_peer": {
          "description": "If set, pressing the button will insert the bot‘s username and the specified inline query in the current chat's input field.",
          "links": null
        },
        "text": {
          "description": "Button label",
          "links": null
        }
      }
    },
    "keyboardButtonUrl": {
      "name": "keyboardButtonUrl",
      "description": [
        "URL button"
      ],
      "fields": {
        "text": {
          "description": "Button label",
          "links": null
        },
        "url": {
          "description": "URL",
          "links": null
        }
      }
    },
    "keyboardButtonUrlAuth": {
      "name": "keyboardButtonUrlAuth",
      "description": [
        "Button to request a user to authorize via URL using Seamless Telegram Login¹. When the user clicks on such a button, messages.requestUrlAuth² should be called, providing the button_id and the ID of the container message. The returned urlAuthResultRequest³ object will contain more details about the authorization request (request_write_access if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call messages.acceptUrlAuth⁴ to get a urlAuthResultAccepted⁵ with the URL to open instead of the url of this constructor, or a urlAuthResultDefault⁶, in which case the url of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the url of this constructor must be used."
      ],
      "links": [
        "https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots",
        "https://core.telegram.org/method/messages.requestUrlAuth",
        "https://core.telegram.org/constructor/urlAuthResultRequest",
        "https://core.telegram.org/method/messages.acceptUrlAuth",
        "https://core.telegram.org/constructor/urlAuthResultAccepted",
        "https://core.telegram.org/constructor/urlAuthResultDefault"
      ],
      "fields": {
        "button_id": {
          "description": "ID of the button to pass to messages.requestUrlAuth¹",
          "links": [
            "https://core.telegram.org/method/messages.requestUrlAuth"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "fwd_text": {
          "description": "New text of the button in forwarded messages.",
          "links": null
        },
        "text": {
          "description": "Button label",
          "links": null
        },
        "url": {
          "description": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data¹.NOTE: Services must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization².",
          "links": [
            "https://core.telegram.org/widgets/login#receiving-authorization-data",
            "https://core.telegram.org/widgets/login#checking-authorization"
          ]
        }
      }
    },
    "labeledPrice": {
      "name": "labeledPrice",
      "description": [
        "This object represents a portion of the price for goods or services."
      ],
      "fields": {
        "amount": {
          "description": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json¹, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
          "links": [
            "https://core.telegram.org/bots/payments/currencies.json"
          ]
        },
        "label": {
          "description": "Portion label",
          "links": null
        }
      }
    },
    "langPackDifference": {
      "name": "langPackDifference",
      "description": [
        "Changes to the app's localization pack"
      ],
      "fields": {
        "from_version": {
          "description": "Previous version number",
          "links": null
        },
        "lang_code": {
          "description": "Language code",
          "links": null
        },
        "strings": {
          "description": "Localized strings",
          "links": null
        },
        "version": {
          "description": "New version number",
          "links": null
        }
      }
    },
    "langPackLanguage": {
      "name": "langPackLanguage",
      "description": [
        "Identifies a localization pack"
      ],
      "fields": {
        "base_lang_code": {
          "description": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs",
          "links": null
        },
        "beta": {
          "description": "Is this a beta localization pack?",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "lang_code": {
          "description": "Language code (pack identifier)",
          "links": null
        },
        "name": {
          "description": "Language name",
          "links": null
        },
        "native_name": {
          "description": "Language name in the language itself",
          "links": null
        },
        "official": {
          "description": "Whether the language pack is official",
          "links": null
        },
        "plural_code": {
          "description": "A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html¹ for more info",
          "links": [
            "https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html"
          ]
        },
        "rtl": {
          "description": "Is this a localization pack for an RTL language",
          "links": null
        },
        "strings_count": {
          "description": "Total number of non-deleted strings from the language pack",
          "links": null
        },
        "translated_count": {
          "description": "Total number of translated strings from the language pack",
          "links": null
        },
        "translations_url": {
          "description": "Link to language translation interface; empty for custom local language packs",
          "links": null
        }
      }
    },
    "langPackString": {
      "name": "langPackString",
      "description": [
        "Translated localization string"
      ],
      "fields": {
        "key": {
          "description": "Language key",
          "links": null
        },
        "value": {
          "description": "Value",
          "links": null
        }
      }
    },
    "langPackStringDeleted": {
      "name": "langPackStringDeleted",
      "description": [
        "Deleted localization string"
      ],
      "fields": {
        "key": {
          "description": "Localization key",
          "links": null
        }
      }
    },
    "langPackStringPluralized": {
      "name": "langPackStringPluralized",
      "description": [
        "A language pack string which has different forms based on the number of some object it mentions. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html¹ for more info"
      ],
      "links": [
        "https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html"
      ],
      "fields": {
        "few_value": {
          "description": "Value for a few objects",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "key": {
          "description": "Localization key",
          "links": null
        },
        "many_value": {
          "description": "Value for many objects",
          "links": null
        },
        "one_value": {
          "description": "Value for one object",
          "links": null
        },
        "other_value": {
          "description": "Default value",
          "links": null
        },
        "two_value": {
          "description": "Value for two objects",
          "links": null
        },
        "zero_value": {
          "description": "Value for zero objects",
          "links": null
        }
      }
    },
    "maskCoords": {
      "name": "maskCoords",
      "description": [
        "Position on a photo where a mask should be placed",
        "The n position indicates where the mask should be placed:"
      ],
      "fields": {
        "n": {
          "description": "Part of the face, relative to which the mask should be placed",
          "links": null
        },
        "x": {
          "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)",
          "links": null
        },
        "y": {
          "description": "Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)",
          "links": null
        },
        "zoom": {
          "description": "Mask scaling coefficient. (For example, 2.0 means a doubled size)",
          "links": null
        }
      }
    },
    "message": {
      "name": "message",
      "description": [
        "A message"
      ],
      "fields": {
        "date": {
          "description": "Date of the message",
          "links": null
        },
        "edit_date": {
          "description": "Last edit date of this message",
          "links": null
        },
        "edit_hide": {
          "description": "Whether the message should be shown as not modified to the user, even if an edit date is present",
          "links": null
        },
        "entities": {
          "description": "Message entities¹ for styled text",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "forwards": {
          "description": "Forward counter",
          "links": null
        },
        "from_id": {
          "description": "ID of the sender of the message",
          "links": null
        },
        "from_scheduled": {
          "description": "Whether this is a scheduled message¹",
          "links": [
            "https://core.telegram.org/api/scheduled-messages"
          ]
        },
        "fwd_from": {
          "description": "Info about forwarded messages",
          "links": null
        },
        "grouped_id": {
          "description": "Multiple media messages sent using messages.sendMultiMedia¹ with the same grouped ID indicate an album or media group²",
          "links": [
            "https://core.telegram.org/method/messages.sendMultiMedia",
            "https://core.telegram.org/api/files#albums-grouped-media"
          ]
        },
        "id": {
          "description": "ID of the message",
          "links": null
        },
        "legacy": {
          "description": "This is a legacy message: it has to be refetched with the new layer",
          "links": null
        },
        "media": {
          "description": "Media attachment",
          "links": null
        },
        "media_unread": {
          "description": "Whether there are unread media attachments in this message",
          "links": null
        },
        "mentioned": {
          "description": "Whether we were mentioned¹ in this message",
          "links": [
            "https://core.telegram.org/api/mentions"
          ]
        },
        "message": {
          "description": "The message",
          "links": null
        },
        "out": {
          "description": "Is this an outgoing message",
          "links": null
        },
        "peer_id": {
          "description": "Peer ID, the chat where this message was sent",
          "links": null
        },
        "pinned": {
          "description": "Whether this message is pinned¹",
          "links": [
            "https://core.telegram.org/api/pin"
          ]
        },
        "post": {
          "description": "Whether this is a channel post",
          "links": null
        },
        "post_author": {
          "description": "Name of the author of this message for channel posts (with signatures enabled)",
          "links": null
        },
        "replies": {
          "description": "Info about post comments (for channels) or message replies (for groups)¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "reply_markup": {
          "description": "Reply markup (bot/inline keyboards)",
          "links": null
        },
        "reply_to": {
          "description": "Reply information",
          "links": null
        },
        "restriction_reason": {
          "description": "Contains the reason why access to this message must be restricted.",
          "links": null
        },
        "silent": {
          "description": "Whether this is a silent message (no notification triggered)",
          "links": null
        },
        "via_bot_id": {
          "description": "ID of the inline bot that generated the message",
          "links": null
        },
        "views": {
          "description": "View count for channel posts",
          "links": null
        }
      }
    },
    "messageActionBotAllowed": {
      "name": "messageActionBotAllowed",
      "description": [
        "The domain name of the website on which the user has logged in. More about Telegram Login »¹"
      ],
      "links": [
        "https://core.telegram.org/widgets/login"
      ],
      "fields": {
        "domain": {
          "description": "The domain name of the website on which the user has logged in.",
          "links": null
        }
      }
    },
    "messageActionChannelCreate": {
      "name": "messageActionChannelCreate",
      "description": [
        "The channel was created"
      ],
      "fields": {
        "title": {
          "description": "Original channel/supergroup title",
          "links": null
        }
      }
    },
    "messageActionChannelMigrateFrom": {
      "name": "messageActionChannelMigrateFrom",
      "description": [
        "Indicates the channel was migrated¹ from the specified chat"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "chat_id": {
          "description": "The old chat ID",
          "links": null
        },
        "title": {
          "description": "The old chat tite",
          "links": null
        }
      }
    },
    "messageActionChatAddUser": {
      "name": "messageActionChatAddUser",
      "description": [
        "New member in the group"
      ],
      "fields": {
        "users": {
          "description": "Users that were invited to the chat",
          "links": null
        }
      }
    },
    "messageActionChatCreate": {
      "name": "messageActionChatCreate",
      "description": [
        "Group created"
      ],
      "fields": {
        "title": {
          "description": "Group name",
          "links": null
        },
        "users": {
          "description": "List of group members",
          "links": null
        }
      }
    },
    "messageActionChatDeletePhoto": {
      "name": "messageActionChatDeletePhoto",
      "description": [
        "Group profile photo removed."
      ]
    },
    "messageActionChatDeleteUser": {
      "name": "messageActionChatDeleteUser",
      "description": [
        "User left the group."
      ],
      "fields": {
        "user_id": {
          "description": "Leaving user ID",
          "links": null
        }
      }
    },
    "messageActionChatEditPhoto": {
      "name": "messageActionChatEditPhoto",
      "description": [
        "Group profile changed"
      ],
      "fields": {
        "photo": {
          "description": "New group pofile photo",
          "links": null
        }
      }
    },
    "messageActionChatEditTitle": {
      "name": "messageActionChatEditTitle",
      "description": [
        "Group name changed."
      ],
      "fields": {
        "title": {
          "description": "New group name",
          "links": null
        }
      }
    },
    "messageActionChatJoinedByLink": {
      "name": "messageActionChatJoinedByLink",
      "description": [
        "A user joined the chat via an invite link"
      ],
      "fields": {
        "inviter_id": {
          "description": "ID of the user that created the invite link",
          "links": null
        }
      }
    },
    "messageActionChatMigrateTo": {
      "name": "messageActionChatMigrateTo",
      "description": [
        "Indicates the chat was migrated¹ to the specified supergroup"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "channel_id": {
          "description": "The supergroup it was migrated to",
          "links": null
        }
      }
    },
    "messageActionContactSignUp": {
      "name": "messageActionContactSignUp",
      "description": [
        "A contact just signed up to telegram"
      ]
    },
    "messageActionCustomAction": {
      "name": "messageActionCustomAction",
      "description": [
        "Custom action (most likely not supported by the current layer, an upgrade might be needed)"
      ],
      "fields": {
        "message": {
          "description": "Action message",
          "links": null
        }
      }
    },
    "messageActionEmpty": {
      "name": "messageActionEmpty",
      "description": [
        "Empty constructor."
      ]
    },
    "messageActionGameScore": {
      "name": "messageActionGameScore",
      "description": [
        "Someone scored in a game"
      ],
      "fields": {
        "game_id": {
          "description": "Game ID",
          "links": null
        },
        "score": {
          "description": "Score",
          "links": null
        }
      }
    },
    "messageActionGeoProximityReached": {
      "name": "messageActionGeoProximityReached",
      "description": [
        "A user of the chat is now in proximity of another user"
      ],
      "fields": {
        "distance": {
          "description": "Distance, in meters (0-100000)",
          "links": null
        },
        "from_id": {
          "description": "The user or chat that is now in proximity of to_id",
          "links": null
        },
        "to_id": {
          "description": "The user or chat that subscribed to live geolocation proximity alerts¹",
          "links": [
            "https://core.telegram.org/api/live-location#proximity-alert"
          ]
        }
      }
    },
    "messageActionHistoryClear": {
      "name": "messageActionHistoryClear",
      "description": [
        "Chat history was cleared"
      ]
    },
    "messageActionPaymentSent": {
      "name": "messageActionPaymentSent",
      "description": [
        "A payment was sent"
      ],
      "fields": {
        "currency": {
          "description": "Three-letter ISO 4217 currency¹ code",
          "links": [
            "https://core.telegram.org/bots/payments#supported-currencies"
          ]
        },
        "total_amount": {
          "description": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json¹, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
          "links": [
            "https://core.telegram.org/bots/payments/currencies.json"
          ]
        }
      }
    },
    "messageActionPaymentSentMe": {
      "name": "messageActionPaymentSentMe",
      "description": [
        "A user just sent a payment to me (a bot)"
      ],
      "fields": {
        "charge": {
          "description": "Provider payment identifier",
          "links": null
        },
        "currency": {
          "description": "Three-letter ISO 4217 currency¹ code",
          "links": [
            "https://core.telegram.org/bots/payments#supported-currencies"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "info": {
          "description": "Order info provided by the user",
          "links": null
        },
        "payload": {
          "description": "Bot specified invoice payload",
          "links": null
        },
        "shipping_option_id": {
          "description": "Identifier of the shipping option chosen by the user",
          "links": null
        },
        "total_amount": {
          "description": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json¹, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
          "links": [
            "https://core.telegram.org/bots/payments/currencies.json"
          ]
        }
      }
    },
    "messageActionPhoneCall": {
      "name": "messageActionPhoneCall",
      "description": [
        "A phone call"
      ],
      "fields": {
        "call_id": {
          "description": "Call ID",
          "links": null
        },
        "duration": {
          "description": "Duration of the call in seconds",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "reason": {
          "description": "If the call has ended, the reason why it ended",
          "links": null
        },
        "video": {
          "description": "Is this a video call?",
          "links": null
        }
      }
    },
    "messageActionPinMessage": {
      "name": "messageActionPinMessage",
      "description": [
        "A message was pinned"
      ]
    },
    "messageActionScreenshotTaken": {
      "name": "messageActionScreenshotTaken",
      "description": [
        "A screenshot of the chat was taken"
      ]
    },
    "messageActionSecureValuesSent": {
      "name": "messageActionSecureValuesSent",
      "description": [
        "Request for secure telegram passport¹ values was sent"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "fields": {
        "types": {
          "description": "Secure value types",
          "links": null
        }
      }
    },
    "messageActionSecureValuesSentMe": {
      "name": "messageActionSecureValuesSentMe",
      "description": [
        "Secure telegram passport¹ values were received"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "fields": {
        "credentials": {
          "description": "Encrypted credentials required to decrypt the data",
          "links": null
        },
        "values": {
          "description": "Vector with information about documents and other Telegram Passport elements that were shared with the bot",
          "links": null
        }
      }
    },
    "messageEmpty": {
      "name": "messageEmpty",
      "description": [
        "Empty constructor, non-existent message."
      ],
      "fields": {
        "id": {
          "description": "Message identifier",
          "links": null
        }
      }
    },
    "messageEntityBankCard": {
      "name": "messageEntityBankCard",
      "description": [
        "Indicates a credit card number"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityBlockquote": {
      "name": "messageEntityBlockquote",
      "description": [
        "Message entity representing a block quote."
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityBold": {
      "name": "messageEntityBold",
      "description": [
        "Message entity representing bold text."
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityBotCommand": {
      "name": "messageEntityBotCommand",
      "description": [
        "Message entity representing a bot /command"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityCashtag": {
      "name": "messageEntityCashtag",
      "description": [
        "Message entity representing a $cashtag."
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityCode": {
      "name": "messageEntityCode",
      "description": [
        "Message entity representing a codeblock."
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityEmail": {
      "name": "messageEntityEmail",
      "description": [
        "Message entity representing an email@example.com¹."
      ],
      "links": [
        "https://core.telegram.orgmailto:email@example.com"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityHashtag": {
      "name": "messageEntityHashtag",
      "description": [
        "#hashtag message entity"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityItalic": {
      "name": "messageEntityItalic",
      "description": [
        "Message entity representing italic text."
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityMention": {
      "name": "messageEntityMention",
      "description": [
        "Message entity mentioning¹ the current user"
      ],
      "links": [
        "https://core.telegram.org/api/mentions"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityMentionName": {
      "name": "messageEntityMentionName",
      "description": [
        "Message entity representing a user mention¹: for creating a mention use inputMessageEntityMentionName²."
      ],
      "links": [
        "https://core.telegram.org/api/mentions",
        "https://core.telegram.org/constructor/inputMessageEntityMentionName"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "user_id": {
          "description": "Identifier of the user that was mentioned",
          "links": null
        }
      }
    },
    "messageEntityPhone": {
      "name": "messageEntityPhone",
      "description": [
        "Message entity representing a phone number."
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityPre": {
      "name": "messageEntityPre",
      "description": [
        "Message entity representing a preformatted codeblock, allowing the user to specify a programming language for the codeblock."
      ],
      "fields": {
        "language": {
          "description": "Programming language of the code",
          "links": null
        },
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityStrike": {
      "name": "messageEntityStrike",
      "description": [
        "Message entity representing strikethrough text."
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityTextUrl": {
      "name": "messageEntityTextUrl",
      "description": [
        "Message entity representing a text url¹: for in-text urls like https://google.com² use messageEntityUrl³."
      ],
      "links": [
        "https://google.com",
        "https://google.com",
        "https://core.telegram.org/constructor/messageEntityUrl"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "url": {
          "description": "The actual URL",
          "links": null
        }
      }
    },
    "messageEntityUnderline": {
      "name": "messageEntityUnderline",
      "description": [
        "Message entity representing underlined text."
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityUnknown": {
      "name": "messageEntityUnknown",
      "description": [
        "Unknown message entity"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageEntityUrl": {
      "name": "messageEntityUrl",
      "description": [
        "Message entity representing an in-text url: https://google.com¹; for text urls², use messageEntityTextUrl³."
      ],
      "links": [
        "https://google.com",
        "https://google.com",
        "https://core.telegram.org/constructor/messageEntityTextUrl"
      ],
      "fields": {
        "length": {
          "description": "Length of message entity within message (in UTF-8 codepoints)",
          "links": null
        },
        "offset": {
          "description": "Offset of message entity within message (in UTF-8 codepoints)",
          "links": null
        }
      }
    },
    "messageFwdHeader": {
      "name": "messageFwdHeader",
      "description": [
        "Info about a forwarded message"
      ],
      "fields": {
        "channel_post": {
          "description": "ID of the channel message that was forwarded",
          "links": null
        },
        "date": {
          "description": "When was the message originally sent",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "from_id": {
          "description": "The ID of the user that originally sent the message",
          "links": null
        },
        "from_name": {
          "description": "The name of the user that originally sent the message",
          "links": null
        },
        "post_author": {
          "description": "For channels and if signatures are enabled, author of the channel message",
          "links": null
        },
        "psa_type": {
          "description": "PSA type",
          "links": null
        },
        "saved_from_msg_id": {
          "description": "Only for messages forwarded to the current user (inputPeerSelf), ID of the message that was forwarded from the original user/channel",
          "links": null
        },
        "saved_from_peer": {
          "description": "Only for messages forwarded to the current user (inputPeerSelf), full info about the user/channel that originally sent the message",
          "links": null
        }
      }
    },
    "messageInteractionCounters": {
      "name": "messageInteractionCounters",
      "description": [
        "Message interaction counters"
      ],
      "fields": {
        "forwards": {
          "description": "Number of times this message was forwarded",
          "links": null
        },
        "msg_id": {
          "description": "Message ID",
          "links": null
        },
        "views": {
          "description": "Views",
          "links": null
        }
      }
    },
    "messageMediaContact": {
      "name": "messageMediaContact",
      "description": [
        "Attached contact."
      ],
      "fields": {
        "first_name": {
          "description": "Contact's first name",
          "links": null
        },
        "last_name": {
          "description": "Contact's last name",
          "links": null
        },
        "phone_number": {
          "description": "Phone number",
          "links": null
        },
        "user_id": {
          "description": "User identifier or 0, if the user with the given phone number is not registered",
          "links": null
        },
        "vcard": {
          "description": "VCARD of contact",
          "links": null
        }
      }
    },
    "messageMediaDice": {
      "name": "messageMediaDice",
      "description": [
        "Dice-based animated sticker¹"
      ],
      "links": [
        "https://core.telegram.org/api/dice"
      ],
      "fields": {
        "emoticon": {
          "description": "The emoji, for now ,  and  are supported",
          "links": null
        },
        "value": {
          "description": "Dice value¹",
          "links": [
            "https://core.telegram.org/api/dice"
          ]
        }
      }
    },
    "messageMediaDocument": {
      "name": "messageMediaDocument",
      "description": [
        "Document (video, audio, voice, sticker, any media type except photo)"
      ],
      "fields": {
        "document": {
          "description": "Attached document",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "ttl_seconds": {
          "description": "Time to live of self-destructing document",
          "links": null
        }
      }
    },
    "messageMediaEmpty": {
      "name": "messageMediaEmpty",
      "description": [
        "Empty constructor."
      ]
    },
    "messageMediaGame": {
      "name": "messageMediaGame",
      "description": [
        "Telegram game"
      ],
      "fields": {
        "game": {
          "description": "Game",
          "links": null
        }
      }
    },
    "messageMediaGeo": {
      "name": "messageMediaGeo",
      "description": [
        "Attached map."
      ],
      "fields": {
        "geo": {
          "description": "GeoPoint",
          "links": null
        }
      }
    },
    "messageMediaGeoLive": {
      "name": "messageMediaGeoLive",
      "description": [
        "Indicates a live geolocation¹"
      ],
      "links": [
        "https://core.telegram.org/api/live-location"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo": {
          "description": "Geolocation",
          "links": null
        },
        "heading": {
          "description": "For live locations¹, a direction in which the location moves, in degrees; 1-360",
          "links": [
            "https://core.telegram.org/api/live-location"
          ]
        },
        "period": {
          "description": "Validity period of provided geolocation",
          "links": null
        },
        "proximity_notification_radius": {
          "description": "For live locations¹, a maximum distance to another chat member for proximity alerts, in meters (0-100000).",
          "links": [
            "https://core.telegram.org/api/live-location"
          ]
        }
      }
    },
    "messageMediaInvoice": {
      "name": "messageMediaInvoice",
      "description": [
        "Invoice"
      ],
      "fields": {
        "currency": {
          "description": "Three-letter ISO 4217 currency¹ code",
          "links": [
            "https://core.telegram.org/bots/payments#supported-currencies"
          ]
        },
        "description": {
          "description": "Product description, 1-255 characters",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "photo": {
          "description": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.",
          "links": null
        },
        "receipt_msg_id": {
          "description": "Message ID of receipt: if set, clients should change the text of the first keyboardButtonBuy¹ button always attached to the message² to a localized version of the word Receipt",
          "links": [
            "https://core.telegram.org/constructor/keyboardButtonBuy",
            "https://core.telegram.org/constructor/message"
          ]
        },
        "shipping_address_requested": {
          "description": "Whether the shipping address was requested",
          "links": null
        },
        "start_param": {
          "description": "Unique bot deep-linking parameter that can be used to generate this invoice",
          "links": null
        },
        "test": {
          "description": "Whether this is an example invoice",
          "links": null
        },
        "title": {
          "description": "Product name, 1-32 characters",
          "links": null
        },
        "total_amount": {
          "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json¹, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
          "links": [
            "https://core.telegram.org/bots/payments/currencies.json"
          ]
        }
      }
    },
    "messageMediaPhoto": {
      "name": "messageMediaPhoto",
      "description": [
        "Attached photo."
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "photo": {
          "description": "Photo",
          "links": null
        },
        "ttl_seconds": {
          "description": "Time to live in seconds of self-destructing photo",
          "links": null
        }
      }
    },
    "messageMediaPoll": {
      "name": "messageMediaPoll",
      "description": [
        "Poll"
      ],
      "fields": {
        "poll": {
          "description": "The poll",
          "links": null
        },
        "results": {
          "description": "The results of the poll",
          "links": null
        }
      }
    },
    "messageMediaUnsupported": {
      "name": "messageMediaUnsupported",
      "description": [
        "Current version of the client does not support this media type."
      ]
    },
    "messageMediaVenue": {
      "name": "messageMediaVenue",
      "description": [
        "Venue"
      ],
      "fields": {
        "address": {
          "description": "Address",
          "links": null
        },
        "geo": {
          "description": "Geolocation of venue",
          "links": null
        },
        "provider": {
          "description": "Venue provider: currently only \"foursquare\" needs to be supported",
          "links": null
        },
        "title": {
          "description": "Venue name",
          "links": null
        },
        "venue_id": {
          "description": "Venue ID in the provider's database",
          "links": null
        },
        "venue_type": {
          "description": "Venue type in the provider's database",
          "links": null
        }
      }
    },
    "messageMediaWebPage": {
      "name": "messageMediaWebPage",
      "description": [
        "Preview of webpage"
      ],
      "fields": {
        "webpage": {
          "description": "Webpage preview",
          "links": null
        }
      }
    },
    "messageRange": {
      "name": "messageRange",
      "description": [
        "Indicates a range of chat messages"
      ],
      "fields": {
        "max_id": {
          "description": "End of range (message ID)",
          "links": null
        },
        "min_id": {
          "description": "Start of range (message ID)",
          "links": null
        }
      }
    },
    "messageReplies": {
      "name": "messageReplies",
      "description": [
        "Info about the comment section of a channel post, or a simple message thread¹"
      ],
      "links": [
        "https://core.telegram.org/api/threads"
      ],
      "fields": {
        "channel_id": {
          "description": "For channel post comments, contains the ID of the associated discussion supergroup¹",
          "links": [
            "https://core.telegram.org/api/discussion"
          ]
        },
        "comments": {
          "description": "Whether this constructor contains information about the comment section of a channel post, or a simple message thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "max_id": {
          "description": "ID of the latest message in this thread or comment section.",
          "links": null
        },
        "read_max_id": {
          "description": "Contains the ID of the latest read message in this thread or comment section.",
          "links": null
        },
        "recent_repliers": {
          "description": "For channel post comments, contains information about the last few comment posters for a specific thread, to show a small list of commenter profile pictures in client previews.",
          "links": null
        },
        "replies": {
          "description": "Contains the total number of replies in this thread or comment section.",
          "links": null
        },
        "replies_pts": {
          "description": "PTS¹ of the message that started this thread.",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "messageReplyHeader": {
      "name": "messageReplyHeader",
      "description": [
        "Message replies and thread¹ information"
      ],
      "links": [
        "https://core.telegram.org/api/threads"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "reply_to_msg_id": {
          "description": "ID of message to which this message is replying",
          "links": null
        },
        "reply_to_peer_id": {
          "description": "For replies sent in channel discussion threads¹ of which the current user is not a member, the discussion group ID",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "reply_to_top_id": {
          "description": "ID of the message that started this message thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        }
      }
    },
    "messageService": {
      "name": "messageService",
      "description": [
        "Indicates a service message"
      ],
      "fields": {
        "action": {
          "description": "Event connected with the service message",
          "links": null
        },
        "date": {
          "description": "Message date",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "from_id": {
          "description": "ID of the sender of this message",
          "links": null
        },
        "id": {
          "description": "Message ID",
          "links": null
        },
        "legacy": {
          "description": "This is a legacy message: it has to be refetched with the new layer",
          "links": null
        },
        "media_unread": {
          "description": "Whether the message contains unread media",
          "links": null
        },
        "mentioned": {
          "description": "Whether we were mentioned in the message",
          "links": null
        },
        "out": {
          "description": "Whether the message is outgoing",
          "links": null
        },
        "peer_id": {
          "description": "Sender of service message",
          "links": null
        },
        "post": {
          "description": "Whether it's a channel post",
          "links": null
        },
        "reply_to": {
          "description": "Reply (thread) information",
          "links": null
        },
        "silent": {
          "description": "Whether the message is silent",
          "links": null
        }
      }
    },
    "messageUserVote": {
      "name": "messageUserVote",
      "description": [
        "How a user voted in a poll"
      ],
      "fields": {
        "date": {
          "description": "When did the user cast the vote",
          "links": null
        },
        "option": {
          "description": "The option chosen by the user",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "messageUserVoteInputOption": {
      "name": "messageUserVoteInputOption",
      "description": [
        "How a user voted in a poll (reduced constructor, returned if an option was provided to messages.getPollVotes¹)"
      ],
      "links": [
        "https://core.telegram.org/method/messages.getPollVotes"
      ],
      "fields": {
        "date": {
          "description": "When did the user cast the vote",
          "links": null
        },
        "user_id": {
          "description": "The user that voted for the queried option",
          "links": null
        }
      }
    },
    "messageUserVoteMultiple": {
      "name": "messageUserVoteMultiple",
      "description": [
        "How a user voted in a multiple-choice poll"
      ],
      "fields": {
        "date": {
          "description": "When did the user cast their votes",
          "links": null
        },
        "options": {
          "description": "Options chosen by the user",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "messageViews": {
      "name": "messageViews",
      "description": [
        "View, forward counter + info about replies of a specific message"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "forwards": {
          "description": "Forward count of message",
          "links": null
        },
        "replies": {
          "description": "Reply and thread¹ information of message",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "views": {
          "description": "Viewcount of message",
          "links": null
        }
      }
    },
    "messages.affectedHistory": {
      "name": "messages.affectedHistory",
      "description": [
        "Affected part of communication history with the user or in a chat."
      ],
      "fields": {
        "offset": {
          "description": "If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease",
          "links": null
        },
        "pts": {
          "description": "Number of events occured in a text box",
          "links": null
        },
        "pts_count": {
          "description": "Number of affected events",
          "links": null
        }
      }
    },
    "messages.affectedMessages": {
      "name": "messages.affectedMessages",
      "description": [
        "Events affected by operation"
      ],
      "fields": {
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "messages.allStickers": {
      "name": "messages.allStickers",
      "description": [
        "Info about all installed stickers"
      ],
      "fields": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "sets": {
          "description": "All stickersets",
          "links": null
        }
      }
    },
    "messages.allStickersNotModified": {
      "name": "messages.allStickersNotModified",
      "description": [
        "Info about all installed stickers hasn't changed"
      ]
    },
    "messages.archivedStickers": {
      "name": "messages.archivedStickers",
      "description": [
        "Archived stickersets"
      ],
      "fields": {
        "count": {
          "description": "Number of archived stickers",
          "links": null
        },
        "sets": {
          "description": "Archived stickersets",
          "links": null
        }
      }
    },
    "messages.botCallbackAnswer": {
      "name": "messages.botCallbackAnswer",
      "description": [
        "Callback answer sent by the bot in response to a button press"
      ],
      "fields": {
        "alert": {
          "description": "Whether an alert should be shown to the user instead of a toast notification",
          "links": null
        },
        "cache_time": {
          "description": "For how long should this answer be cached",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "has_url": {
          "description": "Whether an URL is present",
          "links": null
        },
        "message": {
          "description": "Alert to show",
          "links": null
        },
        "native_ui": {
          "description": "Whether to show games in WebView or in native UI.",
          "links": null
        },
        "url": {
          "description": "URL to open",
          "links": null
        }
      }
    },
    "messages.botResults": {
      "name": "messages.botResults",
      "description": [
        "Result of a query to an inline bot"
      ],
      "fields": {
        "cache_time": {
          "description": "Caching validity of the results",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "gallery": {
          "description": "Whether the result is a picture gallery",
          "links": null
        },
        "next_offset": {
          "description": "The next offset to use when navigating through results",
          "links": null
        },
        "query_id": {
          "description": "Query ID",
          "links": null
        },
        "results": {
          "description": "The results",
          "links": null
        },
        "switch_pm": {
          "description": "Whether the bot requested the user to message him in private",
          "links": null
        },
        "users": {
          "description": "Users mentioned in the results",
          "links": null
        }
      }
    },
    "messages.channelMessages": {
      "name": "messages.channelMessages",
      "description": [
        "Channel messages"
      ],
      "fields": {
        "chats": {
          "description": "Chats",
          "links": null
        },
        "count": {
          "description": "Total number of results were found server-side (may not be all included here)",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "inexact": {
          "description": "If set, returned results may be inexact",
          "links": null
        },
        "messages": {
          "description": "Found messages",
          "links": null
        },
        "offset_id_offset": {
          "description": "Indicates the absolute position of messages[0] within the total result set with count count. This is useful, for example, if the result was fetched using offset_id, and we need to display a progress/total counter (like photo 134 of 200, for all media in a chat, we could simply use photo ${offset_id_offset} of ${count}.",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "messages.chatFull": {
      "name": "messages.chatFull",
      "description": [
        "Extended info on chat and auxiliary data."
      ],
      "fields": {
        "chats": {
          "description": "List containing basic info on chat",
          "links": null
        },
        "full_chat": {
          "description": "Extended info on a chat",
          "links": null
        },
        "users": {
          "description": "List of users mentioned above",
          "links": null
        }
      }
    },
    "messages.chats": {
      "name": "messages.chats",
      "description": [
        "List of chats with auxiliary data."
      ],
      "fields": {
        "chats": {
          "description": "List of chats",
          "links": null
        }
      }
    },
    "messages.chatsSlice": {
      "name": "messages.chatsSlice",
      "description": [
        "Partial list of chats, more would have to be fetched with pagination¹"
      ],
      "links": [
        "https://core.telegram.org/api/offsets"
      ],
      "fields": {
        "chats": {
          "description": "Chats",
          "links": null
        },
        "count": {
          "description": "Total number of results that were found server-side (not all are included in chats)",
          "links": null
        }
      }
    },
    "messages.dhConfig": {
      "name": "messages.dhConfig",
      "description": [
        "New set of configuring parameters."
      ],
      "fields": {
        "g": {
          "description": "New value prime, see Wikipedia¹",
          "links": [
            "https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"
          ]
        },
        "p": {
          "description": "New value primitive root, see Wikipedia¹",
          "links": [
            "https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"
          ]
        },
        "random": {
          "description": "Random sequence of bytes of assigned length",
          "links": null
        },
        "version": {
          "description": "Vestion of set of parameters",
          "links": null
        }
      }
    },
    "messages.dhConfigNotModified": {
      "name": "messages.dhConfigNotModified",
      "description": [
        "Configuring parameters did not change."
      ],
      "fields": {
        "random": {
          "description": "Random sequence of bytes of assigned length",
          "links": null
        }
      }
    },
    "messages.dialogs": {
      "name": "messages.dialogs",
      "description": [
        "Full list of chats with messages and auxiliary data."
      ],
      "fields": {
        "chats": {
          "description": "List of groups mentioned in the chats",
          "links": null
        },
        "dialogs": {
          "description": "List of chats",
          "links": null
        },
        "messages": {
          "description": "List of last messages from each chat",
          "links": null
        },
        "users": {
          "description": "List of users mentioned in messages and groups",
          "links": null
        }
      }
    },
    "messages.dialogsNotModified": {
      "name": "messages.dialogsNotModified",
      "description": [
        "Dialogs haven't changed"
      ],
      "fields": {
        "count": {
          "description": "Number of dialogs found server-side by the query",
          "links": null
        }
      }
    },
    "messages.dialogsSlice": {
      "name": "messages.dialogsSlice",
      "description": [
        "Incomplete list of dialogs with messages and auxiliary data."
      ],
      "fields": {
        "chats": {
          "description": "List of chats mentioned in dialogs",
          "links": null
        },
        "count": {
          "description": "Total number of dialogs",
          "links": null
        },
        "dialogs": {
          "description": "List of dialogs",
          "links": null
        },
        "messages": {
          "description": "List of last messages from dialogs",
          "links": null
        },
        "users": {
          "description": "List of users mentioned in messages and chats",
          "links": null
        }
      }
    },
    "messages.discussionMessage": {
      "name": "messages.discussionMessage",
      "description": [
        "Information about a message thread¹"
      ],
      "links": [
        "https://core.telegram.org/api/threads"
      ],
      "fields": {
        "chats": {
          "description": "Chats mentioned in constructor",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "max_id": {
          "description": "Message ID of latest reply in this thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "messages": {
          "description": "Discussion messages",
          "links": null
        },
        "read_inbox_max_id": {
          "description": "Message ID of latest read incoming message in this thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "read_outbox_max_id": {
          "description": "Message ID of latest read outgoing message in this thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "users": {
          "description": "Users mentioned in constructor",
          "links": null
        }
      }
    },
    "messages.favedStickers": {
      "name": "messages.favedStickers",
      "description": [
        "Favorited stickers"
      ],
      "fields": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "packs": {
          "description": "Emojis associated to stickers",
          "links": null
        },
        "stickers": {
          "description": "Favorited stickers",
          "links": null
        }
      }
    },
    "messages.favedStickersNotModified": {
      "name": "messages.favedStickersNotModified",
      "description": [
        "No new favorited stickers were found"
      ]
    },
    "messages.featuredStickers": {
      "name": "messages.featuredStickers",
      "description": [
        "Featured stickersets"
      ],
      "fields": {
        "count": {
          "description": "Total number of featured stickers",
          "links": null
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "sets": {
          "description": "Featured stickersets",
          "links": null
        },
        "unread": {
          "description": "IDs of new featured stickersets",
          "links": null
        }
      }
    },
    "messages.featuredStickersNotModified": {
      "name": "messages.featuredStickersNotModified",
      "description": [
        "Featured stickers haven't changed"
      ],
      "fields": {
        "count": {
          "description": "Total number of featured stickers",
          "links": null
        }
      }
    },
    "messages.foundStickerSets": {
      "name": "messages.foundStickerSets",
      "description": [
        "Found stickersets"
      ],
      "fields": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "sets": {
          "description": "Found stickersets",
          "links": null
        }
      }
    },
    "messages.foundStickerSetsNotModified": {
      "name": "messages.foundStickerSetsNotModified",
      "description": [
        "No further results were found"
      ]
    },
    "messages.highScores": {
      "name": "messages.highScores",
      "description": [
        "Highscores in a game"
      ],
      "fields": {
        "scores": {
          "description": "Highscores",
          "links": null
        },
        "users": {
          "description": "Users, associated to the highscores",
          "links": null
        }
      }
    },
    "messages.inactiveChats": {
      "name": "messages.inactiveChats",
      "description": [
        "Inactive chat list"
      ],
      "fields": {
        "chats": {
          "description": "Chat list",
          "links": null
        },
        "dates": {
          "description": "When was the chat last active",
          "links": null
        },
        "users": {
          "description": "Users mentioned in the chat list",
          "links": null
        }
      }
    },
    "messages.messageEditData": {
      "name": "messages.messageEditData",
      "description": [
        "Message edit data for media"
      ],
      "fields": {
        "caption": {
          "description": "Media caption, if the specified media's caption can be edited",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      }
    },
    "messages.messageViews": {
      "name": "messages.messageViews",
      "description": [
        "View, forward counter + info about replies"
      ],
      "fields": {
        "chats": {
          "description": "Chats mentioned in constructor",
          "links": null
        },
        "users": {
          "description": "Users mentioned in constructor",
          "links": null
        },
        "views": {
          "description": "View, forward counter + info about replies",
          "links": null
        }
      }
    },
    "messages.messages": {
      "name": "messages.messages",
      "description": [
        "Full list of messages with auxilary data."
      ],
      "fields": {
        "chats": {
          "description": "List of chats mentioned in dialogs",
          "links": null
        },
        "messages": {
          "description": "List of messages",
          "links": null
        },
        "users": {
          "description": "List of users mentioned in messages and chats",
          "links": null
        }
      }
    },
    "messages.messagesNotModified": {
      "name": "messages.messagesNotModified",
      "description": [
        "No new messages matching the query were found"
      ],
      "fields": {
        "count": {
          "description": "Number of results found server-side by the given query",
          "links": null
        }
      }
    },
    "messages.messagesSlice": {
      "name": "messages.messagesSlice",
      "description": [
        "Incomplete list of messages and auxiliary data."
      ],
      "fields": {
        "chats": {
          "description": "List of chats mentioned in messages",
          "links": null
        },
        "count": {
          "description": "Total number of messages in the list",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "inexact": {
          "description": "If set, indicates that the results may be inexact",
          "links": null
        },
        "messages": {
          "description": "List of messages",
          "links": null
        },
        "next_rate": {
          "description": "Rate to use in the offset_rate parameter in the next call to messages.searchGlobal¹",
          "links": [
            "https://core.telegram.org/method/messages.searchGlobal"
          ]
        },
        "offset_id_offset": {
          "description": "Indicates the absolute position of messages[0] within the total result set with count count. This is useful, for example, if the result was fetched using offset_id, and we need to display a progress/total counter (like photo 134 of 200, for all media in a chat, we could simply use photo ${offset_id_offset} of ${count}.",
          "links": null
        },
        "users": {
          "description": "List of users mentioned in messages and chats",
          "links": null
        }
      }
    },
    "messages.peerDialogs": {
      "name": "messages.peerDialogs",
      "description": [
        "Dialog info of multiple peers"
      ],
      "fields": {
        "chats": {
          "description": "Chats",
          "links": null
        },
        "dialogs": {
          "description": "Dialog info",
          "links": null
        },
        "messages": {
          "description": "Messages mentioned in dialog info",
          "links": null
        },
        "state": {
          "description": "Current update state of dialog¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "messages.recentStickers": {
      "name": "messages.recentStickers",
      "description": [
        "Recently used stickers"
      ],
      "fields": {
        "dates": {
          "description": "When was each sticker last used",
          "links": null
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "packs": {
          "description": "Emojis associated to stickers",
          "links": null
        },
        "stickers": {
          "description": "Recent stickers",
          "links": null
        }
      }
    },
    "messages.recentStickersNotModified": {
      "name": "messages.recentStickersNotModified",
      "description": [
        "No new recent sticker was found"
      ]
    },
    "messages.savedGifs": {
      "name": "messages.savedGifs",
      "description": [
        "Saved gifs"
      ],
      "fields": {
        "gifs": {
          "description": "List of saved gifs",
          "links": null
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      }
    },
    "messages.savedGifsNotModified": {
      "name": "messages.savedGifsNotModified",
      "description": [
        "No new saved gifs were found"
      ]
    },
    "messages.searchCounter": {
      "name": "messages.searchCounter",
      "description": [
        "Indicates how many results would be found by a messages.search¹ call with the same parameters"
      ],
      "links": [
        "https://core.telegram.org/method/messages.search"
      ],
      "fields": {
        "count": {
          "description": "Number of results that were found server-side",
          "links": null
        },
        "filter": {
          "description": "Provided message filter",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "inexact": {
          "description": "If set, the results may be inexact",
          "links": null
        }
      }
    },
    "messages.sentEncryptedFile": {
      "name": "messages.sentEncryptedFile",
      "description": [
        "Message with a file enclosure sent to a protected chat"
      ],
      "fields": {
        "date": {
          "description": "Sending date",
          "links": null
        },
        "file": {
          "description": "Attached file",
          "links": null
        }
      }
    },
    "messages.sentEncryptedMessage": {
      "name": "messages.sentEncryptedMessage",
      "description": [
        "Message without file attachemts sent to an encrypted file."
      ],
      "fields": {
        "date": {
          "description": "Date of sending",
          "links": null
        }
      }
    },
    "messages.stickerSet": {
      "name": "messages.stickerSet",
      "description": [
        "Stickerset and stickers inside it"
      ],
      "fields": {
        "documents": {
          "description": "Stickers in stickerset",
          "links": null
        },
        "packs": {
          "description": "Emoji info for stickers",
          "links": null
        },
        "set": {
          "description": "The stickerset",
          "links": null
        }
      }
    },
    "messages.stickerSetInstallResultArchive": {
      "name": "messages.stickerSetInstallResultArchive",
      "description": [
        "The stickerset was installed, but since there are too many stickersets some were archived"
      ],
      "fields": {
        "sets": {
          "description": "Archived stickersets",
          "links": null
        }
      }
    },
    "messages.stickerSetInstallResultSuccess": {
      "name": "messages.stickerSetInstallResultSuccess",
      "description": [
        "The stickerset was installed successfully"
      ]
    },
    "messages.stickers": {
      "name": "messages.stickers",
      "description": [
        "Found stickers"
      ],
      "fields": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "stickers": {
          "description": "Stickers",
          "links": null
        }
      }
    },
    "messages.stickersNotModified": {
      "name": "messages.stickersNotModified",
      "description": [
        "No new stickers were found for the given query"
      ]
    },
    "messages.votesList": {
      "name": "messages.votesList",
      "description": [
        "How users voted in a poll"
      ],
      "fields": {
        "count": {
          "description": "Total number of votes for all options (or only for the chosen option, if provided to messages.getPollVotes¹)",
          "links": [
            "https://core.telegram.org/method/messages.getPollVotes"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "next_offset": {
          "description": "Offset to use with the next messages.getPollVotes¹ request, empty string if no more results are available.",
          "links": [
            "https://core.telegram.org/method/messages.getPollVotes"
          ]
        },
        "users": {
          "description": "Info about users that voted in the poll",
          "links": null
        },
        "votes": {
          "description": "Vote info for each user",
          "links": null
        }
      }
    },
    "nearestDc": {
      "name": "nearestDc",
      "description": [
        "Nearest data centre, according to geo-ip."
      ],
      "fields": {
        "country": {
          "description": "Country code determined by geo-ip",
          "links": null
        },
        "nearest_dc": {
          "description": "Number of nearest data centre",
          "links": null
        },
        "this_dc": {
          "description": "Number of current data centre",
          "links": null
        }
      }
    },
    "notifyBroadcasts": {
      "name": "notifyBroadcasts",
      "description": [
        "Channel notification settings"
      ]
    },
    "notifyChats": {
      "name": "notifyChats",
      "description": [
        "Notifications generated by all groups."
      ]
    },
    "notifyPeer": {
      "name": "notifyPeer",
      "description": [
        "Notifications generated by a certain user or group."
      ],
      "fields": {
        "peer": {
          "description": "user or group",
          "links": null
        }
      }
    },
    "notifyUsers": {
      "name": "notifyUsers",
      "description": [
        "Notifications generated by all users."
      ]
    },
    "null": {
      "name": "null",
      "description": [
        "Corresponds to an arbitrary empty object."
      ]
    },
    "page": {
      "name": "page",
      "description": [
        "Instant view¹ page"
      ],
      "links": [
        "https://instantview.telegram.org"
      ],
      "fields": {
        "blocks": {
          "description": "Page elements (like with HTML elements, only as TL constructors)",
          "links": null
        },
        "documents": {
          "description": "Media in page",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "part": {
          "description": "Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using messages.getWebPagePreview¹.",
          "links": [
            "https://core.telegram.org/method/messages.getWebPagePreview"
          ]
        },
        "photos": {
          "description": "Photos in page",
          "links": null
        },
        "rtl": {
          "description": "Whether the page contains RTL text",
          "links": null
        },
        "url": {
          "description": "Original page HTTP URL",
          "links": null
        },
        "v2": {
          "description": "Whether this is an IV v2¹ page",
          "links": [
            "https://instantview.telegram.org/docs#what-39s-new-in-2-0"
          ]
        },
        "views": {
          "description": "Viewcount",
          "links": null
        }
      }
    },
    "pageBlockAnchor": {
      "name": "pageBlockAnchor",
      "description": [
        "Link to section within the page itself (like \u003ca href=\"#target\"\u003eanchor\u003c/a\u003e)"
      ],
      "fields": {
        "name": {
          "description": "Name of target section",
          "links": null
        }
      }
    },
    "pageBlockAudio": {
      "name": "pageBlockAudio",
      "description": [
        "Audio"
      ],
      "fields": {
        "audio_id": {
          "description": "Audio ID (to be fetched from the container page¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/page"
          ]
        },
        "caption": {
          "description": "Audio caption",
          "links": null
        }
      }
    },
    "pageBlockAuthorDate": {
      "name": "pageBlockAuthorDate",
      "description": [
        "Author and date of creation of article"
      ],
      "fields": {
        "author": {
          "description": "Author name",
          "links": null
        },
        "published_date": {
          "description": "Date of pubblication",
          "links": null
        }
      }
    },
    "pageBlockBlockquote": {
      "name": "pageBlockBlockquote",
      "description": [
        "Quote (equivalent to the HTML \u003cblockquote\u003e)"
      ],
      "fields": {
        "caption": {
          "description": "Caption",
          "links": null
        },
        "text": {
          "description": "Quote contents",
          "links": null
        }
      }
    },
    "pageBlockChannel": {
      "name": "pageBlockChannel",
      "description": [
        "Reference to a telegram channel"
      ],
      "fields": {
        "channel": {
          "description": "The channel/supergroup/chat",
          "links": null
        }
      }
    },
    "pageBlockCollage": {
      "name": "pageBlockCollage",
      "description": [
        "Collage of media"
      ],
      "fields": {
        "caption": {
          "description": "Caption",
          "links": null
        },
        "items": {
          "description": "Media elements",
          "links": null
        }
      }
    },
    "pageBlockCover": {
      "name": "pageBlockCover",
      "description": [
        "A page cover"
      ],
      "fields": {
        "cover": {
          "description": "Cover",
          "links": null
        }
      }
    },
    "pageBlockDetails": {
      "name": "pageBlockDetails",
      "description": [
        "A collapsible details block"
      ],
      "fields": {
        "blocks": {
          "description": "Block contents",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "open": {
          "description": "Whether the block is open by default",
          "links": null
        },
        "title": {
          "description": "Always visible heading for the block",
          "links": null
        }
      }
    },
    "pageBlockDivider": {
      "name": "pageBlockDivider",
      "description": [
        "An empty block separating a page"
      ]
    },
    "pageBlockEmbed": {
      "name": "pageBlockEmbed",
      "description": [
        "An embedded webpage"
      ],
      "fields": {
        "allow_scrolling": {
          "description": "Whether scrolling should be allowed",
          "links": null
        },
        "caption": {
          "description": "Caption",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "full_width": {
          "description": "Whether the block should be full width",
          "links": null
        },
        "h": {
          "description": "Block height, if known",
          "links": null
        },
        "html": {
          "description": "HTML-markup of the embedded page",
          "links": null
        },
        "poster_photo_id": {
          "description": "Poster photo, if available",
          "links": null
        },
        "url": {
          "description": "Web page URL, if available",
          "links": null
        },
        "w": {
          "description": "Block width, if known",
          "links": null
        }
      }
    },
    "pageBlockEmbedPost": {
      "name": "pageBlockEmbedPost",
      "description": [
        "An embedded post"
      ],
      "fields": {
        "author": {
          "description": "Author name",
          "links": null
        },
        "author_photo_id": {
          "description": "ID of the author's photo",
          "links": null
        },
        "blocks": {
          "description": "Post contents",
          "links": null
        },
        "caption": {
          "description": "Caption",
          "links": null
        },
        "date": {
          "description": "Creation date",
          "links": null
        },
        "url": {
          "description": "Web page URL",
          "links": null
        },
        "webpage_id": {
          "description": "ID of generated webpage preview",
          "links": null
        }
      }
    },
    "pageBlockFooter": {
      "name": "pageBlockFooter",
      "description": [
        "Page footer"
      ],
      "fields": {
        "text": {
          "description": "Contents",
          "links": null
        }
      }
    },
    "pageBlockHeader": {
      "name": "pageBlockHeader",
      "description": [
        "Page header"
      ],
      "fields": {
        "text": {
          "description": "Contents",
          "links": null
        }
      }
    },
    "pageBlockKicker": {
      "name": "pageBlockKicker",
      "description": [
        "Kicker"
      ],
      "fields": {
        "text": {
          "description": "Contents",
          "links": null
        }
      }
    },
    "pageBlockList": {
      "name": "pageBlockList",
      "description": [
        "Unordered list of IV blocks"
      ],
      "fields": {
        "items": {
          "description": "List of blocks in an IV page",
          "links": null
        }
      }
    },
    "pageBlockMap": {
      "name": "pageBlockMap",
      "description": [
        "A map"
      ],
      "fields": {
        "caption": {
          "description": "Caption",
          "links": null
        },
        "geo": {
          "description": "Location of the map center",
          "links": null
        },
        "h": {
          "description": "Map height in pixels before applying scale; 16-1024",
          "links": null
        },
        "w": {
          "description": "Map width in pixels before applying scale; 16-102",
          "links": null
        },
        "zoom": {
          "description": "Map zoom level; 13-20",
          "links": null
        }
      }
    },
    "pageBlockOrderedList": {
      "name": "pageBlockOrderedList",
      "description": [
        "Ordered list of IV blocks"
      ],
      "fields": {
        "items": {
          "description": "List items",
          "links": null
        }
      }
    },
    "pageBlockParagraph": {
      "name": "pageBlockParagraph",
      "description": [
        "A paragraph"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "pageBlockPhoto": {
      "name": "pageBlockPhoto",
      "description": [
        "A photo"
      ],
      "fields": {
        "caption": {
          "description": "Caption",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "photo_id": {
          "description": "Photo ID",
          "links": null
        },
        "url": {
          "description": "HTTP URL of page the photo leads to when clicked",
          "links": null
        },
        "webpage_id": {
          "description": "ID of preview of the page the photo leads to when clicked",
          "links": null
        }
      }
    },
    "pageBlockPreformatted": {
      "name": "pageBlockPreformatted",
      "description": [
        "Preformatted (\u003cpre\u003e text)"
      ],
      "fields": {
        "language": {
          "description": "Programming language of preformatted text",
          "links": null
        },
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "pageBlockPullquote": {
      "name": "pageBlockPullquote",
      "description": [
        "Pullquote"
      ],
      "fields": {
        "caption": {
          "description": "Caption",
          "links": null
        },
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "pageBlockRelatedArticles": {
      "name": "pageBlockRelatedArticles",
      "description": [
        "Related articles"
      ],
      "fields": {
        "articles": {
          "description": "Related articles",
          "links": null
        },
        "title": {
          "description": "Title",
          "links": null
        }
      }
    },
    "pageBlockSlideshow": {
      "name": "pageBlockSlideshow",
      "description": [
        "Slideshow"
      ],
      "fields": {
        "caption": {
          "description": "Caption",
          "links": null
        },
        "items": {
          "description": "Slideshow items",
          "links": null
        }
      }
    },
    "pageBlockSubheader": {
      "name": "pageBlockSubheader",
      "description": [
        "Subheader"
      ],
      "fields": {
        "text": {
          "description": "Subheader",
          "links": null
        }
      }
    },
    "pageBlockSubtitle": {
      "name": "pageBlockSubtitle",
      "description": [
        "Subtitle"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "pageBlockTable": {
      "name": "pageBlockTable",
      "description": [
        "Table"
      ],
      "fields": {
        "bordered": {
          "description": "Does the table have a visible border?",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "rows": {
          "description": "Table rows",
          "links": null
        },
        "striped": {
          "description": "Is the table striped?",
          "links": null
        },
        "title": {
          "description": "Title",
          "links": null
        }
      }
    },
    "pageBlockTitle": {
      "name": "pageBlockTitle",
      "description": [
        "Title"
      ],
      "fields": {
        "text": {
          "description": "Title",
          "links": null
        }
      }
    },
    "pageBlockUnsupported": {
      "name": "pageBlockUnsupported",
      "description": [
        "Unsupported IV element"
      ]
    },
    "pageBlockVideo": {
      "name": "pageBlockVideo",
      "description": [
        "Video"
      ],
      "fields": {
        "autoplay": {
          "description": "Whether the video is set to autoplay",
          "links": null
        },
        "caption": {
          "description": "Caption",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "loop": {
          "description": "Whether the video is set to loop",
          "links": null
        },
        "video_id": {
          "description": "Video ID",
          "links": null
        }
      }
    },
    "pageCaption": {
      "name": "pageCaption",
      "description": [
        "Page caption"
      ],
      "fields": {
        "credit": {
          "description": "Credits",
          "links": null
        },
        "text": {
          "description": "Caption",
          "links": null
        }
      }
    },
    "pageListItemBlocks": {
      "name": "pageListItemBlocks",
      "description": [
        "List item"
      ],
      "fields": {
        "blocks": {
          "description": "Blocks",
          "links": null
        }
      }
    },
    "pageListItemText": {
      "name": "pageListItemText",
      "description": [
        "List item"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "pageListOrderedItemBlocks": {
      "name": "pageListOrderedItemBlocks",
      "description": [
        "Ordered list of IV¹ blocks"
      ],
      "links": [
        "https://instantview.telegram.org"
      ],
      "fields": {
        "blocks": {
          "description": "Item contents",
          "links": null
        },
        "num": {
          "description": "Number of element within ordered list",
          "links": null
        }
      }
    },
    "pageListOrderedItemText": {
      "name": "pageListOrderedItemText",
      "description": [
        "Ordered list of text items"
      ],
      "fields": {
        "num": {
          "description": "Number of element within ordered list",
          "links": null
        },
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "pageRelatedArticle": {
      "name": "pageRelatedArticle",
      "description": [
        "Related article"
      ],
      "fields": {
        "author": {
          "description": "Author name",
          "links": null
        },
        "description": {
          "description": "Description",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "photo_id": {
          "description": "ID of preview photo",
          "links": null
        },
        "published_date": {
          "description": "Date of pubblication",
          "links": null
        },
        "title": {
          "description": "Title",
          "links": null
        },
        "url": {
          "description": "URL of article",
          "links": null
        },
        "webpage_id": {
          "description": "Webpage ID of generated IV preview",
          "links": null
        }
      }
    },
    "pageTableCell": {
      "name": "pageTableCell",
      "description": [
        "Table cell"
      ],
      "fields": {
        "align_center": {
          "description": "Horizontally centered block",
          "links": null
        },
        "align_right": {
          "description": "Right-aligned block",
          "links": null
        },
        "colspan": {
          "description": "For how many columns should this cell extend",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "header": {
          "description": "Is this element part of the column header",
          "links": null
        },
        "rowspan": {
          "description": "For how many rows should this cell extend",
          "links": null
        },
        "text": {
          "description": "Content",
          "links": null
        },
        "valign_bottom": {
          "description": "Block vertically-alligned to the bottom",
          "links": null
        },
        "valign_middle": {
          "description": "Vertically centered block",
          "links": null
        }
      }
    },
    "pageTableRow": {
      "name": "pageTableRow",
      "description": [
        "Table row"
      ],
      "fields": {
        "cells": {
          "description": "Table cells",
          "links": null
        }
      }
    },
    "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow": {
      "name": "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow",
      "description": [
        "This key derivation algorithm defines that SRP 2FA login¹ must be used"
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ],
      "fields": {
        "g": {
          "description": "Base (see SRP 2FA login¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "p": {
          "description": "2048-bit modulus (see SRP 2FA login¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "salt1": {
          "description": "One of two salts used by the derivation function (see SRP 2FA login¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "salt2": {
          "description": "One of two salts used by the derivation function (see SRP 2FA login¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        }
      }
    },
    "passwordKdfAlgoUnknown": {
      "name": "passwordKdfAlgoUnknown",
      "description": [
        "Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm)"
      ]
    },
    "paymentCharge": {
      "name": "paymentCharge",
      "description": [
        "Payment identifier"
      ],
      "fields": {
        "id": {
          "description": "Telegram payment identifier",
          "links": null
        },
        "provider_charge_id": {
          "description": "Provider payment identifier",
          "links": null
        }
      }
    },
    "paymentRequestedInfo": {
      "name": "paymentRequestedInfo",
      "description": [
        "Order info provided by the user"
      ],
      "fields": {
        "email": {
          "description": "User's email address",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "name": {
          "description": "User's full name",
          "links": null
        },
        "phone": {
          "description": "User's phone number",
          "links": null
        },
        "shipping_address": {
          "description": "User's shipping address",
          "links": null
        }
      }
    },
    "paymentSavedCredentialsCard": {
      "name": "paymentSavedCredentialsCard",
      "description": [
        "Saved credit card"
      ],
      "fields": {
        "id": {
          "description": "Card ID",
          "links": null
        },
        "title": {
          "description": "Title",
          "links": null
        }
      }
    },
    "payments.ValidatedRequestedInfo": {
      "name": "payments.ValidatedRequestedInfo",
      "description": [
        "Validated user-provided info"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID",
          "links": null
        },
        "shipping_options": {
          "description": "Shipping options",
          "links": null
        }
      }
    },
    "payments.bankCardData": {
      "name": "payments.bankCardData",
      "description": [
        "Credit card info, provided by the card's bank(s)"
      ],
      "fields": {
        "open_urls": {
          "description": "Info URL(s) provided by the card's bank(s)",
          "links": null
        },
        "title": {
          "description": "Credit card title",
          "links": null
        }
      }
    },
    "payments.paymentForm": {
      "name": "payments.paymentForm",
      "description": [
        "Payment form"
      ],
      "fields": {
        "bot_id": {
          "description": "Bot ID",
          "links": null
        },
        "can_save_credentials": {
          "description": "Whether the user can choose to save credentials.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "invoice": {
          "description": "Invoice",
          "links": null
        },
        "native_params": {
          "description": "Contains information about the payment provider, if available, to support it natively without the need for opening the URL.A JSON object that can contain the following fields:- publishable_key: Stripe API publishable key- apple_pay_merchant_id: Apple Pay merchant ID- android_pay_public_key: Android Pay public key- android_pay_bgcolor: Android Pay form background color- android_pay_inverse: Whether to use the dark theme in the Android Pay form- need_country: True, if the user country must be provided,- need_zip: True, if the user ZIP/postal code must be provided,- need_cardholder_name: True, if the cardholder name must be provided",
          "links": null
        },
        "native_provider": {
          "description": "Payment provider name.One of the following:- stripe",
          "links": null
        },
        "password_missing": {
          "description": "Indicates that the user can save payment credentials, but only after setting up a 2FA password¹ (currently the account doesn't have a 2FA password²)",
          "links": [
            "https://core.telegram.org/api/srp",
            "https://core.telegram.org/api/srp"
          ]
        },
        "provider_id": {
          "description": "Payment provider ID.",
          "links": null
        },
        "saved_credentials": {
          "description": "Contains information about saved card credentials",
          "links": null
        },
        "saved_info": {
          "description": "Saved server-side order information",
          "links": null
        },
        "url": {
          "description": "Payment form URL",
          "links": null
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "payments.paymentReceipt": {
      "name": "payments.paymentReceipt",
      "description": [
        "Receipt"
      ],
      "fields": {
        "bot_id": {
          "description": "Bot ID",
          "links": null
        },
        "credentials_title": {
          "description": "Payment credential name",
          "links": null
        },
        "currency": {
          "description": "Three-letter ISO 4217 currency¹ code",
          "links": [
            "https://core.telegram.org/bots/payments#supported-currencies"
          ]
        },
        "date": {
          "description": "Date of generation",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "info": {
          "description": "Info",
          "links": null
        },
        "invoice": {
          "description": "Invoice",
          "links": null
        },
        "provider_id": {
          "description": "Provider ID",
          "links": null
        },
        "shipping": {
          "description": "Selected shipping option",
          "links": null
        },
        "total_amount": {
          "description": "Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json¹, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
          "links": [
            "https://core.telegram.org/bots/payments/currencies.json"
          ]
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "payments.paymentResult": {
      "name": "payments.paymentResult",
      "description": [
        "Payment result"
      ],
      "fields": {
        "updates": {
          "description": "Info about the payment",
          "links": null
        }
      }
    },
    "payments.paymentVerificationNeeded": {
      "name": "payments.paymentVerificationNeeded",
      "description": [
        "Payment was not successful, additional verification is needed"
      ],
      "fields": {
        "url": {
          "description": "URL for additional payment credentials verification",
          "links": null
        }
      }
    },
    "payments.savedInfo": {
      "name": "payments.savedInfo",
      "description": [
        "Saved server-side order information"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "has_saved_credentials": {
          "description": "Whether the user has some saved payment credentials",
          "links": null
        },
        "saved_info": {
          "description": "Saved server-side order information",
          "links": null
        }
      }
    },
    "peerBlocked": {
      "name": "peerBlocked",
      "description": [
        "Information about a blocked peer"
      ],
      "fields": {
        "date": {
          "description": "When was the peer blocked",
          "links": null
        },
        "peer_id": {
          "description": "Peer ID",
          "links": null
        }
      }
    },
    "peerChannel": {
      "name": "peerChannel",
      "description": [
        "Channel/supergroup"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel ID",
          "links": null
        }
      }
    },
    "peerChat": {
      "name": "peerChat",
      "description": [
        "Group."
      ],
      "fields": {
        "chat_id": {
          "description": "Group identifier",
          "links": null
        }
      }
    },
    "peerLocated": {
      "name": "peerLocated",
      "description": [
        "Peer geolocated nearby"
      ],
      "fields": {
        "distance": {
          "description": "Distance from the peer in meters",
          "links": null
        },
        "expires": {
          "description": "Validity period of current data",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        }
      }
    },
    "peerNotifySettings": {
      "name": "peerNotifySettings",
      "description": [
        "Notification settings."
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "mute_until": {
          "description": "Mute all notifications until this date",
          "links": null
        },
        "show_previews": {
          "description": "Display text in notifications",
          "links": null
        },
        "silent": {
          "description": "Mute peer?",
          "links": null
        },
        "sound": {
          "description": "Audio file name for notifications",
          "links": null
        }
      }
    },
    "peerSelfLocated": {
      "name": "peerSelfLocated",
      "description": [
        "Current peer"
      ],
      "fields": {
        "expires": {
          "description": "Expiry of geolocation info for current peer",
          "links": null
        }
      }
    },
    "peerSettings": {
      "name": "peerSettings",
      "description": [
        "Peer settings"
      ],
      "fields": {
        "add_contact": {
          "description": "Whether we can add the user as contact",
          "links": null
        },
        "autoarchived": {
          "description": "Whether this peer was automatically archived according to privacy settings¹",
          "links": [
            "https://core.telegram.org/constructor/globalPrivacySettings"
          ]
        },
        "block_contact": {
          "description": "Whether we can block the user",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo_distance": {
          "description": "Distance in meters between us and this peer",
          "links": null
        },
        "need_contacts_exception": {
          "description": "Whether a special exception for contacts is needed",
          "links": null
        },
        "report_geo": {
          "description": "Whether we can report a geogroup is irrelevant for this location",
          "links": null
        },
        "report_spam": {
          "description": "Whether we can still report the user for spam",
          "links": null
        },
        "share_contact": {
          "description": "Whether we can share the user's contact",
          "links": null
        }
      }
    },
    "peerUser": {
      "name": "peerUser",
      "description": [
        "Chat partner"
      ],
      "fields": {
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      }
    },
    "phone.phoneCall": {
      "name": "phone.phoneCall",
      "description": [
        "A VoIP phone call"
      ],
      "fields": {
        "phone_call": {
          "description": "The VoIP phone call",
          "links": null
        },
        "users": {
          "description": "VoIP phone call participants",
          "links": null
        }
      }
    },
    "phoneCall": {
      "name": "phoneCall",
      "description": [
        "Phone call"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "admin_id": {
          "description": "User ID of the creator of the call",
          "links": null
        },
        "connections": {
          "description": "List of endpoints the user can connect to to exchange call data",
          "links": null
        },
        "date": {
          "description": "Date of creation of the call",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "g_a_or_b": {
          "description": "Parameter for key exchange¹",
          "links": [
            "https://core.telegram.org/api/end-to-end/voice-calls"
          ]
        },
        "id": {
          "description": "Call ID",
          "links": null
        },
        "key_fingerprint": {
          "description": "Key fingerprint¹",
          "links": [
            "https://core.telegram.org/api/end-to-end/voice-calls"
          ]
        },
        "p2p_allowed": {
          "description": "Whether P2P connection to the other peer is allowed",
          "links": null
        },
        "participant_id": {
          "description": "User ID of the other participant in the call",
          "links": null
        },
        "protocol": {
          "description": "Call protocol info to be passed to libtgvoip",
          "links": null
        },
        "start_date": {
          "description": "When was the call actually started",
          "links": null
        },
        "video": {
          "description": "Whether this is a video call",
          "links": null
        }
      }
    },
    "phoneCallAccepted": {
      "name": "phoneCallAccepted",
      "description": [
        "An accepted phone call"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash of phone call",
          "links": null
        },
        "admin_id": {
          "description": "ID of the call creator",
          "links": null
        },
        "date": {
          "description": "When was the call accepted",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "g_b": {
          "description": "B parameter for secure E2E phone call key exchange¹",
          "links": [
            "https://core.telegram.org/api/end-to-end/voice-calls"
          ]
        },
        "id": {
          "description": "ID of accepted phone call",
          "links": null
        },
        "participant_id": {
          "description": "ID of the other user in the call",
          "links": null
        },
        "protocol": {
          "description": "Protocol to use for phone call",
          "links": null
        },
        "video": {
          "description": "Whether this is a video call",
          "links": null
        }
      }
    },
    "phoneCallDiscardReasonBusy": {
      "name": "phoneCallDiscardReasonBusy",
      "description": [
        "The phone call was discared because the user is busy in another call"
      ]
    },
    "phoneCallDiscardReasonDisconnect": {
      "name": "phoneCallDiscardReasonDisconnect",
      "description": [
        "The phone call was disconnected"
      ]
    },
    "phoneCallDiscardReasonHangup": {
      "name": "phoneCallDiscardReasonHangup",
      "description": [
        "The phone call was ended normally"
      ]
    },
    "phoneCallDiscardReasonMissed": {
      "name": "phoneCallDiscardReasonMissed",
      "description": [
        "The phone call was missed"
      ]
    },
    "phoneCallDiscarded": {
      "name": "phoneCallDiscarded",
      "description": [
        "Indicates a discarded phone call"
      ],
      "fields": {
        "duration": {
          "description": "Duration of the phone call in seconds",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Call ID",
          "links": null
        },
        "need_debug": {
          "description": "Whether the server required the client to send¹ the libtgvoip call debug data",
          "links": [
            "https://core.telegram.org/method/phone.saveCallDebug"
          ]
        },
        "need_rating": {
          "description": "Whether the server required the user to rate¹ the call",
          "links": [
            "https://core.telegram.org/method/phone.setCallRating"
          ]
        },
        "reason": {
          "description": "Why was the phone call discarded",
          "links": null
        },
        "video": {
          "description": "Whether the call was a video call",
          "links": null
        }
      }
    },
    "phoneCallEmpty": {
      "name": "phoneCallEmpty",
      "description": [
        "Empty constructor"
      ],
      "fields": {
        "id": {
          "description": "Call ID",
          "links": null
        }
      }
    },
    "phoneCallProtocol": {
      "name": "phoneCallProtocol",
      "description": [
        "Protocol info for libtgvoip"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "library_versions": {
          "description": "When using phone.requestCall¹ and phone.acceptCall², specify all library versions supported by the client. The server will merge and choose the best library version supported by both peers, returning only the best value in the result of the callee's phone.acceptCall³ and in the phoneCallAccepted⁴ update received by the caller.",
          "links": [
            "https://core.telegram.org/method/phone.requestCall",
            "https://core.telegram.org/method/phone.acceptCall",
            "https://core.telegram.org/method/phone.acceptCall",
            "https://core.telegram.org/constructor/phoneCallAccepted"
          ]
        },
        "max_layer": {
          "description": "Maximum layer for remote libtgvoip",
          "links": null
        },
        "min_layer": {
          "description": "Minimum layer for remote libtgvoip",
          "links": null
        },
        "udp_p2p": {
          "description": "Whether to allow P2P connection to the other participant",
          "links": null
        },
        "udp_reflector": {
          "description": "Whether to allow connection to the other participants through the reflector servers",
          "links": null
        }
      }
    },
    "phoneCallRequested": {
      "name": "phoneCallRequested",
      "description": [
        "Requested phone call"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "admin_id": {
          "description": "ID of the creator of the phone call",
          "links": null
        },
        "date": {
          "description": "When was the phone call created",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "g_a_hash": {
          "description": "Parameter for key exchange¹",
          "links": [
            "https://core.telegram.org/api/end-to-end/voice-calls"
          ]
        },
        "id": {
          "description": "Phone call ID",
          "links": null
        },
        "participant_id": {
          "description": "ID of the other participant of the phone call",
          "links": null
        },
        "protocol": {
          "description": "Call protocol info to be passed to libtgvoip",
          "links": null
        },
        "video": {
          "description": "Whether this is a video call",
          "links": null
        }
      }
    },
    "phoneCallWaiting": {
      "name": "phoneCallWaiting",
      "description": [
        "Incoming phone call"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "admin_id": {
          "description": "Admin ID",
          "links": null
        },
        "date": {
          "description": "Date",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Call ID",
          "links": null
        },
        "participant_id": {
          "description": "Participant ID",
          "links": null
        },
        "protocol": {
          "description": "Phone call protocol info",
          "links": null
        },
        "receive_date": {
          "description": "When was the phone call received",
          "links": null
        },
        "video": {
          "description": "Is this a video call",
          "links": null
        }
      }
    },
    "phoneConnection": {
      "name": "phoneConnection",
      "description": [
        "Identifies an endpoint that can be used to connect to the other user in a phone call"
      ],
      "fields": {
        "id": {
          "description": "Endpoint ID",
          "links": null
        },
        "ip": {
          "description": "IP address of endpoint",
          "links": null
        },
        "ipv6": {
          "description": "IPv6 address of endpoint",
          "links": null
        },
        "peer_tag": {
          "description": "Our peer tag",
          "links": null
        },
        "port": {
          "description": "Port ID",
          "links": null
        }
      }
    },
    "phoneConnectionWebrtc": {
      "name": "phoneConnectionWebrtc",
      "description": [
        "WebRTC connection parameters"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Endpoint ID",
          "links": null
        },
        "ip": {
          "description": "IP address",
          "links": null
        },
        "ipv6": {
          "description": "IPv6 address",
          "links": null
        },
        "password": {
          "description": "Password",
          "links": null
        },
        "port": {
          "description": "Port",
          "links": null
        },
        "stun": {
          "description": "Whether this is a STUN endpoint",
          "links": null
        },
        "turn": {
          "description": "Whether this is a TURN endpoint",
          "links": null
        },
        "username": {
          "description": "Username",
          "links": null
        }
      }
    },
    "photo": {
      "name": "photo",
      "description": [
        "Photo"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "date": {
          "description": "Date of upload",
          "links": null
        },
        "dc_id": {
          "description": "DC ID to use for download",
          "links": null
        },
        "file_reference": {
          "description": "file reference¹",
          "links": [
            "https://core.telegram.org/api/file_reference"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "has_stickers": {
          "description": "Whether the photo has mask stickers attached to it",
          "links": null
        },
        "id": {
          "description": "ID",
          "links": null
        },
        "sizes": {
          "description": "Available sizes for download",
          "links": null
        },
        "video_sizes": {
          "description": "For animated profiles¹, the MPEG4 videos",
          "links": [
            "https://core.telegram.org/api/files#animated-profile-pictures"
          ]
        }
      }
    },
    "photoCachedSize": {
      "name": "photoCachedSize",
      "description": [
        "Description of an image and its content."
      ],
      "fields": {
        "bytes": {
          "description": "Binary data, file content",
          "links": null
        },
        "h": {
          "description": "Image height",
          "links": null
        },
        "location": {
          "description": "File location",
          "links": null
        },
        "type": {
          "description": "Thumbnail type",
          "links": null
        },
        "w": {
          "description": "Image width",
          "links": null
        }
      }
    },
    "photoEmpty": {
      "name": "photoEmpty",
      "description": [
        "Empty constructor, non-existent photo"
      ],
      "fields": {
        "id": {
          "description": "Photo identifier",
          "links": null
        }
      }
    },
    "photoPathSize": {
      "name": "photoPathSize",
      "description": [
        "Messages with animated stickers can have a compressed svg (\u003c 300 bytes) to show the outline of the sticker before fetching the actual lottie animation."
      ],
      "fields": {
        "bytes": {
          "description": "Compressed SVG path payload, see here for decompression instructions¹",
          "links": [
            "https://core.telegram.org/api/files#vector-thumbnails"
          ]
        },
        "type": {
          "description": "Always j",
          "links": null
        }
      }
    },
    "photoSize": {
      "name": "photoSize",
      "description": [
        "Image description."
      ],
      "fields": {
        "h": {
          "description": "Image height",
          "links": null
        },
        "location": {
          "description": "File location",
          "links": null
        },
        "size": {
          "description": "File size",
          "links": null
        },
        "type": {
          "description": "Thumbnail type",
          "links": null
        },
        "w": {
          "description": "Image width",
          "links": null
        }
      }
    },
    "photoSizeEmpty": {
      "name": "photoSizeEmpty",
      "description": [
        "Empty constructor. Image with this thumbnail is unavailable."
      ],
      "fields": {
        "type": {
          "description": "Thumbnail type (see. photoSize¹)",
          "links": [
            "https://core.telegram.org/constructor/photoSize"
          ]
        }
      }
    },
    "photoSizeProgressive": {
      "name": "photoSizeProgressive",
      "description": [
        "Progressively encoded photosize"
      ],
      "fields": {
        "h": {
          "description": "Photo height",
          "links": null
        },
        "location": {
          "description": "File location",
          "links": null
        },
        "sizes": {
          "description": "Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image.",
          "links": null
        },
        "type": {
          "description": "Photosize type",
          "links": null
        },
        "w": {
          "description": "Photo width",
          "links": null
        }
      }
    },
    "photoStrippedSize": {
      "name": "photoStrippedSize",
      "description": [
        "A low-resolution compressed JPG payload"
      ],
      "fields": {
        "bytes": {
          "description": "Thumbnail data, see here for more info on decompression »¹",
          "links": [
            "https://core.telegram.org/api/files#stripped-thumbnails"
          ]
        },
        "type": {
          "description": "Thumbnail type",
          "links": null
        }
      }
    },
    "photos.photo": {
      "name": "photos.photo",
      "description": [
        "Photo with auxiliary data."
      ],
      "fields": {
        "photo": {
          "description": "Photo",
          "links": null
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "photos.photos": {
      "name": "photos.photos",
      "description": [
        "Full list of photos with auxiliary data."
      ],
      "fields": {
        "photos": {
          "description": "List of photos",
          "links": null
        },
        "users": {
          "description": "List of mentioned users",
          "links": null
        }
      }
    },
    "photos.photosSlice": {
      "name": "photos.photosSlice",
      "description": [
        "Incomplete list of photos with auxiliary data."
      ],
      "fields": {
        "count": {
          "description": "Total number of photos",
          "links": null
        },
        "photos": {
          "description": "List of photos",
          "links": null
        },
        "users": {
          "description": "List of mentioned users",
          "links": null
        }
      }
    },
    "poll": {
      "name": "poll",
      "description": [
        "Poll"
      ],
      "fields": {
        "answers": {
          "description": "The possible answers, vote using messages.sendVote¹.",
          "links": [
            "https://core.telegram.org/method/messages.sendVote"
          ]
        },
        "close_date": {
          "description": "Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future; can't be used together with close_period.",
          "links": null
        },
        "close_period": {
          "description": "Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.",
          "links": null
        },
        "closed": {
          "description": "Whether the poll is closed and doesn't accept any more answers",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID of the poll",
          "links": null
        },
        "multiple_choice": {
          "description": "Whether multiple options can be chosen as answer",
          "links": null
        },
        "public_voters": {
          "description": "Whether cast votes are publicly visible to all users (non-anonymous poll)",
          "links": null
        },
        "question": {
          "description": "The question of the poll",
          "links": null
        },
        "quiz": {
          "description": "Whether this is a quiz (with wrong and correct answers, results shown in the return type)",
          "links": null
        }
      }
    },
    "pollAnswer": {
      "name": "pollAnswer",
      "description": [
        "A possible answer of a poll"
      ],
      "fields": {
        "option": {
          "description": "The param that has to be passed to messages.sendVote¹.",
          "links": [
            "https://core.telegram.org/method/messages.sendVote"
          ]
        },
        "text": {
          "description": "Textual representation of the answer",
          "links": null
        }
      }
    },
    "pollAnswerVoters": {
      "name": "pollAnswerVoters",
      "description": [
        "A poll answer, and how users voted on it"
      ],
      "fields": {
        "chosen": {
          "description": "Whether we have chosen this answer",
          "links": null
        },
        "correct": {
          "description": "For quizes, whether the option we have chosen is correct",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "option": {
          "description": "The param that has to be passed to messages.sendVote¹.",
          "links": [
            "https://core.telegram.org/method/messages.sendVote"
          ]
        },
        "voters": {
          "description": "How many users voted for this option",
          "links": null
        }
      }
    },
    "pollResults": {
      "name": "pollResults",
      "description": [
        "Results of poll"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "min": {
          "description": "Similar to min¹ objects, used for poll constructors that are the same for all users so they don't have option chosen by the current user (you can use messages.getPollResults² to get the full poll results).",
          "links": [
            "https://core.telegram.org/api/min",
            "https://core.telegram.org/method/messages.getPollResults"
          ]
        },
        "recent_voters": {
          "description": "IDs of the last users that recently voted in the poll",
          "links": null
        },
        "results": {
          "description": "Poll results",
          "links": null
        },
        "solution": {
          "description": "Explanation of quiz solution",
          "links": null
        },
        "solution_entities": {
          "description": "Message entities for styled text in quiz solution¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "total_voters": {
          "description": "Total number of people that voted in the poll",
          "links": null
        }
      }
    },
    "popularContact": {
      "name": "popularContact",
      "description": [
        "Popular contact"
      ],
      "fields": {
        "client_id": {
          "description": "Contact identifier",
          "links": null
        },
        "importers": {
          "description": "How many people imported this contact",
          "links": null
        }
      }
    },
    "postAddress": {
      "name": "postAddress",
      "description": [
        "Shipping address"
      ],
      "fields": {
        "city": {
          "description": "City",
          "links": null
        },
        "country_iso2": {
          "description": "ISO 3166-1 alpha-2 country code",
          "links": null
        },
        "post_code": {
          "description": "Address post code",
          "links": null
        },
        "state": {
          "description": "State, if applicable (empty otherwise)",
          "links": null
        },
        "street_line1": {
          "description": "First line for the address",
          "links": null
        },
        "street_line2": {
          "description": "Second line for the address",
          "links": null
        }
      }
    },
    "privacyKeyAddedByPhone": {
      "name": "privacyKeyAddedByPhone",
      "description": [
        "Whether people can add you to their contact list by your phone number"
      ]
    },
    "privacyKeyChatInvite": {
      "name": "privacyKeyChatInvite",
      "description": [
        "Whether the user can be invited to chats"
      ]
    },
    "privacyKeyForwards": {
      "name": "privacyKeyForwards",
      "description": [
        "Whether messages forwarded from the user will be anonymously forwarded¹"
      ],
      "links": [
        "https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding"
      ]
    },
    "privacyKeyPhoneCall": {
      "name": "privacyKeyPhoneCall",
      "description": [
        "Whether the user accepts phone calls"
      ]
    },
    "privacyKeyPhoneNumber": {
      "name": "privacyKeyPhoneNumber",
      "description": [
        "Whether the user allows us to see his phone number"
      ]
    },
    "privacyKeyPhoneP2P": {
      "name": "privacyKeyPhoneP2P",
      "description": [
        "Whether P2P connections in phone calls are allowed"
      ]
    },
    "privacyKeyProfilePhoto": {
      "name": "privacyKeyProfilePhoto",
      "description": [
        "Whether the profile picture of the user is visible"
      ]
    },
    "privacyKeyStatusTimestamp": {
      "name": "privacyKeyStatusTimestamp",
      "description": [
        "Whether we can see the last online timestamp"
      ]
    },
    "privacyValueAllowAll": {
      "name": "privacyValueAllowAll",
      "description": [
        "Allow all users"
      ]
    },
    "privacyValueAllowChatParticipants": {
      "name": "privacyValueAllowChatParticipants",
      "description": [
        "Allow all participants of certain chats"
      ],
      "fields": {
        "chats": {
          "description": "Allowed chats",
          "links": null
        }
      }
    },
    "privacyValueAllowContacts": {
      "name": "privacyValueAllowContacts",
      "description": [
        "Allow all contacts"
      ]
    },
    "privacyValueAllowUsers": {
      "name": "privacyValueAllowUsers",
      "description": [
        "Allow only certain users"
      ],
      "fields": {
        "users": {
          "description": "Allowed users",
          "links": null
        }
      }
    },
    "privacyValueDisallowAll": {
      "name": "privacyValueDisallowAll",
      "description": [
        "Disallow all users"
      ]
    },
    "privacyValueDisallowChatParticipants": {
      "name": "privacyValueDisallowChatParticipants",
      "description": [
        "Disallow only participants of certain chats"
      ],
      "fields": {
        "chats": {
          "description": "Disallowed chats",
          "links": null
        }
      }
    },
    "privacyValueDisallowContacts": {
      "name": "privacyValueDisallowContacts",
      "description": [
        "Disallow only contacts"
      ]
    },
    "privacyValueDisallowUsers": {
      "name": "privacyValueDisallowUsers",
      "description": [
        "Disallow only certain users"
      ],
      "fields": {
        "users": {
          "description": "Disallowed users",
          "links": null
        }
      }
    },
    "receivedNotifyMessage": {
      "name": "receivedNotifyMessage",
      "description": [
        "Message ID, for which PUSH-notifications were cancelled."
      ],
      "fields": {
        "flags": {
          "description": "Reserved for future use",
          "links": null
        },
        "id": {
          "description": "Message ID, for which PUSH-notifications were canceled",
          "links": null
        }
      }
    },
    "recentMeUrlChat": {
      "name": "recentMeUrlChat",
      "description": [
        "Recent t.me link to a chat"
      ],
      "fields": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        },
        "url": {
          "description": "t.me URL",
          "links": null
        }
      }
    },
    "recentMeUrlChatInvite": {
      "name": "recentMeUrlChatInvite",
      "description": [
        "Recent t.me invite link to a chat"
      ],
      "fields": {
        "chat_invite": {
          "description": "Chat invitation",
          "links": null
        },
        "url": {
          "description": "t.me URL",
          "links": null
        }
      }
    },
    "recentMeUrlStickerSet": {
      "name": "recentMeUrlStickerSet",
      "description": [
        "Recent t.me stickerset installation URL"
      ],
      "fields": {
        "set": {
          "description": "Stickerset",
          "links": null
        },
        "url": {
          "description": "t.me URL",
          "links": null
        }
      }
    },
    "recentMeUrlUnknown": {
      "name": "recentMeUrlUnknown",
      "description": [
        "Unknown t.me url"
      ],
      "fields": {
        "url": {
          "description": "URL",
          "links": null
        }
      }
    },
    "recentMeUrlUser": {
      "name": "recentMeUrlUser",
      "description": [
        "Recent t.me link to a user"
      ],
      "fields": {
        "url": {
          "description": "URL",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "replyInlineMarkup": {
      "name": "replyInlineMarkup",
      "description": [
        "Bot or inline keyboard"
      ],
      "fields": {
        "rows": {
          "description": "Bot or inline keyboard rows",
          "links": null
        }
      }
    },
    "replyKeyboardForceReply": {
      "name": "replyKeyboardForceReply",
      "description": [
        "Force the user to send a reply"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "selective": {
          "description": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message. Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.",
          "links": null
        },
        "single_use": {
          "description": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again.",
          "links": null
        }
      }
    },
    "replyKeyboardHide": {
      "name": "replyKeyboardHide",
      "description": [
        "Hide sent bot keyboard"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "selective": {
          "description": "Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet",
          "links": null
        }
      }
    },
    "replyKeyboardMarkup": {
      "name": "replyKeyboardMarkup",
      "description": [
        "Bot keyboard"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "resize": {
          "description": "Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app's standard keyboard.",
          "links": null
        },
        "rows": {
          "description": "Button row",
          "links": null
        },
        "selective": {
          "description": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.",
          "links": null
        },
        "single_use": {
          "description": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again.",
          "links": null
        }
      }
    },
    "restrictionReason": {
      "name": "restrictionReason",
      "description": [
        "Restriction reason.",
        "Contains the reason why access to a certain object must be restricted. Clients are supposed to deny access to the channel if the platform field is equal to all or to the current platform (ios, android, wp, etc.). Platforms can be concatenated (ios-android, ios-wp), unknown platforms are to be ignored. The text is the error message that should be shown to the user."
      ],
      "fields": {
        "platform": {
          "description": "Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (android-ios, ios-wp, etc)",
          "links": null
        },
        "reason": {
          "description": "Restriction reason (porno, terms, etc.)",
          "links": null
        },
        "text": {
          "description": "Error message to be shown to the user",
          "links": null
        }
      }
    },
    "savedPhoneContact": {
      "name": "savedPhoneContact",
      "description": [
        "Saved contact"
      ],
      "fields": {
        "date": {
          "description": "Date added",
          "links": null
        },
        "first_name": {
          "description": "First name",
          "links": null
        },
        "last_name": {
          "description": "Last name",
          "links": null
        },
        "phone": {
          "description": "Phone number",
          "links": null
        }
      }
    },
    "secureCredentialsEncrypted": {
      "name": "secureCredentialsEncrypted",
      "description": [
        "Encrypted credentials required to decrypt telegram passport¹ data."
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "fields": {
        "data": {
          "description": "Encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in decrypting data »¹",
          "links": [
            "https://core.telegram.org/passport#decrypting-data"
          ]
        },
        "hash": {
          "description": "Data hash for data authentication as described in decrypting data »¹",
          "links": [
            "https://core.telegram.org/passport#decrypting-data"
          ]
        },
        "secret": {
          "description": "Secret, encrypted with the bot's public RSA key, required for data decryption as described in decrypting data »¹",
          "links": [
            "https://core.telegram.org/passport#decrypting-data"
          ]
        }
      }
    },
    "secureData": {
      "name": "secureData",
      "description": [
        "Secure passport¹ data, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#securedata"
      ],
      "fields": {
        "data": {
          "description": "Data",
          "links": null
        },
        "data_hash": {
          "description": "Data hash",
          "links": null
        },
        "secret": {
          "description": "Secret",
          "links": null
        }
      }
    },
    "secureFile": {
      "name": "secureFile",
      "description": [
        "Secure passport¹ file, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#inputsecurefile"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "date": {
          "description": "Date of upload",
          "links": null
        },
        "dc_id": {
          "description": "DC ID",
          "links": null
        },
        "file_hash": {
          "description": "File hash",
          "links": null
        },
        "id": {
          "description": "ID",
          "links": null
        },
        "secret": {
          "description": "Secret",
          "links": null
        },
        "size": {
          "description": "File size",
          "links": null
        }
      }
    },
    "secureFileEmpty": {
      "name": "secureFileEmpty",
      "description": [
        "Empty constructor"
      ]
    },
    "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000": {
      "name": "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000",
      "description": [
        "PBKDF2 with SHA512 and 100000 iterations KDF algo"
      ],
      "fields": {
        "salt": {
          "description": "Salt",
          "links": null
        }
      }
    },
    "securePasswordKdfAlgoSHA512": {
      "name": "securePasswordKdfAlgoSHA512",
      "description": [
        "SHA512 KDF algo"
      ],
      "fields": {
        "salt": {
          "description": "Salt",
          "links": null
        }
      }
    },
    "securePasswordKdfAlgoUnknown": {
      "name": "securePasswordKdfAlgoUnknown",
      "description": [
        "Unknown KDF algo (most likely the client has to be updated)"
      ]
    },
    "securePlainEmail": {
      "name": "securePlainEmail",
      "description": [
        "Email address to use in telegram passport¹: it must be verified, first »²."
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#secureplaindata"
      ],
      "fields": {
        "email": {
          "description": "Email address",
          "links": null
        }
      }
    },
    "securePlainPhone": {
      "name": "securePlainPhone",
      "description": [
        "Phone number to use in telegram passport¹: it must be verified, first »²."
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#secureplaindata"
      ],
      "fields": {
        "phone": {
          "description": "Phone number",
          "links": null
        }
      }
    },
    "secureRequiredType": {
      "name": "secureRequiredType",
      "description": [
        "Required type"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "native_names": {
          "description": "Native names",
          "links": null
        },
        "selfie_required": {
          "description": "Is a selfie required",
          "links": null
        },
        "translation_required": {
          "description": "Is a translation required",
          "links": null
        },
        "type": {
          "description": "Secure value type",
          "links": null
        }
      }
    },
    "secureRequiredTypeOneOf": {
      "name": "secureRequiredTypeOneOf",
      "description": [
        "One of"
      ],
      "fields": {
        "types": {
          "description": "Secure required value types",
          "links": null
        }
      }
    },
    "secureSecretSettings": {
      "name": "secureSecretSettings",
      "description": [
        "Secure settings"
      ],
      "fields": {
        "secure_algo": {
          "description": "Secure KDF algo",
          "links": null
        },
        "secure_secret": {
          "description": "Secure secret",
          "links": null
        },
        "secure_secret_id": {
          "description": "Secret ID",
          "links": null
        }
      }
    },
    "secureValue": {
      "name": "secureValue",
      "description": [
        "Secure value"
      ],
      "fields": {
        "data": {
          "description": "Encrypted Telegram Passport¹ element data",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "files": {
          "description": "Array of encrypted passport¹ files with photos the of the documents",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "front_side": {
          "description": "Encrypted passport¹ file with the front side of the document",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "hash": {
          "description": "Data hash",
          "links": null
        },
        "plain_data": {
          "description": "Plaintext verified passport¹ data",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "reverse_side": {
          "description": "Encrypted passport¹ file with the reverse side of the document",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "selfie": {
          "description": "Encrypted passport¹ file with a selfie of the user holding the document",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "translation": {
          "description": "Array of encrypted passport¹ files with translated versions of the provided documents",
          "links": [
            "https://core.telegram.org/passport"
          ]
        },
        "type": {
          "description": "Secure passport¹ value type",
          "links": [
            "https://core.telegram.org/passport"
          ]
        }
      }
    },
    "secureValueError": {
      "name": "secureValueError",
      "description": [
        "Secure value error"
      ],
      "fields": {
        "hash": {
          "description": "Hash",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "Type of element which has the issue",
          "links": null
        }
      }
    },
    "secureValueErrorData": {
      "name": "secureValueErrorData",
      "description": [
        "Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes."
      ],
      "fields": {
        "data_hash": {
          "description": "Data hash",
          "links": null
        },
        "field": {
          "description": "Name of the data field which has the error",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "The section of the user's Telegram Passport which has the error, one of secureValueTypePersonalDetails¹, secureValueTypePassport², secureValueTypeDriverLicense³, secureValueTypeIdentityCard⁴, secureValueTypeInternalPassport⁵, secureValueTypeAddress⁶",
          "links": [
            "https://core.telegram.org/constructor/secureValueTypePersonalDetails",
            "https://core.telegram.org/constructor/secureValueTypePassport",
            "https://core.telegram.org/constructor/secureValueTypeDriverLicense",
            "https://core.telegram.org/constructor/secureValueTypeIdentityCard",
            "https://core.telegram.org/constructor/secureValueTypeInternalPassport",
            "https://core.telegram.org/constructor/secureValueTypeAddress"
          ]
        }
      }
    },
    "secureValueErrorFile": {
      "name": "secureValueErrorFile",
      "description": [
        "Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes."
      ],
      "fields": {
        "file_hash": {
          "description": "File hash",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "One of secureValueTypeUtilityBill¹, secureValueTypeBankStatement², secureValueTypeRentalAgreement³, secureValueTypePassportRegistration⁴, secureValueTypeTemporaryRegistration⁵",
          "links": [
            "https://core.telegram.org/constructor/secureValueTypeUtilityBill",
            "https://core.telegram.org/constructor/secureValueTypeBankStatement",
            "https://core.telegram.org/constructor/secureValueTypeRentalAgreement",
            "https://core.telegram.org/constructor/secureValueTypePassportRegistration",
            "https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration"
          ]
        }
      }
    },
    "secureValueErrorFiles": {
      "name": "secureValueErrorFiles",
      "description": [
        "Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes."
      ],
      "fields": {
        "file_hash": {
          "description": "File hash",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "One of secureValueTypeUtilityBill¹, secureValueTypeBankStatement², secureValueTypeRentalAgreement³, secureValueTypePassportRegistration⁴, secureValueTypeTemporaryRegistration⁵",
          "links": [
            "https://core.telegram.org/constructor/secureValueTypeUtilityBill",
            "https://core.telegram.org/constructor/secureValueTypeBankStatement",
            "https://core.telegram.org/constructor/secureValueTypeRentalAgreement",
            "https://core.telegram.org/constructor/secureValueTypePassportRegistration",
            "https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration"
          ]
        }
      }
    },
    "secureValueErrorFrontSide": {
      "name": "secureValueErrorFrontSide",
      "description": [
        "Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes."
      ],
      "fields": {
        "file_hash": {
          "description": "File hash",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "One of secureValueTypePassport¹, secureValueTypeDriverLicense², secureValueTypeIdentityCard³, secureValueTypeInternalPassport⁴",
          "links": [
            "https://core.telegram.org/constructor/secureValueTypePassport",
            "https://core.telegram.org/constructor/secureValueTypeDriverLicense",
            "https://core.telegram.org/constructor/secureValueTypeIdentityCard",
            "https://core.telegram.org/constructor/secureValueTypeInternalPassport"
          ]
        }
      }
    },
    "secureValueErrorReverseSide": {
      "name": "secureValueErrorReverseSide",
      "description": [
        "Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes."
      ],
      "fields": {
        "file_hash": {
          "description": "File hash",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "One of secureValueTypeDriverLicense¹, secureValueTypeIdentityCard²",
          "links": [
            "https://core.telegram.org/constructor/secureValueTypeDriverLicense",
            "https://core.telegram.org/constructor/secureValueTypeIdentityCard"
          ]
        }
      }
    },
    "secureValueErrorSelfie": {
      "name": "secureValueErrorSelfie",
      "description": [
        "Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes."
      ],
      "fields": {
        "file_hash": {
          "description": "File hash",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "One of secureValueTypePassport¹, secureValueTypeDriverLicense², secureValueTypeIdentityCard³, secureValueTypeInternalPassport⁴",
          "links": [
            "https://core.telegram.org/constructor/secureValueTypePassport",
            "https://core.telegram.org/constructor/secureValueTypeDriverLicense",
            "https://core.telegram.org/constructor/secureValueTypeIdentityCard",
            "https://core.telegram.org/constructor/secureValueTypeInternalPassport"
          ]
        }
      }
    },
    "secureValueErrorTranslationFile": {
      "name": "secureValueErrorTranslationFile",
      "description": [
        "Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes."
      ],
      "fields": {
        "file_hash": {
          "description": "File hash",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "One of secureValueTypePersonalDetails¹, secureValueTypePassport², secureValueTypeDriverLicense³, secureValueTypeIdentityCard⁴, secureValueTypeInternalPassport⁵, secureValueTypeUtilityBill⁶, secureValueTypeBankStatement⁷, secureValueTypeRentalAgreement⁸, secureValueTypePassportRegistration⁹, secureValueTypeTemporaryRegistration¹⁰",
          "links": [
            "https://core.telegram.org/constructor/secureValueTypePersonalDetails",
            "https://core.telegram.org/constructor/secureValueTypePassport",
            "https://core.telegram.org/constructor/secureValueTypeDriverLicense",
            "https://core.telegram.org/constructor/secureValueTypeIdentityCard",
            "https://core.telegram.org/constructor/secureValueTypeInternalPassport",
            "https://core.telegram.org/constructor/secureValueTypeUtilityBill",
            "https://core.telegram.org/constructor/secureValueTypeBankStatement",
            "https://core.telegram.org/constructor/secureValueTypeRentalAgreement",
            "https://core.telegram.org/constructor/secureValueTypePassportRegistration",
            "https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration"
          ]
        }
      }
    },
    "secureValueErrorTranslationFiles": {
      "name": "secureValueErrorTranslationFiles",
      "description": [
        "Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes."
      ],
      "fields": {
        "file_hash": {
          "description": "Hash",
          "links": null
        },
        "text": {
          "description": "Error message",
          "links": null
        },
        "type": {
          "description": "One of secureValueTypePersonalDetails¹, secureValueTypePassport², secureValueTypeDriverLicense³, secureValueTypeIdentityCard⁴, secureValueTypeInternalPassport⁵, secureValueTypeUtilityBill⁶, secureValueTypeBankStatement⁷, secureValueTypeRentalAgreement⁸, secureValueTypePassportRegistration⁹, secureValueTypeTemporaryRegistration¹⁰",
          "links": [
            "https://core.telegram.org/constructor/secureValueTypePersonalDetails",
            "https://core.telegram.org/constructor/secureValueTypePassport",
            "https://core.telegram.org/constructor/secureValueTypeDriverLicense",
            "https://core.telegram.org/constructor/secureValueTypeIdentityCard",
            "https://core.telegram.org/constructor/secureValueTypeInternalPassport",
            "https://core.telegram.org/constructor/secureValueTypeUtilityBill",
            "https://core.telegram.org/constructor/secureValueTypeBankStatement",
            "https://core.telegram.org/constructor/secureValueTypeRentalAgreement",
            "https://core.telegram.org/constructor/secureValueTypePassportRegistration",
            "https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration"
          ]
        }
      }
    },
    "secureValueHash": {
      "name": "secureValueHash",
      "description": [
        "Secure value hash"
      ],
      "fields": {
        "hash": {
          "description": "Hash",
          "links": null
        },
        "type": {
          "description": "Secure value type",
          "links": null
        }
      }
    },
    "secureValueTypeAddress": {
      "name": "secureValueTypeAddress",
      "description": [
        "Address"
      ]
    },
    "secureValueTypeBankStatement": {
      "name": "secureValueTypeBankStatement",
      "description": [
        "Bank statement"
      ]
    },
    "secureValueTypeDriverLicense": {
      "name": "secureValueTypeDriverLicense",
      "description": [
        "Driver's license"
      ]
    },
    "secureValueTypeEmail": {
      "name": "secureValueTypeEmail",
      "description": [
        "Email"
      ]
    },
    "secureValueTypeIdentityCard": {
      "name": "secureValueTypeIdentityCard",
      "description": [
        "Identity card"
      ]
    },
    "secureValueTypeInternalPassport": {
      "name": "secureValueTypeInternalPassport",
      "description": [
        "Internal passport¹"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ]
    },
    "secureValueTypePassport": {
      "name": "secureValueTypePassport",
      "description": [
        "Passport"
      ]
    },
    "secureValueTypePassportRegistration": {
      "name": "secureValueTypePassportRegistration",
      "description": [
        "Internal registration passport¹"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ]
    },
    "secureValueTypePersonalDetails": {
      "name": "secureValueTypePersonalDetails",
      "description": [
        "Personal details"
      ]
    },
    "secureValueTypePhone": {
      "name": "secureValueTypePhone",
      "description": [
        "Phone"
      ]
    },
    "secureValueTypeRentalAgreement": {
      "name": "secureValueTypeRentalAgreement",
      "description": [
        "Rental agreement"
      ]
    },
    "secureValueTypeTemporaryRegistration": {
      "name": "secureValueTypeTemporaryRegistration",
      "description": [
        "Temporary registration"
      ]
    },
    "secureValueTypeUtilityBill": {
      "name": "secureValueTypeUtilityBill",
      "description": [
        "Utility bill"
      ]
    },
    "sendMessageCancelAction": {
      "name": "sendMessageCancelAction",
      "description": [
        "Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload."
      ]
    },
    "sendMessageChooseContactAction": {
      "name": "sendMessageChooseContactAction",
      "description": [
        "User is selecting a contact to share."
      ]
    },
    "sendMessageGamePlayAction": {
      "name": "sendMessageGamePlayAction",
      "description": [
        "User is playing a game"
      ]
    },
    "sendMessageGeoLocationAction": {
      "name": "sendMessageGeoLocationAction",
      "description": [
        "User is selecting a location to share."
      ]
    },
    "sendMessageRecordAudioAction": {
      "name": "sendMessageRecordAudioAction",
      "description": [
        "User is recording a voice message."
      ]
    },
    "sendMessageRecordRoundAction": {
      "name": "sendMessageRecordRoundAction",
      "description": [
        "User is recording a round video to share"
      ]
    },
    "sendMessageRecordVideoAction": {
      "name": "sendMessageRecordVideoAction",
      "description": [
        "User is recording a video."
      ]
    },
    "sendMessageTypingAction": {
      "name": "sendMessageTypingAction",
      "description": [
        "User is typing."
      ]
    },
    "sendMessageUploadAudioAction": {
      "name": "sendMessageUploadAudioAction",
      "description": [
        "User is uploading a voice message."
      ],
      "fields": {
        "progress": {
          "description": "Progress percentage",
          "links": null
        }
      }
    },
    "sendMessageUploadDocumentAction": {
      "name": "sendMessageUploadDocumentAction",
      "description": [
        "User is uploading a file."
      ],
      "fields": {
        "progress": {
          "description": "Progress percentage",
          "links": null
        }
      }
    },
    "sendMessageUploadPhotoAction": {
      "name": "sendMessageUploadPhotoAction",
      "description": [
        "User is uploading a photo."
      ],
      "fields": {
        "progress": {
          "description": "Progress percentage",
          "links": null
        }
      }
    },
    "sendMessageUploadRoundAction": {
      "name": "sendMessageUploadRoundAction",
      "description": [
        "User is uploading a round video"
      ],
      "fields": {
        "progress": {
          "description": "Progress percentage",
          "links": null
        }
      }
    },
    "sendMessageUploadVideoAction": {
      "name": "sendMessageUploadVideoAction",
      "description": [
        "User is uploading a video."
      ],
      "fields": {
        "progress": {
          "description": "Progress percentage",
          "links": null
        }
      }
    },
    "shippingOption": {
      "name": "shippingOption",
      "description": [
        "Shipping option"
      ],
      "fields": {
        "id": {
          "description": "Option ID",
          "links": null
        },
        "prices": {
          "description": "List of price portions",
          "links": null
        },
        "title": {
          "description": "Title",
          "links": null
        }
      }
    },
    "stats.broadcastStats": {
      "name": "stats.broadcastStats",
      "description": [
        "Channel statistics¹."
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "fields": {
        "enabled_notifications": {
          "description": "Percentage of subscribers with enabled notifications",
          "links": null
        },
        "followers": {
          "description": "Follower count change for period in consideration",
          "links": null
        },
        "followers_graph": {
          "description": "Followers growth graph (relative subscriber count)",
          "links": null
        },
        "growth_graph": {
          "description": "Channel growth graph (absolute subscriber count)",
          "links": null
        },
        "interactions_graph": {
          "description": "Interactions graph (absolute)",
          "links": null
        },
        "iv_interactions_graph": {
          "description": "IV interactions graph (absolute)",
          "links": null
        },
        "languages_graph": {
          "description": "Subscriber language graph (piechart)",
          "links": null
        },
        "mute_graph": {
          "description": "Muted users graph (relative)",
          "links": null
        },
        "new_followers_by_source_graph": {
          "description": "New followers by source graph (absolute)",
          "links": null
        },
        "period": {
          "description": "Period in consideration",
          "links": null
        },
        "recent_message_interactions": {
          "description": "Recent message interactions",
          "links": null
        },
        "shares_per_post": {
          "description": "total_viewcount/postcount, for posts posted during the period in consideration (views_per_post). Note that in this case, current refers to the period in consideration (min_date till max_date), and prev refers to the previous period ((min_date - (max_date - min_date)) till min_date)",
          "links": null
        },
        "top_hours_graph": {
          "description": "Views per hour graph (absolute)",
          "links": null
        },
        "views_by_source_graph": {
          "description": "Views by source graph (absolute)",
          "links": null
        },
        "views_per_post": {
          "description": "total_viewcount/postcount, for posts posted during the period in consideration (views_per_post). Note that in this case, current refers to the period in consideration (min_date till max_date), and prev refers to the previous period ((min_date - (max_date - min_date)) till min_date).",
          "links": null
        }
      }
    },
    "stats.megagroupStats": {
      "name": "stats.megagroupStats",
      "description": [
        "Supergroup statistics¹"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "fields": {
        "actions_graph": {
          "description": "Group activity graph (deleted, modified messages, blocked users)",
          "links": null
        },
        "growth_graph": {
          "description": "Supergroup growth graph (absolute subscriber count)",
          "links": null
        },
        "languages_graph": {
          "description": "Subscriber language graph (piechart)",
          "links": null
        },
        "members": {
          "description": "Member count change for period in consideration",
          "links": null
        },
        "members_graph": {
          "description": "Members growth (relative subscriber count)",
          "links": null
        },
        "messages": {
          "description": "Message number change for period in consideration",
          "links": null
        },
        "messages_graph": {
          "description": "Message activity graph (stacked bar graph, message type)",
          "links": null
        },
        "new_members_by_source_graph": {
          "description": "New members by source graph",
          "links": null
        },
        "period": {
          "description": "Period in consideration",
          "links": null
        },
        "posters": {
          "description": "Number of users that posted messages, for range in consideration",
          "links": null
        },
        "top_admins": {
          "description": "Info about most active group admins",
          "links": null
        },
        "top_hours_graph": {
          "description": "Activity per hour graph (absolute)",
          "links": null
        },
        "top_inviters": {
          "description": "Info about most active group inviters",
          "links": null
        },
        "top_posters": {
          "description": "Info about most active group members",
          "links": null
        },
        "users": {
          "description": "Info about users mentioned in statistics",
          "links": null
        },
        "viewers": {
          "description": "Number of users that viewed messages, for range in consideration",
          "links": null
        },
        "weekdays_graph": {
          "description": "Activity per day of week graph (absolute)",
          "links": null
        }
      }
    },
    "stats.messageStats": {
      "name": "stats.messageStats",
      "description": [
        "Message statistics"
      ],
      "fields": {
        "views_graph": {
          "description": "Message view graph",
          "links": null
        }
      }
    },
    "statsAbsValueAndPrev": {
      "name": "statsAbsValueAndPrev",
      "description": [
        "Statistics value couple; intial and final value for period of time currently in consideration"
      ],
      "fields": {
        "current": {
          "description": "Current value",
          "links": null
        },
        "previous": {
          "description": "Previous value",
          "links": null
        }
      }
    },
    "statsDateRangeDays": {
      "name": "statsDateRangeDays",
      "description": [
        "Channel statistics¹ date range"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "fields": {
        "max_date": {
          "description": "Final date",
          "links": null
        },
        "min_date": {
          "description": "Initial date",
          "links": null
        }
      }
    },
    "statsGraph": {
      "name": "statsGraph",
      "description": [
        "Channel statistics graph¹"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "json": {
          "description": "Statistics data",
          "links": null
        },
        "zoom_token": {
          "description": "Zoom token",
          "links": null
        }
      }
    },
    "statsGraphAsync": {
      "name": "statsGraphAsync",
      "description": [
        "This channel statistics graph¹ must be generated asynchronously using stats.loadAsyncGraph² to reduce server load"
      ],
      "links": [
        "https://core.telegram.org/api/stats",
        "https://core.telegram.org/method/stats.loadAsyncGraph"
      ],
      "fields": {
        "token": {
          "description": "Token to use for fetching the async graph",
          "links": null
        }
      }
    },
    "statsGraphError": {
      "name": "statsGraphError",
      "description": [
        "An error occurred while generating the statistics graph¹"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "fields": {
        "error": {
          "description": "The error",
          "links": null
        }
      }
    },
    "statsGroupTopAdmin": {
      "name": "statsGroupTopAdmin",
      "description": [
        "Information about an active admin in a supergroup"
      ],
      "fields": {
        "banned": {
          "description": "Number of banned users for statistics¹ period in consideration",
          "links": [
            "https://core.telegram.org/api/stats"
          ]
        },
        "deleted": {
          "description": "Number of deleted messages for statistics¹ period in consideration",
          "links": [
            "https://core.telegram.org/api/stats"
          ]
        },
        "kicked": {
          "description": "Number of kicked users for statistics¹ period in consideration",
          "links": [
            "https://core.telegram.org/api/stats"
          ]
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "statsGroupTopInviter": {
      "name": "statsGroupTopInviter",
      "description": [
        "Information about an active supergroup inviter"
      ],
      "fields": {
        "invitations": {
          "description": "Number of invitations for statistics¹ period in consideration",
          "links": [
            "https://core.telegram.org/api/stats"
          ]
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "statsGroupTopPoster": {
      "name": "statsGroupTopPoster",
      "description": [
        "Information about an active user in a supergroup"
      ],
      "fields": {
        "avg_chars": {
          "description": "Average number of characters per message",
          "links": null
        },
        "messages": {
          "description": "Number of messages for statistics¹ period in consideration",
          "links": [
            "https://core.telegram.org/api/stats"
          ]
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "statsPercentValue": {
      "name": "statsPercentValue",
      "description": [
        "Channel statistics percentage¹.",
        "Compute the percentage simply by doing part * total / 100"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "fields": {
        "part": {
          "description": "Partial value",
          "links": null
        },
        "total": {
          "description": "Total value",
          "links": null
        }
      }
    },
    "statsURL": {
      "name": "statsURL",
      "description": [
        "URL with chat statistics"
      ],
      "fields": {
        "url": {
          "description": "Chat statistics",
          "links": null
        }
      }
    },
    "stickerPack": {
      "name": "stickerPack",
      "description": [
        "A stickerpack is a group of stickers associated to the same emoji.",
        "It is not a sticker pack the way it is usually intended, you may be looking for a StickerSet¹."
      ],
      "links": [
        "https://core.telegram.org/type/StickerSet"
      ],
      "fields": {
        "documents": {
          "description": "Stickers",
          "links": null
        },
        "emoticon": {
          "description": "Emoji",
          "links": null
        }
      }
    },
    "stickerSet": {
      "name": "stickerSet",
      "description": [
        "Represents a stickerset (stickerpack)"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash of stickerset",
          "links": null
        },
        "animated": {
          "description": "Is this an animated stickerpack",
          "links": null
        },
        "archived": {
          "description": "Whether this stickerset was archived (due to too many saved stickers in the current account)",
          "links": null
        },
        "count": {
          "description": "Number of stickers in pack",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "hash": {
          "description": "Hash",
          "links": null
        },
        "id": {
          "description": "ID of the stickerset",
          "links": null
        },
        "installed_date": {
          "description": "When was this stickerset installed",
          "links": null
        },
        "masks": {
          "description": "Is this a mask stickerset",
          "links": null
        },
        "official": {
          "description": "Is this stickerset official",
          "links": null
        },
        "short_name": {
          "description": "Short name of stickerset to use in tg://addstickers?set=short_name",
          "links": null
        },
        "thumb": {
          "description": "Thumbnail for stickerset",
          "links": null
        },
        "thumb_dc_id": {
          "description": "DC ID of thumbnail",
          "links": null
        },
        "title": {
          "description": "Title of stickerset",
          "links": null
        }
      }
    },
    "stickerSetCovered": {
      "name": "stickerSetCovered",
      "description": [
        "Stickerset, with a specific sticker as preview"
      ],
      "fields": {
        "cover": {
          "description": "Preview",
          "links": null
        },
        "set": {
          "description": "Stickerset",
          "links": null
        }
      }
    },
    "stickerSetMultiCovered": {
      "name": "stickerSetMultiCovered",
      "description": [
        "Stickerset, with a specific stickers as preview"
      ],
      "fields": {
        "covers": {
          "description": "Preview stickers",
          "links": null
        },
        "set": {
          "description": "Stickerset",
          "links": null
        }
      }
    },
    "storage.fileGif": {
      "name": "storage.fileGif",
      "description": [
        "GIF image. MIME type: image/gif."
      ]
    },
    "storage.fileJpeg": {
      "name": "storage.fileJpeg",
      "description": [
        "JPEG image. MIME type: image/jpeg."
      ]
    },
    "storage.fileMov": {
      "name": "storage.fileMov",
      "description": [
        "Quicktime video. MIME type: video/quicktime."
      ]
    },
    "storage.fileMp3": {
      "name": "storage.fileMp3",
      "description": [
        "Mp3 audio. MIME type: audio/mpeg."
      ]
    },
    "storage.fileMp4": {
      "name": "storage.fileMp4",
      "description": [
        "MPEG-4 video. MIME type: video/mp4."
      ]
    },
    "storage.filePartial": {
      "name": "storage.filePartial",
      "description": [
        "Part of a bigger file."
      ]
    },
    "storage.filePdf": {
      "name": "storage.filePdf",
      "description": [
        "PDF document image. MIME type: application/pdf."
      ]
    },
    "storage.filePng": {
      "name": "storage.filePng",
      "description": [
        "PNG image. MIME type: image/png."
      ]
    },
    "storage.fileUnknown": {
      "name": "storage.fileUnknown",
      "description": [
        "Unknown type."
      ]
    },
    "storage.fileWebp": {
      "name": "storage.fileWebp",
      "description": [
        "WEBP image. MIME type: image/webp."
      ]
    },
    "textAnchor": {
      "name": "textAnchor",
      "description": [
        "Text linking to another section of the page"
      ],
      "fields": {
        "name": {
          "description": "Section name",
          "links": null
        },
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textBold": {
      "name": "textBold",
      "description": [
        "Bold text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textConcat": {
      "name": "textConcat",
      "description": [
        "Concatenation of rich texts"
      ],
      "fields": {
        "texts": {
          "description": "Concatenated rich texts",
          "links": null
        }
      }
    },
    "textEmail": {
      "name": "textEmail",
      "description": [
        "Rich text email link"
      ],
      "fields": {
        "email": {
          "description": "Email address",
          "links": null
        },
        "text": {
          "description": "Link text",
          "links": null
        }
      }
    },
    "textEmpty": {
      "name": "textEmpty",
      "description": [
        "Empty rich text element"
      ]
    },
    "textFixed": {
      "name": "textFixed",
      "description": [
        "fixed-width rich text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textImage": {
      "name": "textImage",
      "description": [
        "Inline image"
      ],
      "fields": {
        "document_id": {
          "description": "Document ID",
          "links": null
        },
        "h": {
          "description": "Height",
          "links": null
        },
        "w": {
          "description": "Width",
          "links": null
        }
      }
    },
    "textItalic": {
      "name": "textItalic",
      "description": [
        "Italic text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textMarked": {
      "name": "textMarked",
      "description": [
        "Highlighted text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textPhone": {
      "name": "textPhone",
      "description": [
        "Rich text linked to a phone number"
      ],
      "fields": {
        "phone": {
          "description": "Phone number",
          "links": null
        },
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textPlain": {
      "name": "textPlain",
      "description": [
        "Plain text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textStrike": {
      "name": "textStrike",
      "description": [
        "Strikethrough text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textSubscript": {
      "name": "textSubscript",
      "description": [
        "Subscript text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textSuperscript": {
      "name": "textSuperscript",
      "description": [
        "Superscript text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textUnderline": {
      "name": "textUnderline",
      "description": [
        "Underlined text"
      ],
      "fields": {
        "text": {
          "description": "Text",
          "links": null
        }
      }
    },
    "textUrl": {
      "name": "textUrl",
      "description": [
        "Link"
      ],
      "fields": {
        "text": {
          "description": "Text of link",
          "links": null
        },
        "url": {
          "description": "Webpage HTTP URL",
          "links": null
        },
        "webpage_id": {
          "description": "If a preview was already generated for the page, the page ID",
          "links": null
        }
      }
    },
    "theme": {
      "name": "theme",
      "description": [
        "Theme"
      ],
      "fields": {
        "access_hash": {
          "description": "Theme access hash",
          "links": null
        },
        "creator": {
          "description": "Whether the current user is the creator of this theme",
          "links": null
        },
        "default": {
          "description": "Whether this is the default theme",
          "links": null
        },
        "document": {
          "description": "Theme",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Theme ID",
          "links": null
        },
        "installs_count": {
          "description": "Installation count",
          "links": null
        },
        "settings": {
          "description": "Theme settings",
          "links": null
        },
        "slug": {
          "description": "Unique theme ID",
          "links": null
        },
        "title": {
          "description": "Theme name",
          "links": null
        }
      }
    },
    "themeSettings": {
      "name": "themeSettings",
      "description": [
        "Theme settings"
      ],
      "fields": {
        "accent_color": {
          "description": "Accent color, RGB24 format",
          "links": null
        },
        "base_theme": {
          "description": "Base theme",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message_bottom_color": {
          "description": "Message gradient color (bottom), RGB24 format",
          "links": null
        },
        "message_top_color": {
          "description": "Message gradient color (top), RGB24 format",
          "links": null
        },
        "wallpaper": {
          "description": "Wallpaper",
          "links": null
        }
      }
    },
    "topPeer": {
      "name": "topPeer",
      "description": [
        "Top peer"
      ],
      "fields": {
        "peer": {
          "description": "Peer",
          "links": null
        },
        "rating": {
          "description": "Rating as computed in top peer rating »¹",
          "links": [
            "https://core.telegram.org/api/top-rating"
          ]
        }
      }
    },
    "topPeerCategoryBotsInline": {
      "name": "topPeerCategoryBotsInline",
      "description": [
        "Most used inline bots"
      ]
    },
    "topPeerCategoryBotsPM": {
      "name": "topPeerCategoryBotsPM",
      "description": [
        "Most used bots"
      ]
    },
    "topPeerCategoryChannels": {
      "name": "topPeerCategoryChannels",
      "description": [
        "Most frequently visited channels"
      ]
    },
    "topPeerCategoryCorrespondents": {
      "name": "topPeerCategoryCorrespondents",
      "description": [
        "Users we've chatted most frequently with"
      ]
    },
    "topPeerCategoryForwardChats": {
      "name": "topPeerCategoryForwardChats",
      "description": [
        "Chats to which the users often forwards messages to"
      ]
    },
    "topPeerCategoryForwardUsers": {
      "name": "topPeerCategoryForwardUsers",
      "description": [
        "Users to which the users often forwards messages to"
      ]
    },
    "topPeerCategoryGroups": {
      "name": "topPeerCategoryGroups",
      "description": [
        "Often-opened groups and supergroups"
      ]
    },
    "topPeerCategoryPeers": {
      "name": "topPeerCategoryPeers",
      "description": [
        "Top peer category"
      ],
      "fields": {
        "category": {
          "description": "Top peer category of peers",
          "links": null
        },
        "count": {
          "description": "Count of peers",
          "links": null
        },
        "peers": {
          "description": "Peers",
          "links": null
        }
      }
    },
    "topPeerCategoryPhoneCalls": {
      "name": "topPeerCategoryPhoneCalls",
      "description": [
        "Most frequently called users"
      ]
    },
    "true": {
      "name": "true",
      "description": [
        "See predefined identifiers¹."
      ],
      "links": [
        "https://core.telegram.org/mtproto/TL-formal#predefined-identifiers"
      ]
    },
    "updateBotCallbackQuery": {
      "name": "updateBotCallbackQuery",
      "description": [
        "A callback button was pressed, and the button data was sent to the bot that created the button"
      ],
      "fields": {
        "chat_instance": {
          "description": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.",
          "links": null
        },
        "data": {
          "description": "Callback data",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "game_short_name": {
          "description": "Short name of a Game to be returned, serves as the unique identifier for the game",
          "links": null
        },
        "msg_id": {
          "description": "Message ID",
          "links": null
        },
        "peer": {
          "description": "Chat where the inline keyboard was sent",
          "links": null
        },
        "query_id": {
          "description": "Query ID",
          "links": null
        },
        "user_id": {
          "description": "ID of the user that pressed the button",
          "links": null
        }
      }
    },
    "updateBotInlineQuery": {
      "name": "updateBotInlineQuery",
      "description": [
        "An incoming inline query"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo": {
          "description": "Attached geolocation",
          "links": null
        },
        "offset": {
          "description": "Offset to navigate through results",
          "links": null
        },
        "query": {
          "description": "Text of query",
          "links": null
        },
        "query_id": {
          "description": "Query ID",
          "links": null
        },
        "user_id": {
          "description": "User that sent the query",
          "links": null
        }
      }
    },
    "updateBotInlineSend": {
      "name": "updateBotInlineSend",
      "description": [
        "The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting¹ for details on how to enable these updates for your bot."
      ],
      "links": [
        "https://core.telegram.org/bots/inline#collecting-feedback"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo": {
          "description": "Optional. Sender location, only for bots that require user location",
          "links": null
        },
        "id": {
          "description": "The unique identifier for the result that was chosen",
          "links": null
        },
        "msg_id": {
          "description": "Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.",
          "links": null
        },
        "query": {
          "description": "The query that was used to obtain the result",
          "links": null
        },
        "user_id": {
          "description": "The user that chose the result",
          "links": null
        }
      }
    },
    "updateBotPrecheckoutQuery": {
      "name": "updateBotPrecheckoutQuery",
      "description": [
        "This object contains information about an incoming pre-checkout query."
      ],
      "fields": {
        "currency": {
          "description": "Three-letter ISO 4217 currency¹ code",
          "links": [
            "https://core.telegram.org/bots/payments#supported-currencies"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "info": {
          "description": "Order info provided by the user",
          "links": null
        },
        "payload": {
          "description": "Bot specified invoice payload",
          "links": null
        },
        "query_id": {
          "description": "Unique query identifier",
          "links": null
        },
        "shipping_option_id": {
          "description": "Identifier of the shipping option chosen by the user",
          "links": null
        },
        "total_amount": {
          "description": "Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json¹, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
          "links": [
            "https://core.telegram.org/bots/payments/currencies.json"
          ]
        },
        "user_id": {
          "description": "User who sent the query",
          "links": null
        }
      }
    },
    "updateBotShippingQuery": {
      "name": "updateBotShippingQuery",
      "description": [
        "This object contains information about an incoming shipping query."
      ],
      "fields": {
        "payload": {
          "description": "Bot specified invoice payload",
          "links": null
        },
        "query_id": {
          "description": "Unique query identifier",
          "links": null
        },
        "shipping_address": {
          "description": "User specified shipping address",
          "links": null
        },
        "user_id": {
          "description": "User who sent the query",
          "links": null
        }
      }
    },
    "updateBotWebhookJSON": {
      "name": "updateBotWebhookJSON",
      "description": [
        "A new incoming event; for bots only"
      ],
      "fields": {
        "data": {
          "description": "The event",
          "links": null
        }
      }
    },
    "updateBotWebhookJSONQuery": {
      "name": "updateBotWebhookJSONQuery",
      "description": [
        "A new incoming query; for bots only"
      ],
      "fields": {
        "data": {
          "description": "Query data",
          "links": null
        },
        "query_id": {
          "description": "Query identifier",
          "links": null
        },
        "timeout": {
          "description": "Query timeout",
          "links": null
        }
      }
    },
    "updateChannel": {
      "name": "updateChannel",
      "description": [
        "A new channel is available"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel ID",
          "links": null
        }
      }
    },
    "updateChannelAvailableMessages": {
      "name": "updateChannelAvailableMessages",
      "description": [
        "The history of a channel/supergroup¹ was hidden."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "available_min_id": {
          "description": "Identifier of a maximum unavailable message in a channel due to hidden history.",
          "links": null
        },
        "channel_id": {
          "description": "Channel/supergroup ID",
          "links": null
        }
      }
    },
    "updateChannelMessageForwards": {
      "name": "updateChannelMessageForwards",
      "description": [
        "The forward counter of a message in a channel has changed"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel ID",
          "links": null
        },
        "forwards": {
          "description": "New forward counter",
          "links": null
        },
        "id": {
          "description": "ID of the message",
          "links": null
        }
      }
    },
    "updateChannelMessageViews": {
      "name": "updateChannelMessageViews",
      "description": [
        "The view counter of a message in a channel has changed"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel ID",
          "links": null
        },
        "id": {
          "description": "ID of the message",
          "links": null
        },
        "views": {
          "description": "New view counter",
          "links": null
        }
      }
    },
    "updateChannelParticipant": {
      "name": "updateChannelParticipant",
      "description": [
        "A participant has left, joined, was banned or admined in a channel or supergroup¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel ID",
          "links": null
        },
        "date": {
          "description": "Date of the event",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "new_participant": {
          "description": "New participant status",
          "links": null
        },
        "prev_participant": {
          "description": "Previous participant status",
          "links": null
        },
        "qts": {
          "description": "PTS¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "user_id": {
          "description": "User in question",
          "links": null
        }
      }
    },
    "updateChannelReadMessagesContents": {
      "name": "updateChannelReadMessagesContents",
      "description": [
        "The specified channel/supergroup¹ messages were read"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel/supergroup¹ ID",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "messages": {
          "description": "IDs of messages that were read",
          "links": null
        }
      }
    },
    "updateChannelTooLong": {
      "name": "updateChannelTooLong",
      "description": [
        "There are new updates in the specified channel, the client must fetch them.",
        "If the difference is too long or if the channel isn't currently in the states, start fetching from the specified pts."
      ],
      "fields": {
        "channel_id": {
          "description": "The channel",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "pts": {
          "description": "The PTS¹.",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateChannelUserTyping": {
      "name": "updateChannelUserTyping",
      "description": [
        "A user is typing in a supergroup, channel¹ or message thread²"
      ],
      "links": [
        "https://core.telegram.org/api/channel",
        "https://core.telegram.org/api/threads"
      ],
      "fields": {
        "action": {
          "description": "Whether the user is typing, sending a media or doing something else",
          "links": null
        },
        "channel_id": {
          "description": "Channel ID",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "top_msg_id": {
          "description": "Thread ID¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "updateChannelWebPage": {
      "name": "updateChannelWebPage",
      "description": [
        "A webpage preview of a link in a channel/supergroup¹ message was generated"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel/supergroup¹ ID",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "webpage": {
          "description": "Generated webpage preview",
          "links": null
        }
      }
    },
    "updateChatDefaultBannedRights": {
      "name": "updateChatDefaultBannedRights",
      "description": [
        "Default banned rights in a normal chat¹ were updated"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "default_banned_rights": {
          "description": "New default banned rights",
          "links": null
        },
        "peer": {
          "description": "The chat",
          "links": null
        },
        "version": {
          "description": "Version",
          "links": null
        }
      }
    },
    "updateChatParticipantAdd": {
      "name": "updateChatParticipantAdd",
      "description": [
        "New group member."
      ],
      "fields": {
        "chat_id": {
          "description": "Group ID",
          "links": null
        },
        "date": {
          "description": "When was the participant added",
          "links": null
        },
        "inviter_id": {
          "description": "ID of the user, who added member to the group",
          "links": null
        },
        "user_id": {
          "description": "ID of the new member",
          "links": null
        },
        "version": {
          "description": "Chat version number",
          "links": null
        }
      }
    },
    "updateChatParticipantAdmin": {
      "name": "updateChatParticipantAdmin",
      "description": [
        "Admin permissions of a user in a legacy group¹ were changed"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        },
        "is_admin": {
          "description": "Whether the user was rendered admin",
          "links": null
        },
        "user_id": {
          "description": "ID of the (de)admined user",
          "links": null
        },
        "version": {
          "description": "Used in basic groups to reorder updates and make sure that all of them was received.",
          "links": null
        }
      }
    },
    "updateChatParticipantDelete": {
      "name": "updateChatParticipantDelete",
      "description": [
        "A member has left the group."
      ],
      "fields": {
        "chat_id": {
          "description": "Group ID",
          "links": null
        },
        "user_id": {
          "description": "ID of the user",
          "links": null
        },
        "version": {
          "description": "Used in basic groups to reorder updates and make sure that all of them was received.",
          "links": null
        }
      }
    },
    "updateChatParticipants": {
      "name": "updateChatParticipants",
      "description": [
        "Composition of chat participants changed."
      ],
      "fields": {
        "participants": {
          "description": "Updated chat participants",
          "links": null
        }
      }
    },
    "updateChatUserTyping": {
      "name": "updateChatUserTyping",
      "description": [
        "The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no repeated update received after 6 seconds, it should be considered that the user stopped doing whatever he's been doing."
      ],
      "fields": {
        "action": {
          "description": "Type of actionParameter added in Layer 17¹.",
          "links": [
            "https://core.telegram.org/api/layers#layer-17"
          ]
        },
        "chat_id": {
          "description": "Group id",
          "links": null
        },
        "user_id": {
          "description": "User id",
          "links": null
        }
      }
    },
    "updateConfig": {
      "name": "updateConfig",
      "description": [
        "The server-side configuration has changed; the client should re-fetch the config using help.getConfig¹"
      ],
      "links": [
        "https://core.telegram.org/method/help.getConfig"
      ]
    },
    "updateContactsReset": {
      "name": "updateContactsReset",
      "description": [
        "All contacts were deleted"
      ]
    },
    "updateDcOptions": {
      "name": "updateDcOptions",
      "description": [
        "Changes in the data center configuration options."
      ],
      "fields": {
        "dc_options": {
          "description": "New connection options",
          "links": null
        }
      }
    },
    "updateDeleteChannelMessages": {
      "name": "updateDeleteChannelMessages",
      "description": [
        "Some messages in a supergroup/channel¹ were deleted"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel ID",
          "links": null
        },
        "messages": {
          "description": "IDs of messages that were deleted",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateDeleteMessages": {
      "name": "updateDeleteMessages",
      "description": [
        "Messages were deleted."
      ],
      "fields": {
        "messages": {
          "description": "List of identifiers of deleted messages",
          "links": null
        },
        "pts": {
          "description": "New quality of actions in a message box",
          "links": null
        },
        "pts_count": {
          "description": "Number of generated events¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateDeleteScheduledMessages": {
      "name": "updateDeleteScheduledMessages",
      "description": [
        "Some scheduled messages¹ were deleted from the schedule queue of a chat"
      ],
      "links": [
        "https://core.telegram.org/api/scheduled-messages"
      ],
      "fields": {
        "messages": {
          "description": "Deleted scheduled messages",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        }
      }
    },
    "updateDialogFilter": {
      "name": "updateDialogFilter",
      "description": [
        "A new folder¹ was added"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ],
      "fields": {
        "filter": {
          "description": "Folder¹ info",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Folder¹ ID",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        }
      }
    },
    "updateDialogFilterOrder": {
      "name": "updateDialogFilterOrder",
      "description": [
        "New folder¹ order"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ],
      "fields": {
        "order": {
          "description": "Ordered folder IDs¹",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        }
      }
    },
    "updateDialogFilters": {
      "name": "updateDialogFilters",
      "description": [
        "Clients should update folder¹ info"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ]
    },
    "updateDialogPinned": {
      "name": "updateDialogPinned",
      "description": [
        "A dialog was pinned/unpinned"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "peer": {
          "description": "The dialog",
          "links": null
        },
        "pinned": {
          "description": "Whether the dialog was pinned",
          "links": null
        }
      }
    },
    "updateDialogUnreadMark": {
      "name": "updateDialogUnreadMark",
      "description": [
        "The manual unread mark of a chat was changed"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "The dialog",
          "links": null
        },
        "unread": {
          "description": "Was the chat marked or unmarked as read",
          "links": null
        }
      }
    },
    "updateDraftMessage": {
      "name": "updateDraftMessage",
      "description": [
        "Notifies a change of a message draft¹."
      ],
      "links": [
        "https://core.telegram.org/api/drafts"
      ],
      "fields": {
        "draft": {
          "description": "The draft",
          "links": null
        },
        "peer": {
          "description": "The peer to which the draft is associated",
          "links": null
        }
      }
    },
    "updateEditChannelMessage": {
      "name": "updateEditChannelMessage",
      "description": [
        "A message was edited in a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "message": {
          "description": "The new message",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateEditMessage": {
      "name": "updateEditMessage",
      "description": [
        "A message was edited"
      ],
      "fields": {
        "message": {
          "description": "The new edited message",
          "links": null
        },
        "pts": {
          "description": "PTS¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "PTS count¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateEncryptedChatTyping": {
      "name": "updateEncryptedChatTyping",
      "description": [
        "Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing."
      ],
      "fields": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        }
      }
    },
    "updateEncryptedMessagesRead": {
      "name": "updateEncryptedMessagesRead",
      "description": [
        "Communication history in an encrypted chat was marked as read."
      ],
      "fields": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        },
        "date": {
          "description": "Time when messages were read",
          "links": null
        },
        "max_date": {
          "description": "Maximum value of data for read messages",
          "links": null
        }
      }
    },
    "updateEncryption": {
      "name": "updateEncryption",
      "description": [
        "Change of state in an encrypted chat."
      ],
      "fields": {
        "chat": {
          "description": "Encrypted chat",
          "links": null
        },
        "date": {
          "description": "Date of change",
          "links": null
        }
      }
    },
    "updateFavedStickers": {
      "name": "updateFavedStickers",
      "description": [
        "The list of favorited stickers was changed, the client should call messages.getFavedStickers¹ to refetch the new list"
      ],
      "links": [
        "https://core.telegram.org/method/messages.getFavedStickers"
      ]
    },
    "updateFolderPeers": {
      "name": "updateFolderPeers",
      "description": [
        "The peer list of a peer folder¹ was updated"
      ],
      "links": [
        "https://core.telegram.org/api/folders#peer-folders"
      ],
      "fields": {
        "folder_peers": {
          "description": "New peer list",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateGeoLiveViewed": {
      "name": "updateGeoLiveViewed",
      "description": [
        "Live geoposition message was viewed"
      ],
      "fields": {
        "msg_id": {
          "description": "Message ID of geoposition message",
          "links": null
        },
        "peer": {
          "description": "The user that viewed the live geoposition",
          "links": null
        }
      }
    },
    "updateInlineBotCallbackQuery": {
      "name": "updateInlineBotCallbackQuery",
      "description": [
        "This notification is received by bots when a button is pressed"
      ],
      "fields": {
        "chat_instance": {
          "description": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.",
          "links": null
        },
        "data": {
          "description": "Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "game_short_name": {
          "description": "Short name of a Game to be returned, serves as the unique identifier for the game",
          "links": null
        },
        "msg_id": {
          "description": "ID of the inline message with the button",
          "links": null
        },
        "query_id": {
          "description": "Query ID",
          "links": null
        },
        "user_id": {
          "description": "ID of the user that pressed the button",
          "links": null
        }
      }
    },
    "updateLangPack": {
      "name": "updateLangPack",
      "description": [
        "Language pack updated"
      ],
      "fields": {
        "difference": {
          "description": "Changed strings",
          "links": null
        }
      }
    },
    "updateLangPackTooLong": {
      "name": "updateLangPackTooLong",
      "description": [
        "A language pack has changed, the client should manually fetch the changed strings using langpack.getDifference¹"
      ],
      "links": [
        "https://core.telegram.org/method/langpack.getDifference"
      ],
      "fields": {
        "lang_code": {
          "description": "Language code",
          "links": null
        }
      }
    },
    "updateLoginToken": {
      "name": "updateLoginToken",
      "description": [
        "A login token (for login via QR code) was accepted."
      ]
    },
    "updateMessageID": {
      "name": "updateMessageID",
      "description": [
        "Sent message with random_id client identifier was assigned an identifier."
      ],
      "fields": {
        "id": {
          "description": "id identifier of a respective Message¹",
          "links": [
            "https://core.telegram.org/type/Message"
          ]
        },
        "random_id": {
          "description": "Previuosly transferred client random_id identifier",
          "links": null
        }
      }
    },
    "updateMessagePoll": {
      "name": "updateMessagePoll",
      "description": [
        "The results of a poll have changed"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "poll": {
          "description": "If the server knows the client hasn't cached this poll yet, the poll itself",
          "links": null
        },
        "poll_id": {
          "description": "Poll ID",
          "links": null
        },
        "results": {
          "description": "New poll results",
          "links": null
        }
      }
    },
    "updateMessagePollVote": {
      "name": "updateMessagePollVote",
      "description": [
        "A specific user has voted in a poll"
      ],
      "fields": {
        "options": {
          "description": "Chosen option(s)",
          "links": null
        },
        "poll_id": {
          "description": "Poll ID",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "updateNewChannelMessage": {
      "name": "updateNewChannelMessage",
      "description": [
        "A new message was sent in a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "message": {
          "description": "New message",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateNewEncryptedMessage": {
      "name": "updateNewEncryptedMessage",
      "description": [
        "New encrypted message."
      ],
      "fields": {
        "message": {
          "description": "Message",
          "links": null
        },
        "qts": {
          "description": "New qts value",
          "links": null
        }
      }
    },
    "updateNewMessage": {
      "name": "updateNewMessage",
      "description": [
        "New message in a private chat or in a legacy group¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "message": {
          "description": "Message",
          "links": null
        },
        "pts": {
          "description": "New quantity of actions in a message box",
          "links": null
        },
        "pts_count": {
          "description": "Number of generated events",
          "links": null
        }
      }
    },
    "updateNewScheduledMessage": {
      "name": "updateNewScheduledMessage",
      "description": [
        "A message was added to the schedule queue of a chat¹"
      ],
      "links": [
        "https://core.telegram.org/api/scheduled-messages"
      ],
      "fields": {
        "message": {
          "description": "Message",
          "links": null
        }
      }
    },
    "updateNewStickerSet": {
      "name": "updateNewStickerSet",
      "description": [
        "A new stickerset was installed"
      ],
      "fields": {
        "stickerset": {
          "description": "The installed stickerset",
          "links": null
        }
      }
    },
    "updateNotifySettings": {
      "name": "updateNotifySettings",
      "description": [
        "Changes in notification settings."
      ],
      "fields": {
        "notify_settings": {
          "description": "New notification settings",
          "links": null
        },
        "peer": {
          "description": "Nofication source",
          "links": null
        }
      }
    },
    "updatePeerBlocked": {
      "name": "updatePeerBlocked",
      "description": [
        "A peer was blocked"
      ],
      "fields": {
        "blocked": {
          "description": "Whether the peer was blocked or unblocked",
          "links": null
        },
        "peer_id": {
          "description": "The blocked peer",
          "links": null
        }
      }
    },
    "updatePeerLocated": {
      "name": "updatePeerLocated",
      "description": [
        "List of peers near you was updated"
      ],
      "fields": {
        "peers": {
          "description": "Geolocated peer list update",
          "links": null
        }
      }
    },
    "updatePeerSettings": {
      "name": "updatePeerSettings",
      "description": [
        "Settings of a certain peer have changed"
      ],
      "fields": {
        "peer": {
          "description": "The peer",
          "links": null
        },
        "settings": {
          "description": "Associated peer settings",
          "links": null
        }
      }
    },
    "updatePhoneCall": {
      "name": "updatePhoneCall",
      "description": [
        "An incoming phone call"
      ],
      "fields": {
        "phone_call": {
          "description": "Phone call",
          "links": null
        }
      }
    },
    "updatePhoneCallSignalingData": {
      "name": "updatePhoneCallSignalingData",
      "description": [
        "Incoming phone call signaling payload"
      ],
      "fields": {
        "data": {
          "description": "Signaling payload",
          "links": null
        },
        "phone_call_id": {
          "description": "Phone call ID",
          "links": null
        }
      }
    },
    "updatePinnedChannelMessages": {
      "name": "updatePinnedChannelMessages",
      "description": [
        "Messages were pinned/unpinned in a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel ID",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "messages": {
          "description": "Messages",
          "links": null
        },
        "pinned": {
          "description": "Whether the messages were pinned or unpinned",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updatePinnedDialogs": {
      "name": "updatePinnedDialogs",
      "description": [
        "Pinned dialogs were updated"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "order": {
          "description": "New order of pinned dialogs",
          "links": null
        }
      }
    },
    "updatePinnedMessages": {
      "name": "updatePinnedMessages",
      "description": [
        "Some messages were pinned in a chat"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "messages": {
          "description": "Message IDs",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        },
        "pinned": {
          "description": "Whether the messages were pinned or unpinned",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updatePrivacy": {
      "name": "updatePrivacy",
      "description": [
        "Privacy rules were changed"
      ],
      "fields": {
        "key": {
          "description": "Peers to which the privacy rules apply",
          "links": null
        },
        "rules": {
          "description": "New privacy rules",
          "links": null
        }
      }
    },
    "updatePtsChanged": {
      "name": "updatePtsChanged",
      "description": [
        "Common message box sequence PTS¹ has changed, state has to be refetched using updates.getState²"
      ],
      "links": [
        "https://core.telegram.org/api/updates",
        "https://core.telegram.org/api/updates#fetching-state"
      ]
    },
    "updateReadChannelDiscussionInbox": {
      "name": "updateReadChannelDiscussionInbox",
      "description": [
        "Incoming comments in a discussion thread¹ were marked as read"
      ],
      "links": [
        "https://core.telegram.org/api/threads"
      ],
      "fields": {
        "broadcast_id": {
          "description": "If set, contains the ID of the channel¹ that contains the post that started the comment thread² in the discussion group (channel_id)",
          "links": [
            "https://core.telegram.org/api/channel",
            "https://core.telegram.org/api/threads"
          ]
        },
        "broadcast_post": {
          "description": "If set, contains the ID of the channel post that started the the comment thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "channel_id": {
          "description": "Discussion group ID¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "read_max_id": {
          "description": "Message ID of latest read incoming message for this thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "top_msg_id": {
          "description": "ID of the group message that started the thread¹ (message in linked discussion group)",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        }
      }
    },
    "updateReadChannelDiscussionOutbox": {
      "name": "updateReadChannelDiscussionOutbox",
      "description": [
        "Outgoing comments in a discussion thread¹ were marked as read"
      ],
      "links": [
        "https://core.telegram.org/api/threads"
      ],
      "fields": {
        "channel_id": {
          "description": "Supergroup ID¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "read_max_id": {
          "description": "Message ID of latest read outgoing message for this thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "top_msg_id": {
          "description": "ID of the group message that started the thread¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        }
      }
    },
    "updateReadChannelInbox": {
      "name": "updateReadChannelInbox",
      "description": [
        "Incoming messages in a channel/supergroup¹ were read"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel/supergroup ID",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "max_id": {
          "description": "Position up to which all incoming messages are read.",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "still_unread_count": {
          "description": "Count of messages weren't read yet",
          "links": null
        }
      }
    },
    "updateReadChannelOutbox": {
      "name": "updateReadChannelOutbox",
      "description": [
        "Outgoing messages in a channel/supergroup¹ were read"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "fields": {
        "channel_id": {
          "description": "Channel/supergroup ID",
          "links": null
        },
        "max_id": {
          "description": "Position up to which all outgoing messages are read.",
          "links": null
        }
      }
    },
    "updateReadFeaturedStickers": {
      "name": "updateReadFeaturedStickers",
      "description": [
        "Some featured stickers were marked as read"
      ]
    },
    "updateReadHistoryInbox": {
      "name": "updateReadHistoryInbox",
      "description": [
        "Incoming messages were read"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "max_id": {
          "description": "Maximum ID of messages read",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "still_unread_count": {
          "description": "Number of messages that are still unread",
          "links": null
        }
      }
    },
    "updateReadHistoryOutbox": {
      "name": "updateReadHistoryOutbox",
      "description": [
        "Outgoing messages were read"
      ],
      "fields": {
        "max_id": {
          "description": "Maximum ID of read outgoing messages",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateReadMessagesContents": {
      "name": "updateReadMessagesContents",
      "description": [
        "Contents of messages in the common message box¹ were read"
      ],
      "links": [
        "https://core.telegram.org/api/updates"
      ],
      "fields": {
        "messages": {
          "description": "IDs of read messages",
          "links": null
        },
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateRecentStickers": {
      "name": "updateRecentStickers",
      "description": [
        "The recent sticker list was updated"
      ]
    },
    "updateSavedGifs": {
      "name": "updateSavedGifs",
      "description": [
        "The saved gif list has changed, the client should refetch it using messages.getSavedGifs¹"
      ],
      "links": [
        "https://core.telegram.org/method/messages.getSavedGifs"
      ]
    },
    "updateServiceNotification": {
      "name": "updateServiceNotification",
      "description": [
        "A service message for the user.",
        "The app must show the message to the user upon receiving this update. In case the popup parameter was passed, the text message must be displayed in a popup alert immediately upon receipt. It is recommended to handle the text as you would an ordinary message in terms of highlighting links, etc. The message must also be stored locally as part of the message history with the user id 777000 (Telegram Notifications)."
      ],
      "fields": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "inbox_date": {
          "description": "When was the notification receivedThe message must also be stored locally as part of the message history with the user id 777000 (Telegram Notifications).",
          "links": null
        },
        "media": {
          "description": "Media content (optional)",
          "links": null
        },
        "message": {
          "description": "Message text",
          "links": null
        },
        "popup": {
          "description": "(boolTrue) if the message must be displayed in a popup.",
          "links": null
        },
        "type": {
          "description": "String, identical in format and contents to the type¹ field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same type within a short period of time (15 minutes).",
          "links": [
            "https://core.telegram.org/api/errors#error-type"
          ]
        }
      }
    },
    "updateShort": {
      "name": "updateShort",
      "description": [
        "Shortened constructor containing info on one update not requiring auxiliary data"
      ],
      "fields": {
        "date": {
          "description": "Date of event",
          "links": null
        },
        "update": {
          "description": "Update",
          "links": null
        }
      }
    },
    "updateShortChatMessage": {
      "name": "updateShortChatMessage",
      "description": [
        "Shortened constructor containing info on one new incoming text message from a chat"
      ],
      "fields": {
        "chat_id": {
          "description": "ID of the chat where the message was sent",
          "links": null
        },
        "date": {
          "description": "date¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "entities": {
          "description": "Entities¹ for styled text",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "from_id": {
          "description": "ID of the sender of the message",
          "links": null
        },
        "fwd_from": {
          "description": "Info about a forwarded message",
          "links": null
        },
        "id": {
          "description": "ID of the message",
          "links": null
        },
        "media_unread": {
          "description": "Whether the message contains some unread mentions",
          "links": null
        },
        "mentioned": {
          "description": "Whether we were mentioned in this message",
          "links": null
        },
        "message": {
          "description": "Message",
          "links": null
        },
        "out": {
          "description": "Whether the message is outgoing",
          "links": null
        },
        "pts": {
          "description": "PTS¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "PTS count¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "reply_to": {
          "description": "Reply (thread) information",
          "links": null
        },
        "silent": {
          "description": "If true, the message is a silent message, no notifications should be triggered",
          "links": null
        },
        "via_bot_id": {
          "description": "Info about the inline bot used to generate this message",
          "links": null
        }
      }
    },
    "updateShortMessage": {
      "name": "updateShortMessage",
      "description": [
        "Info about a message sent to (received from) another user"
      ],
      "fields": {
        "date": {
          "description": "date¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "entities": {
          "description": "Entities¹ for styled text",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "fwd_from": {
          "description": "Info about a forwarded message",
          "links": null
        },
        "id": {
          "description": "The message ID",
          "links": null
        },
        "media_unread": {
          "description": "Whether there are some unread mentions in this message",
          "links": null
        },
        "mentioned": {
          "description": "Whether we were mentioned in the message",
          "links": null
        },
        "message": {
          "description": "The message",
          "links": null
        },
        "out": {
          "description": "Whether the message is outgoing",
          "links": null
        },
        "pts": {
          "description": "PTS¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "PTS count¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "reply_to": {
          "description": "Reply and thread¹ information",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        },
        "silent": {
          "description": "If true, the message is a silent message, no notifications should be triggered",
          "links": null
        },
        "user_id": {
          "description": "The ID of the sender (if outgoing will be the ID of the destination) of the message",
          "links": null
        },
        "via_bot_id": {
          "description": "Info about the inline bot used to generate this message",
          "links": null
        }
      }
    },
    "updateShortSentMessage": {
      "name": "updateShortSentMessage",
      "description": [
        "Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object)."
      ],
      "fields": {
        "date": {
          "description": "date¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "entities": {
          "description": "Entities¹ for styled text",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID of the sent message",
          "links": null
        },
        "media": {
          "description": "Attached media",
          "links": null
        },
        "out": {
          "description": "Whether the message is outgoing",
          "links": null
        },
        "pts": {
          "description": "PTS¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "PTS count¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      }
    },
    "updateStickerSets": {
      "name": "updateStickerSets",
      "description": [
        "Installed stickersets have changed, the client should refetch them using messages.getAllStickers¹"
      ],
      "links": [
        "https://core.telegram.org/method/messages.getAllStickers"
      ]
    },
    "updateStickerSetsOrder": {
      "name": "updateStickerSetsOrder",
      "description": [
        "The order of stickersets was changed"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "masks": {
          "description": "Whether the updated stickers are mask stickers",
          "links": null
        },
        "order": {
          "description": "New sticker order by sticker ID",
          "links": null
        }
      }
    },
    "updateTheme": {
      "name": "updateTheme",
      "description": [
        "A cloud theme was updated"
      ],
      "fields": {
        "theme": {
          "description": "Theme",
          "links": null
        }
      }
    },
    "updateUserName": {
      "name": "updateUserName",
      "description": [
        "Changes the user's first name, last name and username."
      ],
      "fields": {
        "first_name": {
          "description": "New first name. Corresponds to the new value of real_first_name field of the userFull¹ constructor.",
          "links": [
            "https://core.telegram.org/constructor/userFull"
          ]
        },
        "last_name": {
          "description": "New last name. Corresponds to the new value of real_last_name field of the userFull¹ constructor.",
          "links": [
            "https://core.telegram.org/constructor/userFull"
          ]
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        },
        "username": {
          "description": "New username.Parameter added in Layer 18¹.",
          "links": [
            "https://core.telegram.org/api/layers#layer-18"
          ]
        }
      }
    },
    "updateUserPhone": {
      "name": "updateUserPhone",
      "description": [
        "A user's phone number was changed"
      ],
      "fields": {
        "phone": {
          "description": "New phone number",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      }
    },
    "updateUserPhoto": {
      "name": "updateUserPhoto",
      "description": [
        "Change of contact's profile photo."
      ],
      "fields": {
        "date": {
          "description": "Date of photo update.",
          "links": null
        },
        "photo": {
          "description": "New profile photo",
          "links": null
        },
        "previous": {
          "description": "(boolTrue¹), if one of the previously used photos is set a profile photo.",
          "links": [
            "https://core.telegram.org/constructor/boolTrue"
          ]
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      }
    },
    "updateUserStatus": {
      "name": "updateUserStatus",
      "description": [
        "Contact status update."
      ],
      "fields": {
        "status": {
          "description": "New status",
          "links": null
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      }
    },
    "updateUserTyping": {
      "name": "updateUserTyping",
      "description": [
        "The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no repeated update received after 6 seconds, it should be considered that the user stopped doing whatever he's been doing."
      ],
      "fields": {
        "action": {
          "description": "Action typeParam added in Layer 17¹.",
          "links": [
            "https://core.telegram.org/api/layers#layer-17"
          ]
        },
        "user_id": {
          "description": "User id",
          "links": null
        }
      }
    },
    "updateWebPage": {
      "name": "updateWebPage",
      "description": [
        "An instant view¹ webpage preview was generated"
      ],
      "links": [
        "https://instantview.telegram.org"
      ],
      "fields": {
        "pts": {
          "description": "Event count after generation¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_count": {
          "description": "Number of events that were generated¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "webpage": {
          "description": "Webpage preview",
          "links": null
        }
      }
    },
    "updates.channelDifference": {
      "name": "updates.channelDifference",
      "description": [
        "The new updates"
      ],
      "fields": {
        "chats": {
          "description": "Chats",
          "links": null
        },
        "final": {
          "description": "Whether there are more updates to be fetched using getDifference, starting from the provided pts",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "new_messages": {
          "description": "New messages",
          "links": null
        },
        "other_updates": {
          "description": "Other updates",
          "links": null
        },
        "pts": {
          "description": "The PTS¹ from which to start getting updates the next time",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "timeout": {
          "description": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed",
          "links": null
        },
        "users": {
          "description": "Users",
          "links": null
        }
      }
    },
    "updates.channelDifferenceEmpty": {
      "name": "updates.channelDifferenceEmpty",
      "description": [
        "There are no new updates"
      ],
      "fields": {
        "final": {
          "description": "Whether there are more updates that must be fetched (always false)",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "pts": {
          "description": "The latest PTS¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "timeout": {
          "description": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed",
          "links": null
        }
      }
    },
    "updates.channelDifferenceTooLong": {
      "name": "updates.channelDifferenceTooLong",
      "description": [
        "The provided pts + limit \u003c remote pts. Simply, there are too many updates to be fetched (more than limit), the client has to resolve the update gap in one of the following ways:"
      ],
      "fields": {
        "chats": {
          "description": "Chats from messages",
          "links": null
        },
        "dialog": {
          "description": "Dialog containing the latest PTS¹ that can be used to reset the channel state",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "final": {
          "description": "Whether there are more updates that must be fetched (always false)",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "messages": {
          "description": "The latest messages",
          "links": null
        },
        "timeout": {
          "description": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed",
          "links": null
        },
        "users": {
          "description": "Users from messages",
          "links": null
        }
      }
    },
    "updates.difference": {
      "name": "updates.difference",
      "description": [
        "Full list of occurred events."
      ],
      "fields": {
        "chats": {
          "description": "List of chats mentioned in events",
          "links": null
        },
        "new_encrypted_messages": {
          "description": "List of new encrypted secret chat messages",
          "links": null
        },
        "new_messages": {
          "description": "List of new messages",
          "links": null
        },
        "other_updates": {
          "description": "List of updates",
          "links": null
        },
        "state": {
          "description": "Current state",
          "links": null
        },
        "users": {
          "description": "List of users mentioned in events",
          "links": null
        }
      }
    },
    "updates.differenceEmpty": {
      "name": "updates.differenceEmpty",
      "description": [
        "No events."
      ],
      "fields": {
        "date": {
          "description": "Current date",
          "links": null
        },
        "seq": {
          "description": "Number of sent updates",
          "links": null
        }
      }
    },
    "updates.differenceSlice": {
      "name": "updates.differenceSlice",
      "description": [
        "Incomplete list of occurred events."
      ],
      "fields": {
        "chats": {
          "description": "List of chats mentioned in events",
          "links": null
        },
        "intermediate_state": {
          "description": "Intermediary state",
          "links": null
        },
        "new_encrypted_messages": {
          "description": "New messages from the encrypted event sequence¹",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "new_messages": {
          "description": "List of new messgaes",
          "links": null
        },
        "other_updates": {
          "description": "List of updates",
          "links": null
        },
        "users": {
          "description": "List of users mentioned in events",
          "links": null
        }
      }
    },
    "updates.differenceTooLong": {
      "name": "updates.differenceTooLong",
      "description": [
        "The difference is too long¹, and the specified state must be used to refetch updates."
      ],
      "links": [
        "https://core.telegram.org/api/updates#recovering-gaps"
      ],
      "fields": {
        "pts": {
          "description": "The new state to use.",
          "links": null
        }
      }
    },
    "updates.state": {
      "name": "updates.state",
      "description": [
        "Updates state."
      ],
      "fields": {
        "date": {
          "description": "Date of condition",
          "links": null
        },
        "pts": {
          "description": "Number of events occured in a text box",
          "links": null
        },
        "qts": {
          "description": "Position in a sequence of updates in secret chats. For further detailes refer to article secret chats¹Parameter was added in eigth layer².",
          "links": [
            "https://core.telegram.org/api/end-to-end",
            "https://core.telegram.org/api/layers#layer-8"
          ]
        },
        "seq": {
          "description": "Number of sent updates",
          "links": null
        },
        "unread_count": {
          "description": "Number of unread messages",
          "links": null
        }
      }
    },
    "updatesCombined": {
      "name": "updatesCombined",
      "description": [
        "Constructor for a group of updates."
      ],
      "fields": {
        "chats": {
          "description": "List of chats mentioned in updates",
          "links": null
        },
        "date": {
          "description": "Current date",
          "links": null
        },
        "seq": {
          "description": "Value seq for the latest update in a group",
          "links": null
        },
        "seq_start": {
          "description": "Value seq for the earliest update in a group",
          "links": null
        },
        "updates": {
          "description": "List of updates",
          "links": null
        },
        "users": {
          "description": "List of users mentioned in updates",
          "links": null
        }
      }
    },
    "updatesTooLong": {
      "name": "updatesTooLong",
      "description": [
        "Too many updates, it is necessary to execute updates.getDifference¹."
      ],
      "links": [
        "https://core.telegram.org/method/updates.getDifference"
      ]
    },
    "upload.cdnFile": {
      "name": "upload.cdnFile",
      "description": [
        "Represent a chunk of a CDN¹ file."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "fields": {
        "bytes": {
          "description": "The data",
          "links": null
        }
      }
    },
    "upload.cdnFileReuploadNeeded": {
      "name": "upload.cdnFileReuploadNeeded",
      "description": [
        "The file was cleared from the temporary RAM cache of the CDN¹ and has to be reuploaded."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "fields": {
        "request_token": {
          "description": "Request token (see CDN¹)",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        }
      }
    },
    "upload.file": {
      "name": "upload.file",
      "description": [
        "File content."
      ],
      "fields": {
        "bytes": {
          "description": "Binary data, file content",
          "links": null
        },
        "mtime": {
          "description": "Modification type",
          "links": null
        },
        "type": {
          "description": "File type",
          "links": null
        }
      }
    },
    "upload.fileCdnRedirect": {
      "name": "upload.fileCdnRedirect",
      "description": [
        "The file must be downloaded from a CDN DC¹."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "fields": {
        "dc_id": {
          "description": "CDN DC¹ ID",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        },
        "encryption_iv": {
          "description": "Encryption IV (see CDN files¹)",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        },
        "encryption_key": {
          "description": "Encryption key (see CDN files¹)",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        },
        "file_hashes": {
          "description": "File hashes (see CDN files¹)",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        },
        "file_token": {
          "description": "File token (see CDN files¹)",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        }
      }
    },
    "upload.webFile": {
      "name": "upload.webFile",
      "description": [
        "Represents a chunk of an HTTP webfile¹ downloaded through telegram's secure MTProto servers"
      ],
      "links": [
        "https://core.telegram.org/api/files"
      ],
      "fields": {
        "bytes": {
          "description": "Data",
          "links": null
        },
        "file_type": {
          "description": "File type",
          "links": null
        },
        "mime_type": {
          "description": "Mime type",
          "links": null
        },
        "mtime": {
          "description": "Modified time",
          "links": null
        },
        "size": {
          "description": "File size",
          "links": null
        }
      }
    },
    "urlAuthResultAccepted": {
      "name": "urlAuthResultAccepted",
      "description": [
        "Details about an accepted authorization request, for more info click here »¹"
      ],
      "links": [
        "https://core.telegram.org/api/url-authorization"
      ],
      "fields": {
        "url": {
          "description": "The URL name of the website on which the user has logged in.",
          "links": null
        }
      }
    },
    "urlAuthResultDefault": {
      "name": "urlAuthResultDefault",
      "description": [
        "Details about an accepted authorization request, for more info click here »¹"
      ],
      "links": [
        "https://core.telegram.org/api/url-authorization"
      ]
    },
    "urlAuthResultRequest": {
      "name": "urlAuthResultRequest",
      "description": [
        "Details about the authorization request, for more info click here »¹"
      ],
      "links": [
        "https://core.telegram.org/api/url-authorization"
      ],
      "fields": {
        "bot": {
          "description": "Username of a bot, which will be used for user authorization. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot¹ for more details.",
          "links": [
            "https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot"
          ]
        },
        "domain": {
          "description": "The domain name of the website on which the user will log in.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "request_write_access": {
          "description": "Whether the bot would like to send messages to the user",
          "links": null
        }
      }
    },
    "user": {
      "name": "user",
      "description": [
        "Indicates info about a certain user"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash of the user",
          "links": null
        },
        "apply_min_photo": {
          "description": "If set, the profile picture for this user should be refetched",
          "links": null
        },
        "bot": {
          "description": "Is this user a bot?",
          "links": null
        },
        "bot_chat_history": {
          "description": "Can the bot see all messages in groups?",
          "links": null
        },
        "bot_info_version": {
          "description": "Version of the bot_info field in userFull¹, incremented every time it changes",
          "links": [
            "https://core.telegram.org/constructor/userFull"
          ]
        },
        "bot_inline_geo": {
          "description": "Whether the bot can request our geolocation in inline mode",
          "links": null
        },
        "bot_inline_placeholder": {
          "description": "Inline placeholder for this inline bot",
          "links": null
        },
        "bot_nochats": {
          "description": "Can the bot be added to groups?",
          "links": null
        },
        "contact": {
          "description": "Whether this user is a contact",
          "links": null
        },
        "deleted": {
          "description": "Whether the account of this user was deleted",
          "links": null
        },
        "first_name": {
          "description": "First name",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID of the user",
          "links": null
        },
        "lang_code": {
          "description": "Language code of the user",
          "links": null
        },
        "last_name": {
          "description": "Last name",
          "links": null
        },
        "min": {
          "description": "See min¹",
          "links": [
            "https://core.telegram.org/api/min"
          ]
        },
        "mutual_contact": {
          "description": "Whether this user is a mutual contact",
          "links": null
        },
        "phone": {
          "description": "Phone number",
          "links": null
        },
        "photo": {
          "description": "Profile picture of user",
          "links": null
        },
        "restricted": {
          "description": "Access to this user must be restricted for the reason specified in restriction_reason",
          "links": null
        },
        "restriction_reason": {
          "description": "Contains the reason why access to this user must be restricted.",
          "links": null
        },
        "scam": {
          "description": "This may be a scam user",
          "links": null
        },
        "self": {
          "description": "Whether this user indicates the currently logged in user",
          "links": null
        },
        "status": {
          "description": "Online status of user",
          "links": null
        },
        "support": {
          "description": "Whether this is an official support user",
          "links": null
        },
        "username": {
          "description": "Username",
          "links": null
        },
        "verified": {
          "description": "Whether this user is verified",
          "links": null
        }
      }
    },
    "userEmpty": {
      "name": "userEmpty",
      "description": [
        "Empty constructor, non-existent user."
      ],
      "fields": {
        "id": {
          "description": "User identifier or 0",
          "links": null
        }
      }
    },
    "userFull": {
      "name": "userFull",
      "description": [
        "Extended user info"
      ],
      "fields": {
        "about": {
          "description": "Bio of the user",
          "links": null
        },
        "blocked": {
          "description": "Whether you have blocked this user",
          "links": null
        },
        "bot_info": {
          "description": "For bots, info about the bot (bot commands, etc)",
          "links": null
        },
        "can_pin_message": {
          "description": "Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself",
          "links": null
        },
        "common_chats_count": {
          "description": "Chats in common with this user",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "has_scheduled": {
          "description": "Whether scheduled messages¹ are available",
          "links": [
            "https://core.telegram.org/api/scheduled-messages"
          ]
        },
        "notify_settings": {
          "description": "Notification settings",
          "links": null
        },
        "phone_calls_available": {
          "description": "Whether this user can make VoIP calls",
          "links": null
        },
        "phone_calls_private": {
          "description": "Whether this user's privacy settings allow you to call him",
          "links": null
        },
        "pinned_msg_id": {
          "description": "Message ID of the last pinned message¹",
          "links": [
            "https://core.telegram.org/api/pin"
          ]
        },
        "profile_photo": {
          "description": "Profile photo",
          "links": null
        },
        "settings": {
          "description": "Peer settings",
          "links": null
        },
        "user": {
          "description": "Remaining user info",
          "links": null
        },
        "video_calls_available": {
          "description": "Whether the user can receive video calls",
          "links": null
        }
      }
    },
    "userProfilePhoto": {
      "name": "userProfilePhoto",
      "description": [
        "User profile photo."
      ],
      "fields": {
        "dc_id": {
          "description": "DC ID where the photo is stored",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "has_video": {
          "description": "Whether an animated profile picture¹ is available for this user",
          "links": [
            "https://core.telegram.org/api/files#animated-profile-pictures"
          ]
        },
        "photo_big": {
          "description": "Location of the file, corresponding to the big profile photo thumbnail",
          "links": null
        },
        "photo_id": {
          "description": "Identifier of the respective photoParameter added in Layer 2¹",
          "links": [
            "https://core.telegram.org/api/layers#layer-2"
          ]
        },
        "photo_small": {
          "description": "Location of the file, corresponding to the small profile photo thumbnail",
          "links": null
        }
      }
    },
    "userProfilePhotoEmpty": {
      "name": "userProfilePhotoEmpty",
      "description": [
        "Profile photo has not been set, or was hidden."
      ]
    },
    "userStatusEmpty": {
      "name": "userStatusEmpty",
      "description": [
        "User status has not been set yet."
      ]
    },
    "userStatusLastMonth": {
      "name": "userStatusLastMonth",
      "description": [
        "Online status: last seen last month"
      ]
    },
    "userStatusLastWeek": {
      "name": "userStatusLastWeek",
      "description": [
        "Online status: last seen last week"
      ]
    },
    "userStatusOffline": {
      "name": "userStatusOffline",
      "description": [
        "The user's offline status."
      ],
      "fields": {
        "was_online": {
          "description": "Time the user was last seen online",
          "links": null
        }
      }
    },
    "userStatusOnline": {
      "name": "userStatusOnline",
      "description": [
        "Online status of the user."
      ],
      "fields": {
        "expires": {
          "description": "Time to expiration of the current online status",
          "links": null
        }
      }
    },
    "userStatusRecently": {
      "name": "userStatusRecently",
      "description": [
        "Online status: last seen recently"
      ]
    },
    "vector": {
      "name": "vector",
      "description": [
        "A universal vector constructor."
      ]
    },
    "videoSize": {
      "name": "videoSize",
      "description": [
        "Animated profile picture¹ in MPEG4 format"
      ],
      "links": [
        "https://core.telegram.org/api/files#animated-profile-pictures"
      ],
      "fields": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "h": {
          "description": "Video height",
          "links": null
        },
        "location": {
          "description": "File location",
          "links": null
        },
        "size": {
          "description": "File size",
          "links": null
        },
        "type": {
          "description": "u for animated profile pictures, and v for trimmed and downscaled video previews",
          "links": null
        },
        "video_start_ts": {
          "description": "Timestamp that should be shown as static preview to the user (seconds)",
          "links": null
        },
        "w": {
          "description": "Video width",
          "links": null
        }
      }
    },
    "wallPaper": {
      "name": "wallPaper",
      "description": [
        "Wallpaper settings."
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "creator": {
          "description": "Creator of the wallpaper",
          "links": null
        },
        "dark": {
          "description": "Dark mode",
          "links": null
        },
        "default": {
          "description": "Whether this is the default wallpaper",
          "links": null
        },
        "document": {
          "description": "The actual wallpaper",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Identifier",
          "links": null
        },
        "pattern": {
          "description": "Pattern",
          "links": null
        },
        "settings": {
          "description": "Wallpaper settings",
          "links": null
        },
        "slug": {
          "description": "Unique wallpaper ID",
          "links": null
        }
      }
    },
    "wallPaperNoFile": {
      "name": "wallPaperNoFile",
      "description": [
        "No file wallpaper"
      ],
      "fields": {
        "dark": {
          "description": "Dark mode",
          "links": null
        },
        "default": {
          "description": "Whether this is the default wallpaper",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "settings": {
          "description": "Wallpaper settings",
          "links": null
        }
      }
    },
    "wallPaperSettings": {
      "name": "wallPaperSettings",
      "description": [
        "Wallpaper settings"
      ],
      "fields": {
        "background_color": {
          "description": "If set, a PNG pattern is to be combined with the color chosen by the user: the main color of the background in RGB24 format",
          "links": null
        },
        "blur": {
          "description": "If set, the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "intensity": {
          "description": "Intensity of the pattern when it is shown above the main background color, 0-100",
          "links": null
        },
        "motion": {
          "description": "If set, the background needs to be slightly moved when device is rotated",
          "links": null
        },
        "rotation": {
          "description": "Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45",
          "links": null
        },
        "second_background_color": {
          "description": "If set, a PNG pattern is to be combined with the first and second background colors (RGB24 format) in a top-bottom gradient",
          "links": null
        }
      }
    },
    "webAuthorization": {
      "name": "webAuthorization",
      "description": [
        "Represents a bot logged in using the Telegram login widget¹"
      ],
      "links": [
        "https://core.telegram.org/widgets/login"
      ],
      "fields": {
        "bot_id": {
          "description": "Bot ID",
          "links": null
        },
        "browser": {
          "description": "Browser user-agent",
          "links": null
        },
        "date_active": {
          "description": "When was the web session last active",
          "links": null
        },
        "date_created": {
          "description": "When was the web session created",
          "links": null
        },
        "domain": {
          "description": "The domain name of the website on which the user has logged in.",
          "links": null
        },
        "hash": {
          "description": "Authorization hash",
          "links": null
        },
        "ip": {
          "description": "IP address",
          "links": null
        },
        "platform": {
          "description": "Platform",
          "links": null
        },
        "region": {
          "description": "Region, determined from IP address",
          "links": null
        }
      }
    },
    "webDocument": {
      "name": "webDocument",
      "description": [
        "Remote document"
      ],
      "fields": {
        "access_hash": {
          "description": "Access hash",
          "links": null
        },
        "attributes": {
          "description": "Attributes for media types",
          "links": null
        },
        "mime_type": {
          "description": "MIME type",
          "links": null
        },
        "size": {
          "description": "File size",
          "links": null
        },
        "url": {
          "description": "Document URL",
          "links": null
        }
      }
    },
    "webDocumentNoProxy": {
      "name": "webDocumentNoProxy",
      "description": [
        "Remote document that can be downloaded without proxying through telegram¹"
      ],
      "links": [
        "https://core.telegram.org/api/files"
      ],
      "fields": {
        "attributes": {
          "description": "Attributes for media types",
          "links": null
        },
        "mime_type": {
          "description": "MIME type",
          "links": null
        },
        "size": {
          "description": "File size",
          "links": null
        },
        "url": {
          "description": "Document URL",
          "links": null
        }
      }
    },
    "webPage": {
      "name": "webPage",
      "description": [
        "Webpage preview"
      ],
      "fields": {
        "attributes": {
          "description": "Webpage attributes",
          "links": null
        },
        "author": {
          "description": "Author of the content",
          "links": null
        },
        "cached_page": {
          "description": "Page contents in instant view¹ format",
          "links": [
            "https://instantview.telegram.org"
          ]
        },
        "description": {
          "description": "Content description",
          "links": null
        },
        "display_url": {
          "description": "Webpage URL to be displayed to the user",
          "links": null
        },
        "document": {
          "description": "Preview of the content as a media file",
          "links": null
        },
        "duration": {
          "description": "Duration of the content, in seconds",
          "links": null
        },
        "embed_height": {
          "description": "Height of the embedded preview",
          "links": null
        },
        "embed_type": {
          "description": "MIME type of the embedded preview, (e.g., text/html or video/mp4)",
          "links": null
        },
        "embed_url": {
          "description": "URL to show in the embedded preview",
          "links": null
        },
        "embed_width": {
          "description": "Width of the embedded preview",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "id": {
          "description": "Preview ID",
          "links": null
        },
        "photo": {
          "description": "Image representing the content",
          "links": null
        },
        "site_name": {
          "description": "Short name of the site (e.g., Google Docs, App Store)",
          "links": null
        },
        "title": {
          "description": "Title of the content",
          "links": null
        },
        "type": {
          "description": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else",
          "links": null
        },
        "url": {
          "description": "URL of previewed webpage",
          "links": null
        }
      }
    },
    "webPageAttributeTheme": {
      "name": "webPageAttributeTheme",
      "description": [
        "Page theme"
      ],
      "fields": {
        "documents": {
          "description": "Theme files",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "settings": {
          "description": "Theme settings",
          "links": null
        }
      }
    },
    "webPageEmpty": {
      "name": "webPageEmpty",
      "description": [
        "No preview is available for the webpage"
      ],
      "fields": {
        "id": {
          "description": "Preview ID",
          "links": null
        }
      }
    },
    "webPageNotModified": {
      "name": "webPageNotModified",
      "description": [
        "The preview of the webpage hasn't changed"
      ],
      "fields": {
        "cached_page_views": {
          "description": "Page view count",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      }
    },
    "webPagePending": {
      "name": "webPagePending",
      "description": [
        "A preview of the webpage is currently being generated"
      ],
      "fields": {
        "date": {
          "description": "When was the processing started",
          "links": null
        },
        "id": {
          "description": "ID of preview",
          "links": null
        }
      }
    }
  },
  "types": {
    "#": {
      "name": "#",
      "description": [
        "A basic bare type, the values of which correspond to single-element sequences, i.e. unsigned numbers from 0 to 2^32-1 which in this case represent themselves.",
        "More on basic types »¹"
      ],
      "links": [
        "https://core.telegram.org/mtproto/serialize"
      ]
    },
    "Account.AuthorizationForm": {
      "name": "Account.AuthorizationForm",
      "description": [
        "Authorization form"
      ]
    },
    "Account.Authorizations": {
      "name": "Account.Authorizations",
      "description": [
        "Logged-in sessions"
      ]
    },
    "Account.AutoDownloadSettings": {
      "name": "Account.AutoDownloadSettings",
      "description": [
        "Media autodownload settings"
      ]
    },
    "Account.PrivacyRules": {
      "name": "Account.PrivacyRules",
      "description": [
        "Privacy rules"
      ]
    },
    "Account.Takeout": {
      "name": "Account.Takeout",
      "description": [
        "Takeout info"
      ]
    },
    "Account.TmpPassword": {
      "name": "Account.TmpPassword",
      "description": [
        "Temporary password"
      ]
    },
    "Account.WallPapers": {
      "name": "Account.WallPapers",
      "description": [
        "Wallpapers"
      ]
    },
    "Account.WebAuthorizations": {
      "name": "Account.WebAuthorizations",
      "description": [
        "Web authorizations"
      ]
    },
    "AccountDaysTTL": {
      "name": "AccountDaysTTL",
      "description": [
        "Time-to-live of current account"
      ]
    },
    "Auth.ExportedAuthorization": {
      "name": "Auth.ExportedAuthorization",
      "description": [
        "Exported authorization"
      ]
    },
    "Authorization": {
      "name": "Authorization",
      "description": [
        "Represents a logged-in session"
      ]
    },
    "AutoDownloadSettings": {
      "name": "AutoDownloadSettings",
      "description": [
        "Media autodownload settings"
      ]
    },
    "BankCardOpenUrl": {
      "name": "BankCardOpenUrl",
      "description": [
        "Credit card info URL provided by the bank"
      ]
    },
    "BaseTheme": {
      "name": "BaseTheme",
      "description": [
        "Basic theme settings"
      ]
    },
    "Bool": {
      "name": "Bool",
      "description": [
        "Boolean type."
      ]
    },
    "BotCommand": {
      "name": "BotCommand",
      "description": [
        "Describes a bot command that can be used in a chat"
      ]
    },
    "BotInfo": {
      "name": "BotInfo",
      "description": [
        "Info about bots (available bot commands, etc)"
      ]
    },
    "BotInlineMessage": {
      "name": "BotInlineMessage",
      "description": [
        "Inline message"
      ]
    },
    "BotInlineResult": {
      "name": "BotInlineResult",
      "description": [
        "Results of an inline query"
      ]
    },
    "CdnConfig": {
      "name": "CdnConfig",
      "description": [
        "Configuration for CDN¹ file downloads."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ]
    },
    "CdnPublicKey": {
      "name": "CdnPublicKey",
      "description": [
        "Public key to use only during handshakes to CDN¹ DCs."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ]
    },
    "ChannelAdminLogEvent": {
      "name": "ChannelAdminLogEvent",
      "description": [
        "An event in a channel admin log"
      ]
    },
    "ChannelAdminLogEventAction": {
      "name": "ChannelAdminLogEventAction",
      "description": [
        "Channel admin log event"
      ]
    },
    "ChannelAdminLogEventsFilter": {
      "name": "ChannelAdminLogEventsFilter",
      "description": [
        "Filter for fetching events in the channel admin log"
      ]
    },
    "ChannelLocation": {
      "name": "ChannelLocation",
      "description": [
        "Geographical location of supergroup (geogroups)"
      ]
    },
    "ChannelMessagesFilter": {
      "name": "ChannelMessagesFilter",
      "description": [
        "Filter for fetching only certain types of channel messages"
      ]
    },
    "ChannelParticipant": {
      "name": "ChannelParticipant",
      "description": [
        "Channel participant"
      ]
    },
    "ChannelParticipantsFilter": {
      "name": "ChannelParticipantsFilter",
      "description": [
        "Filter for fetching channel participants"
      ]
    },
    "Channels.AdminLogResults": {
      "name": "Channels.AdminLogResults",
      "description": [
        "Admin log events"
      ]
    },
    "Channels.ChannelParticipant": {
      "name": "Channels.ChannelParticipant",
      "description": [
        "Channel participant"
      ]
    },
    "Channels.ChannelParticipants": {
      "name": "Channels.ChannelParticipants",
      "description": [
        "Channel/supergroup participants"
      ]
    },
    "Chat": {
      "name": "Chat",
      "description": [
        "Object defines a group."
      ]
    },
    "ChatAdminRights": {
      "name": "ChatAdminRights",
      "description": [
        "Represents the rights of an admin in a channel/supergroup¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ]
    },
    "ChatBannedRights": {
      "name": "ChatBannedRights",
      "description": [
        "Represents the rights of a normal user in a supergroup/channel/chat¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ]
    },
    "ChatFull": {
      "name": "ChatFull",
      "description": [
        "Object containing detailed group info"
      ]
    },
    "ChatInvite": {
      "name": "ChatInvite",
      "description": [
        "Chat invite"
      ]
    },
    "ChatOnlines": {
      "name": "ChatOnlines",
      "description": [
        "Number of online users in a chat"
      ]
    },
    "ChatParticipant": {
      "name": "ChatParticipant",
      "description": [
        "Details of a group member."
      ]
    },
    "ChatParticipants": {
      "name": "ChatParticipants",
      "description": [
        "Object contains info on group members."
      ]
    },
    "ChatPhoto": {
      "name": "ChatPhoto",
      "description": [
        "Object defines a group profile photo."
      ]
    },
    "CodeSettings": {
      "name": "CodeSettings",
      "description": [
        "Settings for the code type to send"
      ]
    },
    "Config": {
      "name": "Config",
      "description": [
        "Object contains info on API configuring parameters."
      ]
    },
    "Contact": {
      "name": "Contact",
      "description": [
        "A contact of the current user."
      ]
    },
    "ContactStatus": {
      "name": "ContactStatus",
      "description": [
        "Contact status: online / offline."
      ]
    },
    "Contacts.ResolvedPeer": {
      "name": "Contacts.ResolvedPeer",
      "description": [
        "Peer returned after resolving a @username"
      ]
    },
    "Contacts.TopPeers": {
      "name": "Contacts.TopPeers",
      "description": [
        "Top peers"
      ]
    },
    "DataJSON": {
      "name": "DataJSON",
      "description": [
        "Represent a JSON-encoded object"
      ]
    },
    "DcOption": {
      "name": "DcOption",
      "description": [
        "Information for connection to data centre."
      ]
    },
    "Dialog": {
      "name": "Dialog",
      "description": [
        "Chat info."
      ]
    },
    "DialogFilter": {
      "name": "DialogFilter",
      "description": [
        "Dialog filter (folders)"
      ]
    },
    "DialogFilterSuggested": {
      "name": "DialogFilterSuggested",
      "description": [
        "Suggested dialog filters (folders)"
      ]
    },
    "DialogPeer": {
      "name": "DialogPeer",
      "description": [
        "Peer, or all peers in a folder"
      ]
    },
    "Document": {
      "name": "Document",
      "description": [
        "A document."
      ]
    },
    "DocumentAttribute": {
      "name": "DocumentAttribute",
      "description": [
        "Various possible attributes of a document (used to define if it's a sticker, a GIF, a video, a mask sticker, an image, an audio, and so on)"
      ]
    },
    "DraftMessage": {
      "name": "DraftMessage",
      "description": [
        "Represents a message draft¹."
      ],
      "links": [
        "https://core.telegram.org/api/drafts"
      ]
    },
    "EmojiKeyword": {
      "name": "EmojiKeyword",
      "description": [
        "Emoji keyword"
      ]
    },
    "EmojiKeywordsDifference": {
      "name": "EmojiKeywordsDifference",
      "description": [
        "New emoji keywords"
      ]
    },
    "EmojiLanguage": {
      "name": "EmojiLanguage",
      "description": [
        "Emoji language"
      ]
    },
    "EmojiURL": {
      "name": "EmojiURL",
      "description": [
        "Emoji URL"
      ]
    },
    "EncryptedChat": {
      "name": "EncryptedChat",
      "description": [
        "Object contains info on an encrypted chat."
      ]
    },
    "EncryptedFile": {
      "name": "EncryptedFile",
      "description": [
        "Seta an encrypted file."
      ]
    },
    "EncryptedMessage": {
      "name": "EncryptedMessage",
      "description": [
        "Object contains encrypted message."
      ]
    },
    "Error": {
      "name": "Error",
      "description": [
        "An object containing a query error."
      ]
    },
    "ExportedChatInvite": {
      "name": "ExportedChatInvite",
      "description": [
        "Exported chat invite"
      ]
    },
    "ExportedMessageLink": {
      "name": "ExportedMessageLink",
      "description": [
        "HTTP link and embed info of channel message"
      ]
    },
    "FileHash": {
      "name": "FileHash",
      "description": [
        "Hash of an uploaded file, to be checked for validity after download"
      ]
    },
    "FileLocation": {
      "name": "FileLocation",
      "description": [
        "Indicates the location of a photo, will be deprecated soon"
      ]
    },
    "Folder": {
      "name": "Folder",
      "description": [
        "A folder"
      ]
    },
    "FolderPeer": {
      "name": "FolderPeer",
      "description": [
        "Peer associated to folder"
      ]
    },
    "Game": {
      "name": "Game",
      "description": [
        "Indicates an already sent game"
      ]
    },
    "GeoPoint": {
      "name": "GeoPoint",
      "description": [
        "Object defines a GeoPoint."
      ]
    },
    "GlobalPrivacySettings": {
      "name": "GlobalPrivacySettings",
      "description": [
        "Global privacy settings"
      ]
    },
    "Help.DeepLinkInfo": {
      "name": "Help.DeepLinkInfo",
      "description": [
        "Contains information about a tg:// deep link"
      ]
    },
    "Help.PassportConfig": {
      "name": "Help.PassportConfig",
      "description": [
        "Telegram passport¹ configuration"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ]
    },
    "Help.RecentMeUrls": {
      "name": "Help.RecentMeUrls",
      "description": [
        "Recent t.me URLs"
      ]
    },
    "Help.SupportName": {
      "name": "Help.SupportName",
      "description": [
        "Get localized name for support user"
      ]
    },
    "Help.TermsOfServiceUpdate": {
      "name": "Help.TermsOfServiceUpdate",
      "description": [
        "Update of Telegram's terms of service"
      ]
    },
    "Help.UserInfo": {
      "name": "Help.UserInfo",
      "description": [
        "User info"
      ]
    },
    "HighScore": {
      "name": "HighScore",
      "description": [
        "Game high score"
      ]
    },
    "ImportedContact": {
      "name": "ImportedContact",
      "description": [
        "Object contains info on a successfully imported contact."
      ]
    },
    "InlineBotSwitchPM": {
      "name": "InlineBotSwitchPM",
      "description": [
        "The bot requested the user to message him in private"
      ]
    },
    "InputAppEvent": {
      "name": "InputAppEvent",
      "description": [
        "Object contains info about an event that occured in the application."
      ]
    },
    "InputBotInlineMessage": {
      "name": "InputBotInlineMessage",
      "description": [
        "Represents a sent inline message from the perspective of a bot"
      ]
    },
    "InputBotInlineMessageID": {
      "name": "InputBotInlineMessageID",
      "description": [
        "Represents a sent inline message from the perspective of a bot"
      ]
    },
    "InputBotInlineResult": {
      "name": "InputBotInlineResult",
      "description": [
        "Inline bot result"
      ]
    },
    "InputChannel": {
      "name": "InputChannel",
      "description": [
        "Represents a channel"
      ]
    },
    "InputChatPhoto": {
      "name": "InputChatPhoto",
      "description": [
        "Defines a new group profile photo."
      ]
    },
    "InputCheckPasswordSRP": {
      "name": "InputCheckPasswordSRP",
      "description": [
        "Constructors for checking the validity of a 2FA SRP password¹"
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ]
    },
    "InputClientProxy": {
      "name": "InputClientProxy",
      "description": [
        "Info about an MTProxy¹ used to connect."
      ],
      "links": [
        "https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation"
      ]
    },
    "InputContact": {
      "name": "InputContact",
      "description": [
        "Object defines a contact from the user's phonebook."
      ]
    },
    "InputDialogPeer": {
      "name": "InputDialogPeer",
      "description": [
        "Peer, or all peers in a certain folder"
      ]
    },
    "InputDocument": {
      "name": "InputDocument",
      "description": [
        "Defines a document for subsequent interaction."
      ]
    },
    "InputEncryptedChat": {
      "name": "InputEncryptedChat",
      "description": [
        "Object sets an encrypted chat ID."
      ]
    },
    "InputEncryptedFile": {
      "name": "InputEncryptedFile",
      "description": [
        "Object sets encrypted file for attachment"
      ]
    },
    "InputFile": {
      "name": "InputFile",
      "description": [
        "Defines a file uploaded by the client."
      ]
    },
    "InputFileLocation": {
      "name": "InputFileLocation",
      "description": [
        "Defines the location of a file for download."
      ]
    },
    "InputFolderPeer": {
      "name": "InputFolderPeer",
      "description": [
        "Peer in a folder"
      ]
    },
    "InputGame": {
      "name": "InputGame",
      "description": [
        "A game to send"
      ]
    },
    "InputGeoPoint": {
      "name": "InputGeoPoint",
      "description": [
        "Defines a GeoPoint."
      ]
    },
    "InputMedia": {
      "name": "InputMedia",
      "description": [
        "Defines media content of a message."
      ]
    },
    "InputMessage": {
      "name": "InputMessage",
      "description": [
        "A message"
      ]
    },
    "InputNotifyPeer": {
      "name": "InputNotifyPeer",
      "description": [
        "Object defines the set of users and/or groups that generate notifications."
      ]
    },
    "InputPaymentCredentials": {
      "name": "InputPaymentCredentials",
      "description": [
        "Payment credentials"
      ]
    },
    "InputPeer": {
      "name": "InputPeer",
      "description": [
        "Peer"
      ]
    },
    "InputPeerNotifySettings": {
      "name": "InputPeerNotifySettings",
      "description": [
        "Notifications settings."
      ]
    },
    "InputPhoneCall": {
      "name": "InputPhoneCall",
      "description": [
        "Phone call"
      ]
    },
    "InputPhoto": {
      "name": "InputPhoto",
      "description": [
        "Defines a photo for further interaction."
      ]
    },
    "InputPrivacyKey": {
      "name": "InputPrivacyKey",
      "description": [
        "Privacy key"
      ]
    },
    "InputPrivacyRule": {
      "name": "InputPrivacyRule",
      "description": [
        "Privacy rule"
      ]
    },
    "InputSecureFile": {
      "name": "InputSecureFile",
      "description": [
        "Secure passport¹ file, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#inputsecurefile"
      ]
    },
    "InputSecureValue": {
      "name": "InputSecureValue",
      "description": [
        "Secure value, for more info see the passport docs »¹"
      ],
      "links": [
        "https://core.telegram.org/passport/encryption#encryption"
      ]
    },
    "InputSingleMedia": {
      "name": "InputSingleMedia",
      "description": [
        "A single media in an album or grouped media¹ sent with messages.sendMultiMedia²."
      ],
      "links": [
        "https://core.telegram.org/api/files#albums-grouped-media",
        "https://core.telegram.org/method/messages.sendMultiMedia"
      ]
    },
    "InputStickerSet": {
      "name": "InputStickerSet",
      "description": [
        "Represents a stickerset"
      ]
    },
    "InputStickerSetItem": {
      "name": "InputStickerSetItem",
      "description": [
        "Sticker"
      ]
    },
    "InputStickeredMedia": {
      "name": "InputStickeredMedia",
      "description": [
        "Represents a media with attached stickers"
      ]
    },
    "InputTheme": {
      "name": "InputTheme",
      "description": [
        "Cloud theme"
      ]
    },
    "InputThemeSettings": {
      "name": "InputThemeSettings",
      "description": [
        "Theme settings"
      ]
    },
    "InputUser": {
      "name": "InputUser",
      "description": [
        "Defines a user for subsequent interaction."
      ]
    },
    "InputWallPaper": {
      "name": "InputWallPaper",
      "description": [
        "Wallpaper"
      ]
    },
    "InputWebDocument": {
      "name": "InputWebDocument",
      "description": [
        "Specifies a document that will have to be downloaded from the URL by the telegram servers"
      ]
    },
    "InputWebFileLocation": {
      "name": "InputWebFileLocation",
      "description": [
        "Location of remote file"
      ]
    },
    "Invoice": {
      "name": "Invoice",
      "description": [
        "Invoice"
      ]
    },
    "JSONObjectValue": {
      "name": "JSONObjectValue",
      "description": [
        "JSON key: value pair"
      ]
    },
    "JSONValue": {
      "name": "JSONValue",
      "description": [
        "JSON value"
      ]
    },
    "KeyboardButton": {
      "name": "KeyboardButton",
      "description": [
        "Bot or inline keyboard buttons"
      ]
    },
    "KeyboardButtonRow": {
      "name": "KeyboardButtonRow",
      "description": [
        "Bot or inline keyboard rows"
      ]
    },
    "LabeledPrice": {
      "name": "LabeledPrice",
      "description": [
        "Labeled pricetag"
      ]
    },
    "LangPackDifference": {
      "name": "LangPackDifference",
      "description": [
        "Language pack changes"
      ]
    },
    "LangPackLanguage": {
      "name": "LangPackLanguage",
      "description": [
        "Language pack language"
      ]
    },
    "LangPackString": {
      "name": "LangPackString",
      "description": [
        "Language pack string"
      ]
    },
    "MaskCoords": {
      "name": "MaskCoords",
      "description": [
        "Mask coordinates (if this is a mask sticker, attached to a photo)"
      ]
    },
    "Message": {
      "name": "Message",
      "description": [
        "Object describing a message."
      ]
    },
    "MessageAction": {
      "name": "MessageAction",
      "description": [
        "Object describing actions connected to a service message."
      ]
    },
    "MessageEntity": {
      "name": "MessageEntity",
      "description": [
        "Message entities, representing styled text in a message"
      ]
    },
    "MessageFwdHeader": {
      "name": "MessageFwdHeader",
      "description": [
        "Info about a forwarded message"
      ]
    },
    "MessageInteractionCounters": {
      "name": "MessageInteractionCounters",
      "description": [
        "Message interaction counters"
      ]
    },
    "MessageMedia": {
      "name": "MessageMedia",
      "description": [
        "Media"
      ]
    },
    "MessageRange": {
      "name": "MessageRange",
      "description": [
        "Indicates a range of chat messages"
      ]
    },
    "MessageReplies": {
      "name": "MessageReplies",
      "description": [
        "Info about post comments (for channels) or message replies (for groups)¹"
      ],
      "links": [
        "https://core.telegram.org/api/threads"
      ]
    },
    "MessageReplyHeader": {
      "name": "MessageReplyHeader",
      "description": [
        "Reply information"
      ]
    },
    "MessageUserVote": {
      "name": "MessageUserVote",
      "description": [
        "How a user voted in a poll"
      ]
    },
    "MessageViews": {
      "name": "MessageViews",
      "description": [
        "View, forward counter + info about replies of a specific message"
      ]
    },
    "Messages.AffectedMessages": {
      "name": "Messages.AffectedMessages",
      "description": [
        "Messages affected by changes"
      ]
    },
    "Messages.AllStickers": {
      "name": "Messages.AllStickers",
      "description": [
        "All stickers"
      ]
    },
    "Messages.ArchivedStickers": {
      "name": "Messages.ArchivedStickers",
      "description": [
        "Archived stickers"
      ]
    },
    "Messages.BotCallbackAnswer": {
      "name": "Messages.BotCallbackAnswer",
      "description": [
        "Callback answer of bot"
      ]
    },
    "Messages.DhConfig": {
      "name": "Messages.DhConfig",
      "description": [
        "Contains info on cofiguring parameters for key generation by Diffie-Hellman protocol."
      ]
    },
    "Messages.FavedStickers": {
      "name": "Messages.FavedStickers",
      "description": [
        "Favorited stickers"
      ]
    },
    "Messages.FeaturedStickers": {
      "name": "Messages.FeaturedStickers",
      "description": [
        "Featured stickers"
      ]
    },
    "Messages.FoundStickerSets": {
      "name": "Messages.FoundStickerSets",
      "description": [
        "Found stickersets"
      ]
    },
    "Messages.HighScores": {
      "name": "Messages.HighScores",
      "description": [
        "High scores (in games)"
      ]
    },
    "Messages.MessageEditData": {
      "name": "Messages.MessageEditData",
      "description": [
        "Message edit data for media"
      ]
    },
    "Messages.PeerDialogs": {
      "name": "Messages.PeerDialogs",
      "description": [
        "List of dialogs"
      ]
    },
    "Messages.RecentStickers": {
      "name": "Messages.RecentStickers",
      "description": [
        "Recent stickers"
      ]
    },
    "Messages.SavedGifs": {
      "name": "Messages.SavedGifs",
      "description": [
        "Saved GIFs"
      ]
    },
    "Messages.SearchCounter": {
      "name": "Messages.SearchCounter",
      "description": [
        "Number of results that would be returned by a search"
      ]
    },
    "Messages.SentEncryptedMessage": {
      "name": "Messages.SentEncryptedMessage",
      "description": [
        "Contains info on message sent to an encrypted chat."
      ]
    },
    "Messages.StickerSet": {
      "name": "Messages.StickerSet",
      "description": [
        "Stickerset"
      ]
    },
    "Messages.StickerSetInstallResult": {
      "name": "Messages.StickerSetInstallResult",
      "description": [
        "Result of stickerset installation process"
      ]
    },
    "Messages.Stickers": {
      "name": "Messages.Stickers",
      "description": [
        "Stickers"
      ]
    },
    "MessagesFilter": {
      "name": "MessagesFilter",
      "description": [
        "Object describes message filter."
      ]
    },
    "NearestDc": {
      "name": "NearestDc",
      "description": [
        "Object contains info on nearest data centre."
      ]
    },
    "NotifyPeer": {
      "name": "NotifyPeer",
      "description": [
        "Object defines the set of users and/or groups that generate notifications."
      ]
    },
    "Null": {
      "name": "Null",
      "description": [
        "Object corresponds to an arbitrary empty object."
      ]
    },
    "Page": {
      "name": "Page",
      "description": [
        "Instant view¹ page"
      ],
      "links": [
        "https://instantview.telegram.org"
      ]
    },
    "PageBlock": {
      "name": "PageBlock",
      "description": [
        "Represents an instant view page element¹"
      ],
      "links": [
        "https://instantview.telegram.org"
      ]
    },
    "PageCaption": {
      "name": "PageCaption",
      "description": [
        "Page caption"
      ]
    },
    "PageListItem": {
      "name": "PageListItem",
      "description": [
        "Item in block list"
      ]
    },
    "PageListOrderedItem": {
      "name": "PageListOrderedItem",
      "description": [
        "Represents an instant view ordered list¹"
      ],
      "links": [
        "https://instantview.telegram.org"
      ]
    },
    "PageRelatedArticle": {
      "name": "PageRelatedArticle",
      "description": [
        "Related articles"
      ]
    },
    "PageTableCell": {
      "name": "PageTableCell",
      "description": [
        "Represents a table in an instant view table¹"
      ],
      "links": [
        "https://instantview.telegram.org"
      ]
    },
    "PageTableRow": {
      "name": "PageTableRow",
      "description": [
        "Table row"
      ]
    },
    "PasswordKdfAlgo": {
      "name": "PasswordKdfAlgo",
      "description": [
        "Key derivation function to use when generating the password hash for SRP two-factor authorization¹"
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ]
    },
    "PaymentCharge": {
      "name": "PaymentCharge",
      "description": [
        "Charged payment"
      ]
    },
    "PaymentRequestedInfo": {
      "name": "PaymentRequestedInfo",
      "description": [
        "Requested payment info"
      ]
    },
    "PaymentSavedCredentials": {
      "name": "PaymentSavedCredentials",
      "description": [
        "Saved payment credentials"
      ]
    },
    "Payments.PaymentForm": {
      "name": "Payments.PaymentForm",
      "description": [
        "Payment form"
      ]
    },
    "Payments.PaymentReceipt": {
      "name": "Payments.PaymentReceipt",
      "description": [
        "Payment receipt"
      ]
    },
    "Payments.PaymentResult": {
      "name": "Payments.PaymentResult",
      "description": [
        "Payment result"
      ]
    },
    "Payments.SavedInfo": {
      "name": "Payments.SavedInfo",
      "description": [
        "Saved payment info"
      ]
    },
    "Payments.ValidatedRequestedInfo": {
      "name": "Payments.ValidatedRequestedInfo",
      "description": [
        "Validated requested info"
      ]
    },
    "Peer": {
      "name": "Peer",
      "description": [
        "Chat partner or group."
      ]
    },
    "PeerBlocked": {
      "name": "PeerBlocked",
      "description": [
        "Info about a blocked user"
      ]
    },
    "PeerLocated": {
      "name": "PeerLocated",
      "description": [
        "Geolocated peer"
      ]
    },
    "PeerNotifySettings": {
      "name": "PeerNotifySettings",
      "description": [
        "Notification settings."
      ]
    },
    "PeerSettings": {
      "name": "PeerSettings",
      "description": [
        "Peer settings"
      ]
    },
    "Phone.PhoneCall": {
      "name": "Phone.PhoneCall",
      "description": [
        "Phone call"
      ]
    },
    "PhoneCall": {
      "name": "PhoneCall",
      "description": [
        "Phone call"
      ]
    },
    "PhoneCallDiscardReason": {
      "name": "PhoneCallDiscardReason",
      "description": [
        "Why was the phone call discarded?"
      ]
    },
    "PhoneCallProtocol": {
      "name": "PhoneCallProtocol",
      "description": [
        "Phone call protocol"
      ]
    },
    "PhoneConnection": {
      "name": "PhoneConnection",
      "description": [
        "Phone call connection"
      ]
    },
    "Photo": {
      "name": "Photo",
      "description": [
        "Object describes a photo."
      ]
    },
    "PhotoSize": {
      "name": "PhotoSize",
      "description": [
        "Location of a certain size of a picture"
      ]
    },
    "Poll": {
      "name": "Poll",
      "description": [
        "Indicates a poll message"
      ]
    },
    "PollAnswer": {
      "name": "PollAnswer",
      "description": [
        "Indicates a possible answer to a poll¹."
      ],
      "links": [
        "https://core.telegram.org/type/Poll"
      ]
    },
    "PollAnswerVoters": {
      "name": "PollAnswerVoters",
      "description": [
        "How users voted on a certain poll answer"
      ]
    },
    "PollResults": {
      "name": "PollResults",
      "description": [
        "Results of poll"
      ]
    },
    "PopularContact": {
      "name": "PopularContact",
      "description": [
        "Popular contact"
      ]
    },
    "PostAddress": {
      "name": "PostAddress",
      "description": [
        "Shipping address"
      ]
    },
    "PrivacyKey": {
      "name": "PrivacyKey",
      "description": [
        "Privacy key"
      ]
    },
    "PrivacyRule": {
      "name": "PrivacyRule",
      "description": [
        "Privacy rule"
      ]
    },
    "ReceivedNotifyMessage": {
      "name": "ReceivedNotifyMessage",
      "description": [
        "Confirmation of message receipt"
      ]
    },
    "RecentMeUrl": {
      "name": "RecentMeUrl",
      "description": [
        "Recent t.me urls"
      ]
    },
    "ReplyMarkup": {
      "name": "ReplyMarkup",
      "description": [
        "Reply markup for bot and inline keyboards"
      ]
    },
    "ReportReason": {
      "name": "ReportReason",
      "description": [
        "Report reason"
      ]
    },
    "RestrictionReason": {
      "name": "RestrictionReason",
      "description": [
        "Restriction reason"
      ]
    },
    "RichText": {
      "name": "RichText",
      "description": [
        "Rich text"
      ]
    },
    "SavedContact": {
      "name": "SavedContact",
      "description": [
        "Saved contact"
      ]
    },
    "SecureCredentialsEncrypted": {
      "name": "SecureCredentialsEncrypted",
      "description": [
        "Encrypted secure credentials"
      ]
    },
    "SecureData": {
      "name": "SecureData",
      "description": [
        "Secure passport¹ data, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#securedata"
      ]
    },
    "SecureFile": {
      "name": "SecureFile",
      "description": [
        "Secure passport¹ file, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#inputsecurefile"
      ]
    },
    "SecurePasswordKdfAlgo": {
      "name": "SecurePasswordKdfAlgo",
      "description": [
        "KDF algorithm to use for computing telegram passport¹ hash"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ]
    },
    "SecurePlainData": {
      "name": "SecurePlainData",
      "description": [
        "Plaintext verified passport data¹."
      ],
      "links": [
        "https://core.telegram.org/passport/encryption#secureplaindata"
      ]
    },
    "SecureRequiredType": {
      "name": "SecureRequiredType",
      "description": [
        "Required secure file type"
      ]
    },
    "SecureSecretSettings": {
      "name": "SecureSecretSettings",
      "description": [
        "Telegram passport¹ settings"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ]
    },
    "SecureValue": {
      "name": "SecureValue",
      "description": [
        "Secure tgpassport value"
      ]
    },
    "SecureValueError": {
      "name": "SecureValueError",
      "description": [
        "Secure value error"
      ]
    },
    "SecureValueHash": {
      "name": "SecureValueHash",
      "description": [
        "Secure value hash"
      ]
    },
    "SecureValueType": {
      "name": "SecureValueType",
      "description": [
        "Secure value type"
      ]
    },
    "SendMessageAction": {
      "name": "SendMessageAction",
      "description": [
        "User actions. Use this to provide users with detailed info about their chat partners' actions: typing or sending attachments of all kinds."
      ]
    },
    "ShippingOption": {
      "name": "ShippingOption",
      "description": [
        "Shipping options"
      ]
    },
    "Stats.BroadcastStats": {
      "name": "Stats.BroadcastStats",
      "description": [
        "Channel statistics"
      ]
    },
    "StatsAbsValueAndPrev": {
      "name": "StatsAbsValueAndPrev",
      "description": [
        "Channel statistics value pair"
      ]
    },
    "StatsDateRangeDays": {
      "name": "StatsDateRangeDays",
      "description": [
        "Channel statistics date range"
      ]
    },
    "StatsGraph": {
      "name": "StatsGraph",
      "description": [
        "Channel statistics graph"
      ]
    },
    "StatsGroupTopAdmin": {
      "name": "StatsGroupTopAdmin",
      "description": [
        "Most active admin in a supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ]
    },
    "StatsGroupTopInviter": {
      "name": "StatsGroupTopInviter",
      "description": [
        "Most active inviter in a supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ]
    },
    "StatsGroupTopPoster": {
      "name": "StatsGroupTopPoster",
      "description": [
        "Most active user in a supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ]
    },
    "StatsPercentValue": {
      "name": "StatsPercentValue",
      "description": [
        "Channel statistics percentage"
      ]
    },
    "StatsURL": {
      "name": "StatsURL",
      "description": [
        "URL with chat statistics"
      ]
    },
    "StickerPack": {
      "name": "StickerPack",
      "description": [
        "Stickerpack"
      ]
    },
    "StickerSet": {
      "name": "StickerSet",
      "description": [
        "Represents a stickerset (stickerpack)"
      ]
    },
    "StickerSetCovered": {
      "name": "StickerSetCovered",
      "description": [
        "Stickerset, with a specific sticker as preview"
      ]
    },
    "Theme": {
      "name": "Theme",
      "description": [
        "Cloud theme"
      ]
    },
    "ThemeSettings": {
      "name": "ThemeSettings",
      "description": [
        "Theme settings"
      ]
    },
    "TopPeer": {
      "name": "TopPeer",
      "description": [
        "Top peer"
      ]
    },
    "TopPeerCategory": {
      "name": "TopPeerCategory",
      "description": [
        "Top peer category"
      ]
    },
    "TopPeerCategoryPeers": {
      "name": "TopPeerCategoryPeers",
      "description": [
        "Top peers by top peer category"
      ]
    },
    "True": {
      "name": "True",
      "description": [
        "See predefined identifiers¹."
      ],
      "links": [
        "https://core.telegram.org/mtproto/TL-formal#predefined-identifiers"
      ]
    },
    "Update": {
      "name": "Update",
      "description": [
        "Object contains info on events occured."
      ]
    },
    "Updates": {
      "name": "Updates",
      "description": [
        "Object which is perceived by the client without a call on its part when an event occurs."
      ]
    },
    "Upload.WebFile": {
      "name": "Upload.WebFile",
      "description": [
        "Remote file"
      ]
    },
    "UrlAuthResult": {
      "name": "UrlAuthResult",
      "description": [
        "URL authorization result"
      ]
    },
    "User": {
      "name": "User",
      "description": [
        "Object defines a user."
      ]
    },
    "UserFull": {
      "name": "UserFull",
      "description": [
        "Object contains extended user info."
      ]
    },
    "UserProfilePhoto": {
      "name": "UserProfilePhoto",
      "description": [
        "Object contains info on the user's profile photo."
      ]
    },
    "UserStatus": {
      "name": "UserStatus",
      "description": [
        "User online status"
      ]
    },
    "Vector t": {
      "name": "Vector t",
      "description": [
        "Universal vector."
      ]
    },
    "VideoSize": {
      "name": "VideoSize",
      "description": [
        "Represents an animated video thumbnail"
      ]
    },
    "WallPaper": {
      "name": "WallPaper",
      "description": [
        "Object contains info on a wallpaper."
      ]
    },
    "WallPaperSettings": {
      "name": "WallPaperSettings",
      "description": [
        "Wallpaper settings"
      ]
    },
    "WebAuthorization": {
      "name": "WebAuthorization",
      "description": [
        "Web authorization"
      ]
    },
    "WebDocument": {
      "name": "WebDocument",
      "description": [
        "Remote document"
      ]
    },
    "WebPage": {
      "name": "WebPage",
      "description": [
        "Instant View¹ webpage preview"
      ],
      "links": [
        "https://instantview.telegram.org"
      ]
    },
    "WebPageAttribute": {
      "name": "WebPageAttribute",
      "description": [
        "Webpage attributes"
      ]
    },
    "account.ContentSettings": {
      "name": "account.ContentSettings",
      "description": [
        "Sensitive content settings"
      ]
    },
    "account.Password": {
      "name": "account.Password",
      "description": [
        "Configuration for two-factor authorization"
      ]
    },
    "account.PasswordInputSettings": {
      "name": "account.PasswordInputSettings",
      "description": [
        "Constructor for setting up a new 2FA SRP password¹"
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ]
    },
    "account.PasswordSettings": {
      "name": "account.PasswordSettings",
      "description": [
        "Private info associated to the password info (recovery email, telegram passport¹ info \u0026 so on)"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ]
    },
    "account.SentEmailCode": {
      "name": "account.SentEmailCode",
      "description": [
        "The email code that was sent"
      ]
    },
    "account.Themes": {
      "name": "account.Themes",
      "description": [
        "Installed themes"
      ]
    },
    "auth.Authorization": {
      "name": "auth.Authorization",
      "description": [
        "Oject contains info on user authorization."
      ]
    },
    "auth.CodeType": {
      "name": "auth.CodeType",
      "description": [
        "Type of verification code that will be sent next if you call the resendCode method"
      ]
    },
    "auth.LoginToken": {
      "name": "auth.LoginToken",
      "description": [
        "Login token (for QR code login)"
      ]
    },
    "auth.PasswordRecovery": {
      "name": "auth.PasswordRecovery",
      "description": [
        "Recovery info of a 2FA password¹, only for accounts with a recovery email configured²."
      ],
      "links": [
        "https://core.telegram.org/api/srp",
        "https://core.telegram.org/api/srp#email-verification"
      ]
    },
    "auth.SentCode": {
      "name": "auth.SentCode",
      "description": [
        "Contains info on a confirmation code message sent via SMS, phone call or Telegram."
      ]
    },
    "auth.SentCodeType": {
      "name": "auth.SentCodeType",
      "description": [
        "Type of the verification code that was sent"
      ]
    },
    "bytes": {
      "name": "bytes",
      "description": [
        "Basic bare type. It is an alias of the string¹ type, with the difference that the value may contain arbitrary byte sequences, including invalid UTF-8 sequences.",
        "When computing crc32 for a constructor or method it is necessary to replace all byte types with string types.",
        "A basic bare type. Values of type string look differently depending on the length L of the string being serialized:",
        "All strings passed to the API must be encoded in UTF-8. When arbitrary byte sequences have to be serialized, bytes¹ alias is to be used.",
        "Further details on basic types»¹"
      ],
      "links": [
        "https://core.telegram.org/type/string",
        "https://core.telegram.org/type/bytes",
        "https://core.telegram.org/mtproto/serialize"
      ]
    },
    "contacts.Blocked": {
      "name": "contacts.Blocked",
      "description": [
        "Info on users from the current user's black list."
      ]
    },
    "contacts.Contacts": {
      "name": "contacts.Contacts",
      "description": [
        "Info on the current user's contact list."
      ]
    },
    "contacts.Found": {
      "name": "contacts.Found",
      "description": [
        "Object contains info on users found by name substring and auxiliary data."
      ]
    },
    "contacts.ImportedContacts": {
      "name": "contacts.ImportedContacts",
      "description": [
        "Object contains info on succesfully imported contacts."
      ]
    },
    "double": {
      "name": "double",
      "description": [
        "A basic bare type, values of which correspond two-element sequences containing 64-bit real numbers in a standard double format.",
        "More on basic types»¹"
      ],
      "links": [
        "https://core.telegram.org/mtproto/serialize"
      ]
    },
    "help.AppUpdate": {
      "name": "help.AppUpdate",
      "description": [
        "Contains info on app update availability."
      ]
    },
    "help.CountriesList": {
      "name": "help.CountriesList",
      "description": [
        "Name, ISO code, localized name and phone codes/patterns of all available countries"
      ]
    },
    "help.Country": {
      "name": "help.Country",
      "description": [
        "Name, ISO code, localized name and phone codes/patterns of a specific country"
      ]
    },
    "help.CountryCode": {
      "name": "help.CountryCode",
      "description": [
        "Country code and phone number pattern of a specific country"
      ]
    },
    "help.InviteText": {
      "name": "help.InviteText",
      "description": [
        "Object contains info on the text of a message with an invitation."
      ]
    },
    "help.PromoData": {
      "name": "help.PromoData",
      "description": [
        "Info about pinned MTProxy or Public Service Announcement peers."
      ]
    },
    "help.Support": {
      "name": "help.Support",
      "description": [
        "Info about the support user, relevant to the current user."
      ]
    },
    "help.TermsOfService": {
      "name": "help.TermsOfService",
      "description": [
        "Contains info about the latest telegram Terms Of Service."
      ]
    },
    "int": {
      "name": "int",
      "description": [
        "A basic bare type, the values of which correspond to single-element sequences, i.e. numbers from -2^31 to 2^31-1 which in this case represent themselves.",
        "More on basic types »¹"
      ],
      "links": [
        "https://core.telegram.org/mtproto/serialize"
      ]
    },
    "long": {
      "name": "long",
      "description": [
        "A basic bare type, elements of which correspond to two-element sequences, representing 64-bit signed numbers (little-endian).",
        "More on basic types »¹"
      ],
      "links": [
        "https://core.telegram.org/mtproto/serialize"
      ]
    },
    "messages.AffectedHistory": {
      "name": "messages.AffectedHistory",
      "description": [
        "Object contains info on affected part of communication history with the user or in a chat."
      ]
    },
    "messages.BotResults": {
      "name": "messages.BotResults",
      "description": [
        "Result of a query to an inline bot"
      ]
    },
    "messages.ChatFull": {
      "name": "messages.ChatFull",
      "description": [
        "Object contains extended info on chat with auxiliary data."
      ]
    },
    "messages.Chats": {
      "name": "messages.Chats",
      "description": [
        "Object contains list of chats with auxiliary data."
      ]
    },
    "messages.Dialogs": {
      "name": "messages.Dialogs",
      "description": [
        "Object contains a list of chats with messages and auxiliary data."
      ]
    },
    "messages.DiscussionMessage": {
      "name": "messages.DiscussionMessage",
      "description": [
        "Info about a message thread"
      ]
    },
    "messages.InactiveChats": {
      "name": "messages.InactiveChats",
      "description": [
        "Inactive chat list"
      ]
    },
    "messages.MessageViews": {
      "name": "messages.MessageViews",
      "description": [
        "View, forward counter + info about replies"
      ]
    },
    "messages.Messages": {
      "name": "messages.Messages",
      "description": [
        "Object contains infor on list of messages with auxiliary data."
      ]
    },
    "messages.VotesList": {
      "name": "messages.VotesList",
      "description": [
        "How users voted in a poll"
      ]
    },
    "payments.BankCardData": {
      "name": "payments.BankCardData",
      "description": [
        "Credit card info, provided by the card's bank(s)"
      ]
    },
    "photos.Photo": {
      "name": "photos.Photo",
      "description": [
        "Photo with auxiliary data."
      ]
    },
    "photos.Photos": {
      "name": "photos.Photos",
      "description": [
        "Object contains list of photos with auxiliary data."
      ]
    },
    "stats.MegagroupStats": {
      "name": "stats.MegagroupStats",
      "description": [
        "Supergroup statistics"
      ]
    },
    "stats.MessageStats": {
      "name": "stats.MessageStats",
      "description": [
        "Message statistics"
      ]
    },
    "storage.FileType": {
      "name": "storage.FileType",
      "description": [
        "Object describes the file type."
      ]
    },
    "string": {
      "name": "string",
      "description": [
        "A basic bare type. Values of type string look differently depending on the length L of the string being serialized:",
        "All strings passed to the API must be encoded in UTF-8. When arbitrary byte sequences have to be serialized, bytes¹ alias is to be used.",
        "Further details on basic types»¹",
        "Basic bare type. It is an alias of the string¹ type, with the difference that the value may contain arbitrary byte sequences, including invalid UTF-8 sequences.",
        "When computing crc32 for a constructor or method it is necessary to replace all byte types with string types."
      ],
      "links": [
        "https://core.telegram.org/type/bytes",
        "https://core.telegram.org/mtproto/serialize",
        "https://core.telegram.org/type/string"
      ]
    },
    "updates.ChannelDifference": {
      "name": "updates.ChannelDifference",
      "description": [
        "Contains the difference (new messages) between our local channel state and the remote state"
      ]
    },
    "updates.Difference": {
      "name": "updates.Difference",
      "description": [
        "Occurred changes."
      ]
    },
    "updates.State": {
      "name": "updates.State",
      "description": [
        "Object contains info on state for further updates."
      ]
    },
    "upload.CdnFile": {
      "name": "upload.CdnFile",
      "description": [
        "Represents the download status of a CDN file"
      ]
    },
    "upload.File": {
      "name": "upload.File",
      "description": [
        "Contains info on file."
      ]
    }
  },
  "methods": {
    "account.acceptAuthorization": {
      "name": "account.acceptAuthorization",
      "description": [
        "Sends a Telegram Passport authorization form, effectively sharing data with the service"
      ],
      "parameters": {
        "bot_id": {
          "description": "Bot ID",
          "links": null
        },
        "credentials": {
          "description": "Encrypted values",
          "links": null
        },
        "public_key": {
          "description": "Service's public key",
          "links": null
        },
        "scope": {
          "description": "Telegram Passport element types requested by the service",
          "links": null
        },
        "value_hashes": {
          "description": "Types of values sent and their hashes",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.cancelPasswordEmail": {
      "name": "account.cancelPasswordEmail",
      "description": [
        "Cancel the code that was sent to verify an email to use as 2FA recovery method¹."
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ],
      "bot_can_use": true
    },
    "account.changePhone": {
      "name": "account.changePhone",
      "description": [
        "Change the phone number of the current account"
      ],
      "parameters": {
        "phone_code": {
          "description": "Phone code received when calling account.sendChangePhoneCode¹",
          "links": [
            "https://core.telegram.org/method/account.sendChangePhoneCode"
          ]
        },
        "phone_code_hash": {
          "description": "Phone code hash received when calling account.sendChangePhoneCode¹",
          "links": [
            "https://core.telegram.org/method/account.sendChangePhoneCode"
          ]
        },
        "phone_number": {
          "description": "New phone number",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PHONE_CODE_EMPTY",
          "description": "phone_code is missing"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_INVALID",
          "description": "The phone number is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.checkUsername": {
      "name": "account.checkUsername",
      "description": [
        "Validates a username and checks availability."
      ],
      "parameters": {
        "username": {
          "description": "usernameAccepted characters: A-z (case-insensitive), 0-9 and underscores.Length: 5-32 characters.",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "USERNAME_INVALID",
          "description": "Unacceptable username"
        }
      ],
      "bot_can_use": true
    },
    "account.confirmPasswordEmail": {
      "name": "account.confirmPasswordEmail",
      "description": [
        "Verify an email to use as 2FA recovery method¹."
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ],
      "parameters": {
        "code": {
          "description": "The phone code that was received after setting a recovery email¹",
          "links": [
            "https://core.telegram.org/api/srp#email-verification"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CODE_INVALID",
          "description": "Code invalid"
        },
        {
          "code": 400,
          "type": "EMAIL_HASH_EXPIRED",
          "description": "Email hash expired"
        }
      ],
      "bot_can_use": true
    },
    "account.confirmPhone": {
      "name": "account.confirmPhone",
      "description": [
        "Confirm a phone number to cancel account deletion, for more info click here »¹"
      ],
      "links": [
        "https://core.telegram.org/api/account-deletion"
      ],
      "parameters": {
        "phone_code": {
          "description": "SMS code, for more info click here »¹",
          "links": [
            "https://core.telegram.org/api/account-deletion"
          ]
        },
        "phone_code_hash": {
          "description": "Phone code hash, for more info click here »¹",
          "links": [
            "https://core.telegram.org/api/account-deletion"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CODE_HASH_INVALID",
          "description": "Code hash invalid"
        },
        {
          "code": 400,
          "type": "PHONE_CODE_EMPTY",
          "description": "phone_code is missing"
        }
      ],
      "bot_can_use": true
    },
    "account.createTheme": {
      "name": "account.createTheme",
      "description": [
        "Create a theme"
      ],
      "parameters": {
        "document": {
          "description": "Theme file",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "settings": {
          "description": "Theme settings",
          "links": null
        },
        "slug": {
          "description": "Unique theme ID",
          "links": null
        },
        "title": {
          "description": "Theme name",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.deleteAccount": {
      "name": "account.deleteAccount",
      "description": [
        "Delete the user's account from the telegram servers. Can be used, for example, to delete the account of a user that provided the login code, but forgot the 2FA password and no recovery method is configured¹."
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ],
      "parameters": {
        "reason": {
          "description": "Why is the account being deleted, can be empty",
          "links": null
        }
      },
      "errors": [
        {
          "code": 420,
          "type": "2FA_CONFIRM_WAIT_X",
          "description": "Since this account is active and protected by a 2FA password, we will delete it in 1 week for security purposes. You can cancel this process at any time, you'll be able to reset your account in X seconds."
        }
      ],
      "bot_can_use": true
    },
    "account.deleteSecureValue": {
      "name": "account.deleteSecureValue",
      "description": [
        "Delete stored Telegram Passport¹ documents, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#encryption"
      ],
      "parameters": {
        "types": {
          "description": "Document types to delete",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.finishTakeoutSession": {
      "name": "account.finishTakeoutSession",
      "description": [
        "Finish account takeout session"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "success": {
          "description": "Data exported successfully",
          "links": null
        }
      },
      "errors": [
        {
          "code": 403,
          "type": "TAKEOUT_REQUIRED",
          "description": "A takeout session has to be initialized, first"
        }
      ],
      "bot_can_use": true
    },
    "account.getAccountTTL": {
      "name": "account.getAccountTTL",
      "description": [
        "Get days to live of account"
      ],
      "bot_can_use": true
    },
    "account.getAllSecureValues": {
      "name": "account.getAllSecureValues",
      "description": [
        "Get all saved Telegram Passport¹ documents, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#encryption"
      ],
      "bot_can_use": true
    },
    "account.getAuthorizationForm": {
      "name": "account.getAuthorizationForm",
      "description": [
        "Returns a Telegram Passport authorization form for sharing data with a service"
      ],
      "parameters": {
        "bot_id": {
          "description": "User identifier of the service's bot",
          "links": null
        },
        "public_key": {
          "description": "Service's public key",
          "links": null
        },
        "scope": {
          "description": "Telegram Passport element types requested by the service",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.getAuthorizations": {
      "name": "account.getAuthorizations",
      "description": [
        "Get logged-in sessions"
      ],
      "bot_can_use": true
    },
    "account.getAutoDownloadSettings": {
      "name": "account.getAutoDownloadSettings",
      "description": [
        "Get media autodownload settings"
      ],
      "bot_can_use": true
    },
    "account.getContactSignUpNotification": {
      "name": "account.getContactSignUpNotification",
      "description": [
        "Whether the user will receive notifications when contacts sign up"
      ],
      "bot_can_use": true
    },
    "account.getContentSettings": {
      "name": "account.getContentSettings",
      "description": [
        "Get sensitive content settings"
      ],
      "bot_can_use": true
    },
    "account.getGlobalPrivacySettings": {
      "name": "account.getGlobalPrivacySettings",
      "description": [
        "Get global privacy settings"
      ],
      "bot_can_use": true
    },
    "account.getMultiWallPapers": {
      "name": "account.getMultiWallPapers",
      "description": [
        "Get info about multiple wallpapers"
      ],
      "parameters": {
        "wallpapers": {
          "description": "Wallpapers to fetch info about",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.getNotifyExceptions": {
      "name": "account.getNotifyExceptions",
      "description": [
        "Returns list of chats with non-default notification settings"
      ],
      "parameters": {
        "compare_sound": {
          "description": "If true, chats with non-default sound will also be returned",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "If specified, only chats of the specified category will be returned",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.getNotifySettings": {
      "name": "account.getNotifySettings",
      "description": [
        "Gets current notification settings for a given user/group, from all users/all groups."
      ],
      "parameters": {
        "peer": {
          "description": "Notification source",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.getPassword": {
      "name": "account.getPassword",
      "description": [
        "Obtain configuration for two-factor authorization with password"
      ],
      "bot_can_use": true
    },
    "account.getPasswordSettings": {
      "name": "account.getPasswordSettings",
      "description": [
        "Get private info associated to the password info (recovery email, telegram passport¹ info \u0026 so on)"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "parameters": {
        "password": {
          "description": "The password (see SRP¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PASSWORD_HASH_INVALID",
          "description": "The provided password hash is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.getPrivacy": {
      "name": "account.getPrivacy",
      "description": [
        "Get privacy settings of current account"
      ],
      "parameters": {
        "key": {
          "description": "Peer category whose privacy settings should be fetched",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PRIVACY_KEY_INVALID",
          "description": "The privacy key is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.getSecureValue": {
      "name": "account.getSecureValue",
      "description": [
        "Get saved Telegram Passport¹ document, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#encryption"
      ],
      "parameters": {
        "types": {
          "description": "Requested value types",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.getTheme": {
      "name": "account.getTheme",
      "description": [
        "Get theme information"
      ],
      "parameters": {
        "document_id": {
          "description": "Document ID",
          "links": null
        },
        "format": {
          "description": "Theme format, a string that identifies the theming engines supported by the client",
          "links": null
        },
        "theme": {
          "description": "Theme",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "THEME_FORMAT_INVALID",
          "description": "Invalid theme format provided"
        },
        {
          "code": 400,
          "type": "THEME_INVALID",
          "description": "Invalid theme provided"
        }
      ],
      "bot_can_use": true
    },
    "account.getThemes": {
      "name": "account.getThemes",
      "description": [
        "Get installed themes"
      ],
      "parameters": {
        "format": {
          "description": "Theme format, a string that identifies the theming engines supported by the client",
          "links": null
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "account.getTmpPassword": {
      "name": "account.getTmpPassword",
      "description": [
        "Get temporary payment password"
      ],
      "parameters": {
        "password": {
          "description": "SRP password parameters",
          "links": null
        },
        "period": {
          "description": "Time during which the temporary password will be valid, in seconds; should be between 60 and 86400",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PASSWORD_HASH_INVALID",
          "description": "The provided password hash is invalid"
        },
        {
          "code": 400,
          "type": "TMP_PASSWORD_DISABLED",
          "description": "The temporary password is disabled"
        }
      ],
      "bot_can_use": true
    },
    "account.getWallPaper": {
      "name": "account.getWallPaper",
      "description": [
        "Get info about a certain wallpaper"
      ],
      "parameters": {
        "wallpaper": {
          "description": "The wallpaper to get info about",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.getWallPapers": {
      "name": "account.getWallPapers",
      "description": [
        "Returns a list of available wallpapers."
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "account.getWebAuthorizations": {
      "name": "account.getWebAuthorizations",
      "description": [
        "Get web login widget¹ authorizations"
      ],
      "links": [
        "https://core.telegram.org/widgets/login"
      ],
      "bot_can_use": true
    },
    "account.initTakeoutSession": {
      "name": "account.initTakeoutSession",
      "description": [
        "Intialize account takeout session"
      ],
      "parameters": {
        "contacts": {
          "description": "Whether to export contacts",
          "links": null
        },
        "file_max_size": {
          "description": "Maximum size of files to export",
          "links": null
        },
        "files": {
          "description": "Whether to export files",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message_channels": {
          "description": "Whether to export messages in channels¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "message_chats": {
          "description": "Whether to export messages in legacy groups¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "message_megagroups": {
          "description": "Whether to export messages in supergroups¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "message_users": {
          "description": "Whether to export messages in private chats",
          "links": null
        }
      },
      "errors": [
        {
          "code": 420,
          "type": "TAKEOUT_INIT_DELAY_X",
          "description": "Wait X seconds before initing takeout"
        }
      ],
      "bot_can_use": true
    },
    "account.installTheme": {
      "name": "account.installTheme",
      "description": [
        "Install a theme"
      ],
      "parameters": {
        "dark": {
          "description": "Whether to install the dark version",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "format": {
          "description": "Theme format, a string that identifies the theming engines supported by the client",
          "links": null
        },
        "theme": {
          "description": "Theme to install",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.installWallPaper": {
      "name": "account.installWallPaper",
      "description": [
        "Install wallpaper"
      ],
      "parameters": {
        "settings": {
          "description": "Wallpaper settings",
          "links": null
        },
        "wallpaper": {
          "description": "Wallpaper to install",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.registerDevice": {
      "name": "account.registerDevice",
      "description": [
        "Register device to receive PUSH notifications¹"
      ],
      "links": [
        "https://core.telegram.org/api/push-updates"
      ],
      "parameters": {
        "app_sandbox": {
          "description": "If (boolTrue)¹ is transmitted, a sandbox-certificate will be used during transmission.",
          "links": [
            "https://core.telegram.org/constructor/boolTrue"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "no_muted": {
          "description": "Avoid receiving (silent and invisible background) notifications. Useful to save battery.",
          "links": null
        },
        "other_uids": {
          "description": "List of user identifiers of other users currently using the client",
          "links": null
        },
        "secret": {
          "description": "For FCM and APNS VoIP, optional encryption key used to encrypt push notifications",
          "links": null
        },
        "token": {
          "description": "Device token",
          "links": null
        },
        "token_type": {
          "description": "Device token type.Possible values:1 - APNS (device token for apple push)2 - FCM (firebase token for google firebase)3 - MPNS (channel URI for microsoft push)4 - Simple push (endpoint for firefox's simple push API)5 - Ubuntu phone (token for ubuntu push)6 - Blackberry (token for blackberry push)7 - Unused8 - WNS (windows push)9 - APNS VoIP (token for apple push VoIP)10 - Web push (web push, see below)11 - MPNS VoIP (token for microsoft push VoIP)12 - Tizen (token for tizen push)For 10 web push, the token must be a JSON-encoded object containing the keys described in PUSH updates¹",
          "links": [
            "https://core.telegram.org/api/push-updates"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "TOKEN_INVALID",
          "description": "The provided token is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.reportPeer": {
      "name": "account.reportPeer",
      "description": [
        "Report a peer for violation of telegram's Terms of Service"
      ],
      "parameters": {
        "peer": {
          "description": "The peer to report",
          "links": null
        },
        "reason": {
          "description": "The reason why this peer is being reported",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.resendPasswordEmail": {
      "name": "account.resendPasswordEmail",
      "description": [
        "Resend the code to verify an email to use as 2FA recovery method¹."
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ],
      "bot_can_use": true
    },
    "account.resetAuthorization": {
      "name": "account.resetAuthorization",
      "description": [
        "Log out an active authorized session¹ by its hash"
      ],
      "links": [
        "https://core.telegram.org/api/auth"
      ],
      "parameters": {
        "hash": {
          "description": "Session hash",
          "links": null
        }
      },
      "errors": [
        {
          "code": 406,
          "type": "FRESH_RESET_AUTHORISATION_FORBIDDEN",
          "description": "You can't logout other sessions if less than 24 hours have passed since you logged on the current session"
        },
        {
          "code": 400,
          "type": "HASH_INVALID",
          "description": "The provided hash is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.resetNotifySettings": {
      "name": "account.resetNotifySettings",
      "description": [
        "Resets all notification settings from users and groups."
      ],
      "bot_can_use": true
    },
    "account.resetWallPapers": {
      "name": "account.resetWallPapers",
      "description": [
        "Delete installed wallpapers"
      ],
      "bot_can_use": true
    },
    "account.resetWebAuthorization": {
      "name": "account.resetWebAuthorization",
      "description": [
        "Log out an active web telegram login¹ session"
      ],
      "links": [
        "https://core.telegram.org/widgets/login"
      ],
      "parameters": {
        "hash": {
          "description": "Session¹ hash",
          "links": [
            "https://core.telegram.org/constructor/webAuthorization"
          ]
        }
      },
      "bot_can_use": true
    },
    "account.resetWebAuthorizations": {
      "name": "account.resetWebAuthorizations",
      "description": [
        "Reset all active web telegram login¹ sessions"
      ],
      "links": [
        "https://core.telegram.org/widgets/login"
      ],
      "bot_can_use": true
    },
    "account.saveAutoDownloadSettings": {
      "name": "account.saveAutoDownloadSettings",
      "description": [
        "Change media autodownload settings"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "high": {
          "description": "Whether to save settings in the high data usage preset",
          "links": null
        },
        "low": {
          "description": "Whether to save settings in the low data usage preset",
          "links": null
        },
        "settings": {
          "description": "Media autodownload settings",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.saveSecureValue": {
      "name": "account.saveSecureValue",
      "description": [
        "Securely save Telegram Passport¹ document, for more info see the passport docs »²"
      ],
      "links": [
        "https://core.telegram.org/passport",
        "https://core.telegram.org/passport/encryption#encryption"
      ],
      "parameters": {
        "secure_secret_id": {
          "description": "Passport secret hash, for more info see the passport docs »¹",
          "links": [
            "https://core.telegram.org/passport/encryption#encryption"
          ]
        },
        "value": {
          "description": "Secure value, for more info see the passport docs »¹",
          "links": [
            "https://core.telegram.org/passport/encryption#encryption"
          ]
        }
      },
      "bot_can_use": true
    },
    "account.saveTheme": {
      "name": "account.saveTheme",
      "description": [
        "Save a theme"
      ],
      "parameters": {
        "theme": {
          "description": "Theme to save",
          "links": null
        },
        "unsave": {
          "description": "Unsave",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.saveWallPaper": {
      "name": "account.saveWallPaper",
      "description": [
        "Install/uninstall wallpaper"
      ],
      "parameters": {
        "settings": {
          "description": "Wallpaper settings",
          "links": null
        },
        "unsave": {
          "description": "Uninstall wallpaper?",
          "links": null
        },
        "wallpaper": {
          "description": "Wallpaper to save",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.sendChangePhoneCode": {
      "name": "account.sendChangePhoneCode",
      "description": [
        "Verify a new phone number to associate to the current account"
      ],
      "parameters": {
        "phone_number": {
          "description": "New phone number",
          "links": null
        },
        "settings": {
          "description": "Phone code settings",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PHONE_NUMBER_INVALID",
          "description": "The phone number is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.sendConfirmPhoneCode": {
      "name": "account.sendConfirmPhoneCode",
      "description": [
        "Send confirmation code to cancel account deletion, for more info click here »¹"
      ],
      "links": [
        "https://core.telegram.org/api/account-deletion"
      ],
      "parameters": {
        "hash": {
          "description": "The hash from the service notification, for more info click here »¹",
          "links": [
            "https://core.telegram.org/api/account-deletion"
          ]
        },
        "settings": {
          "description": "Phone code settings",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "HASH_INVALID",
          "description": "The provided hash is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.sendVerifyEmailCode": {
      "name": "account.sendVerifyEmailCode",
      "description": [
        "Send the verification email code for telegram passport¹."
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "parameters": {
        "email": {
          "description": "The email where to send the code",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.sendVerifyPhoneCode": {
      "name": "account.sendVerifyPhoneCode",
      "description": [
        "Send the verification phone code for telegram passport¹."
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "parameters": {
        "phone_number": {
          "description": "The phone number to verify",
          "links": null
        },
        "settings": {
          "description": "Phone code settings",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.setAccountTTL": {
      "name": "account.setAccountTTL",
      "description": [
        "Set account self-destruction period"
      ],
      "parameters": {
        "ttl": {
          "description": "Time to live in days",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "TTL_DAYS_INVALID",
          "description": "The provided TTL is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.setContactSignUpNotification": {
      "name": "account.setContactSignUpNotification",
      "description": [
        "Toggle contact sign up notifications"
      ],
      "parameters": {
        "silent": {
          "description": "Whether to disable contact sign up notifications",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.setContentSettings": {
      "name": "account.setContentSettings",
      "description": [
        "Set sensitive content settings (for viewing or hiding NSFW content)"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "sensitive_enabled": {
          "description": "Enable NSFW content",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.setGlobalPrivacySettings": {
      "name": "account.setGlobalPrivacySettings",
      "description": [
        "Set global privacy settings"
      ],
      "parameters": {
        "settings": {
          "description": "Global privacy settings",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.setPrivacy": {
      "name": "account.setPrivacy",
      "description": [
        "Change privacy settings of current account"
      ],
      "parameters": {
        "key": {
          "description": "Peers to which the privacy rules apply",
          "links": null
        },
        "rules": {
          "description": "New privacy rules",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PRIVACY_KEY_INVALID",
          "description": "The privacy key is invalid"
        },
        {
          "code": 400,
          "type": "PRIVACY_VALUE_INVALID",
          "description": "The specified privacy rule combination is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.unregisterDevice": {
      "name": "account.unregisterDevice",
      "description": [
        "Deletes a device by its token, stops sending PUSH-notifications to it."
      ],
      "parameters": {
        "other_uids": {
          "description": "List of user identifiers of other users currently using the client",
          "links": null
        },
        "token": {
          "description": "Device token",
          "links": null
        },
        "token_type": {
          "description": "Device token type.Possible values:1 - APNS (device token for apple push)2 - FCM (firebase token for google firebase)3 - MPNS (channel URI for microsoft push)4 - Simple push (endpoint for firefox's simple push API)5 - Ubuntu phone (token for ubuntu push)6 - Blackberry (token for blackberry push)7 - Unused8 - WNS (windows push)9 - APNS VoIP (token for apple push VoIP)10 - Web push (web push, see below)11 - MPNS VoIP (token for microsoft push VoIP)12 - Tizen (token for tizen push)For 10 web push, the token must be a JSON-encoded object containing the keys described in PUSH updates¹",
          "links": [
            "https://core.telegram.org/api/push-updates"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "TOKEN_INVALID",
          "description": "The provided token is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.updateDeviceLocked": {
      "name": "account.updateDeviceLocked",
      "description": [
        "When client-side passcode lock feature is enabled, will not show message texts in incoming PUSH notifications¹."
      ],
      "links": [
        "https://core.telegram.org/api/push-updates"
      ],
      "parameters": {
        "period": {
          "description": "Inactivity period after which to start hiding message texts in PUSH notifications¹.",
          "links": [
            "https://core.telegram.org/api/push-updates"
          ]
        }
      },
      "bot_can_use": true
    },
    "account.updateNotifySettings": {
      "name": "account.updateNotifySettings",
      "description": [
        "Edits notification settings from a given user/group, from all users/all groups."
      ],
      "parameters": {
        "peer": {
          "description": "Notification source",
          "links": null
        },
        "settings": {
          "description": "Notification settings",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "SETTINGS_INVALID",
          "description": "Invalid settings were provided"
        }
      ],
      "bot_can_use": true
    },
    "account.updatePasswordSettings": {
      "name": "account.updatePasswordSettings",
      "description": [
        "Set a new 2FA password"
      ],
      "parameters": {
        "new_settings": {
          "description": "The new password (see SRP¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "password": {
          "description": "The old password (see SRP¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "EMAIL_UNCONFIRMED",
          "description": "Email unconfirmed"
        },
        {
          "code": 400,
          "type": "EMAIL_UNCONFIRMED_X",
          "description": "The provided email isn't confirmed, X is the length of the verification code that was just sent to the email: use account.verifyEmail to enter the received verification code and enable the recovery email."
        },
        {
          "code": 400,
          "type": "NEW_SALT_INVALID",
          "description": "The new salt is invalid"
        },
        {
          "code": 400,
          "type": "NEW_SETTINGS_INVALID",
          "description": "The new password settings are invalid"
        },
        {
          "code": 400,
          "type": "PASSWORD_HASH_INVALID",
          "description": "The old password hash is invalid"
        },
        {
          "code": 400,
          "type": "SRP_ID_INVALID",
          "description": "Invalid SRP ID provided"
        }
      ],
      "bot_can_use": true
    },
    "account.updateProfile": {
      "name": "account.updateProfile",
      "description": [
        "Updates user profile."
      ],
      "parameters": {
        "about": {
          "description": "New bio",
          "links": null
        },
        "first_name": {
          "description": "New user first name",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "last_name": {
          "description": "New user last name",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "ABOUT_TOO_LONG",
          "description": "About string too long"
        },
        {
          "code": 400,
          "type": "FIRSTNAME_INVALID",
          "description": "The first name is invalid"
        }
      ],
      "bot_can_use": true
    },
    "account.updateStatus": {
      "name": "account.updateStatus",
      "description": [
        "Updates online user status."
      ],
      "parameters": {
        "offline": {
          "description": "If (boolTrue)¹ is transmitted, user status will change to (userStatusOffline)².",
          "links": [
            "https://core.telegram.org/constructor/boolTrue",
            "https://core.telegram.org/constructor/userStatusOffline"
          ]
        }
      },
      "bot_can_use": true
    },
    "account.updateTheme": {
      "name": "account.updateTheme",
      "description": [
        "Update theme"
      ],
      "parameters": {
        "document": {
          "description": "Theme file",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "format": {
          "description": "Theme format, a string that identifies the theming engines supported by the client",
          "links": null
        },
        "settings": {
          "description": "Theme settings",
          "links": null
        },
        "slug": {
          "description": "Unique theme ID",
          "links": null
        },
        "theme": {
          "description": "Theme to update",
          "links": null
        },
        "title": {
          "description": "Theme name",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.updateUsername": {
      "name": "account.updateUsername",
      "description": [
        "Changes username for the current user."
      ],
      "parameters": {
        "username": {
          "description": "username or empty string if username is to be removedAccepted characters: a-z (case-insensitive), 0-9 and underscores.Length: 5-32 characters.",
          "links": null
        }
      },
      "errors": [
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        },
        {
          "code": 400,
          "type": "USERNAME_INVALID",
          "description": "Unacceptable username"
        },
        {
          "code": 400,
          "type": "USERNAME_NOT_MODIFIED",
          "description": "Username is not different from the current username"
        },
        {
          "code": 400,
          "type": "USERNAME_OCCUPIED",
          "description": "Username is taken"
        }
      ],
      "bot_can_use": true
    },
    "account.uploadTheme": {
      "name": "account.uploadTheme",
      "description": [
        "Upload theme"
      ],
      "parameters": {
        "file": {
          "description": "Theme file uploaded as described in files »¹",
          "links": [
            "https://core.telegram.org/api/files"
          ]
        },
        "file_name": {
          "description": "File name",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "mime_type": {
          "description": "MIME type, must be application/x-tgtheme-{format}, where format depends on the client",
          "links": null
        },
        "thumb": {
          "description": "Thumbnail",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "THEME_FILE_INVALID",
          "description": "Invalid theme file provided"
        }
      ],
      "bot_can_use": true
    },
    "account.uploadWallPaper": {
      "name": "account.uploadWallPaper",
      "description": [
        "Create and upload a new wallpaper"
      ],
      "parameters": {
        "file": {
          "description": "The JPG/PNG wallpaper",
          "links": null
        },
        "mime_type": {
          "description": "MIME type of uploaded wallpaper",
          "links": null
        },
        "settings": {
          "description": "Wallpaper settings",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "account.verifyEmail": {
      "name": "account.verifyEmail",
      "description": [
        "Verify an email address for telegram passport¹."
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "parameters": {
        "code": {
          "description": "The verification code that was received",
          "links": null
        },
        "email": {
          "description": "The email to verify",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "EMAIL_VERIFY_EXPIRED",
          "description": "The verification email has expired"
        }
      ],
      "bot_can_use": true
    },
    "account.verifyPhone": {
      "name": "account.verifyPhone",
      "description": [
        "Verify a phone number for telegram passport¹."
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "parameters": {
        "phone_code": {
          "description": "Code received after the call to account.sendVerifyPhoneCode¹",
          "links": [
            "https://core.telegram.org/method/account.sendVerifyPhoneCode"
          ]
        },
        "phone_code_hash": {
          "description": "Phone code hash received from the call to account.sendVerifyPhoneCode¹",
          "links": [
            "https://core.telegram.org/method/account.sendVerifyPhoneCode"
          ]
        },
        "phone_number": {
          "description": "Phone number",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PHONE_CODE_EXPIRED",
          "description": "The phone code you provided has expired, this may happen if it was sent to any chat on telegram (if the code is sent through a telegram chat (not the official account) to avoid it append or prepend to the code some chars)"
        }
      ],
      "bot_can_use": true
    },
    "auth.acceptLoginToken": {
      "name": "auth.acceptLoginToken",
      "description": [
        "Accept QR code login token, logging in the app that generated it.",
        "Returns info about the new session.",
        "For more info, see login via QR code¹."
      ],
      "links": [
        "https://core.telegram.org/api/qr-login"
      ],
      "parameters": {
        "token": {
          "description": "Login token embedded in QR code, for more info, see login via QR code¹.",
          "links": [
            "https://core.telegram.org/api/qr-login"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "AUTH_TOKEN_INVALIDX",
          "description": "The specified auth token is invalid"
        }
      ],
      "bot_can_use": true
    },
    "auth.bindTempAuthKey": {
      "name": "auth.bindTempAuthKey",
      "description": [
        "Binds a temporary authorization key temp_auth_key_id to the permanent authorization key perm_auth_key_id. Each permanent key may only be bound to one temporary key at a time, binding a new temporary key overwrites the previous one.",
        "For more information, see Perfect Forward Secrecy¹."
      ],
      "links": [
        "https://core.telegram.org/api/pfs"
      ],
      "parameters": {
        "encrypted_message": {
          "description": "See Generating encrypted_message¹",
          "links": [
            "https://core.telegram.org#generating-encrypted-message"
          ]
        },
        "expires_at": {
          "description": "Unix timestamp to invalidate temporary key, see Binding message contents¹",
          "links": [
            "https://core.telegram.org#binding-message-contents"
          ]
        },
        "nonce": {
          "description": "Random long from Binding message contents¹",
          "links": [
            "https://core.telegram.org#binding-message-contents"
          ]
        },
        "perm_auth_key_id": {
          "description": "Permanent auth_key_id to bind to",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "ENCRYPTED_MESSAGE_INVALID",
          "description": "Encrypted message is incorrect"
        },
        {
          "code": 400,
          "type": "INPUT_REQUEST_TOO_LONG",
          "description": "The request is too big"
        },
        {
          "code": 400,
          "type": "TEMP_AUTH_KEY_ALREADY_BOUND",
          "description": "The passed temporary key is already bound to another perm_auth_key_id"
        },
        {
          "code": 400,
          "type": "TEMP_AUTH_KEY_EMPTY",
          "description": "The request was not performed with a temporary authorization key"
        }
      ],
      "bot_can_use": true
    },
    "auth.cancelCode": {
      "name": "auth.cancelCode",
      "description": [
        "Cancel the login verification code"
      ],
      "parameters": {
        "phone_code_hash": {
          "description": "Phone code hash from auth.sendCode¹",
          "links": [
            "https://core.telegram.org/method/auth.sendCode"
          ]
        },
        "phone_number": {
          "description": "Phone number",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PHONE_CODE_EXPIRED",
          "description": "The phone code you provided has expired, this may happen if it was sent to any chat on telegram (if the code is sent through a telegram chat (not the official account) to avoid it append or prepend to the code some chars)"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_INVALID",
          "description": "The phone number is invalid"
        }
      ],
      "bot_can_use": true
    },
    "auth.checkPassword": {
      "name": "auth.checkPassword",
      "description": [
        "Try logging to an account protected by a 2FA password¹."
      ],
      "links": [
        "https://core.telegram.org/api/srp"
      ],
      "parameters": {
        "password": {
          "description": "The account's password (see SRP¹)",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PASSWORD_HASH_INVALID",
          "description": "The provided password isn't valid"
        },
        {
          "code": 400,
          "type": "SRP_ID_INVALID",
          "description": "Invalid SRP ID provided"
        },
        {
          "code": 400,
          "type": "SRP_PASSWORD_CHANGED",
          "description": "Password has changed"
        }
      ],
      "bot_can_use": true
    },
    "auth.dropTempAuthKeys": {
      "name": "auth.dropTempAuthKeys",
      "description": [
        "Delete all temporary authorization keys except for the ones specified"
      ],
      "parameters": {
        "except_auth_keys": {
          "description": "The auth keys that shouldn't be dropped.",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "auth.exportAuthorization": {
      "name": "auth.exportAuthorization",
      "description": [
        "Returns data for copying authorization to another data-centre."
      ],
      "parameters": {
        "dc_id": {
          "description": "Number of a target data-centre",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "DC_ID_INVALID",
          "description": "The provided DC ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "auth.exportLoginToken": {
      "name": "auth.exportLoginToken",
      "description": [
        "Generate a login token, for login via QR code¹.",
        "The generated login token should be encoded using base64url, then shown as a tg://login?token=base64encodedtoken URL in the QR code.",
        "For more info, see login via QR code¹."
      ],
      "links": [
        "https://core.telegram.org/api/qr-login",
        "https://core.telegram.org/api/qr-login"
      ],
      "parameters": {
        "api_hash": {
          "description": "Application identifier hash (see. App configuration¹)",
          "links": [
            "https://core.telegram.org/myapp"
          ]
        },
        "api_id": {
          "description": "Application identifier (see. App configuration¹)",
          "links": [
            "https://core.telegram.org/myapp"
          ]
        },
        "except_ids": {
          "description": "List of already logged-in user IDs, to prevent logging in twice with the same user",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "auth.importAuthorization": {
      "name": "auth.importAuthorization",
      "description": [
        "Logs in a user using a key transmitted from his native data-centre."
      ],
      "parameters": {
        "bytes": {
          "description": "Authorization key",
          "links": null
        },
        "id": {
          "description": "User ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "AUTH_BYTES_INVALID",
          "description": "The provided authorization is invalid"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "auth.importBotAuthorization": {
      "name": "auth.importBotAuthorization",
      "description": [
        "Login as a bot"
      ],
      "parameters": {
        "api_hash": {
          "description": "Application identifier hash (see. App configuration¹)",
          "links": [
            "https://core.telegram.org/myapp"
          ]
        },
        "api_id": {
          "description": "Application identifier (see. App configuration¹)",
          "links": [
            "https://core.telegram.org/myapp"
          ]
        },
        "bot_auth_token": {
          "description": "Bot token (see bots¹)",
          "links": [
            "https://core.telegram.org/bots"
          ]
        },
        "flags": {
          "description": "Reserved for future use",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "ACCESS_TOKEN_EXPIRED",
          "description": "Bot token expired"
        },
        {
          "code": 400,
          "type": "ACCESS_TOKEN_INVALID",
          "description": "The provided token is not valid"
        },
        {
          "code": 400,
          "type": "API_ID_INVALID",
          "description": "The api_id/api_hash combination is invalid"
        },
        {
          "code": 401,
          "type": "AUTH_KEY_INVALID",
          "description": "Auth key invalid"
        }
      ],
      "bot_can_use": true
    },
    "auth.importLoginToken": {
      "name": "auth.importLoginToken",
      "description": [
        "Login using a redirected login token, generated in case of DC mismatch during QR code login¹.",
        "For more info, see login via QR code¹."
      ],
      "links": [
        "https://core.telegram.org/api/qr-login",
        "https://core.telegram.org/api/qr-login"
      ],
      "parameters": {
        "token": {
          "description": "Login token",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "AUTH_TOKEN_EXPIRED",
          "description": "The authorization token has expired"
        }
      ],
      "bot_can_use": true
    },
    "auth.logOut": {
      "name": "auth.logOut",
      "description": [
        "Logs out the user."
      ],
      "bot_can_use": true
    },
    "auth.recoverPassword": {
      "name": "auth.recoverPassword",
      "description": [
        "Reset the 2FA password¹ using the recovery code sent using auth.requestPasswordRecovery²."
      ],
      "links": [
        "https://core.telegram.org/api/srp",
        "https://core.telegram.org/method/auth.requestPasswordRecovery"
      ],
      "parameters": {
        "code": {
          "description": "Code received via email",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CODE_EMPTY",
          "description": "The provided code is empty"
        }
      ],
      "bot_can_use": true
    },
    "auth.requestPasswordRecovery": {
      "name": "auth.requestPasswordRecovery",
      "description": [
        "Request recovery code of a 2FA password¹, only for accounts with a recovery email configured²."
      ],
      "links": [
        "https://core.telegram.org/api/srp",
        "https://core.telegram.org/api/srp#email-verification"
      ],
      "parameters": {
        "400": {
          "description": "The provided password is empty",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PASSWORD_EMPTY",
          "description": "The provided password is empty"
        }
      ],
      "bot_can_use": true
    },
    "auth.resendCode": {
      "name": "auth.resendCode",
      "description": [
        "Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see login¹ for more info."
      ],
      "links": [
        "https://core.telegram.org/api/auth"
      ],
      "parameters": {
        "phone_code_hash": {
          "description": "The phone code hash obtained from auth.sendCode¹",
          "links": [
            "https://core.telegram.org/method/auth.sendCode"
          ]
        },
        "phone_number": {
          "description": "The phone number",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PHONE_CODE_EXPIRED",
          "description": "The phone code you provided has expired, this may happen if it was sent to any chat on telegram (if the code is sent through a telegram chat (not the official account) to avoid it append or prepend to the code some chars)"
        },
        {
          "code": 400,
          "type": "PHONE_CODE_HASH_EMPTY",
          "description": "phone_code_hash is missing"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_INVALID",
          "description": "The phone number is invalid"
        }
      ],
      "bot_can_use": true
    },
    "auth.resetAuthorizations": {
      "name": "auth.resetAuthorizations",
      "description": [
        "Terminates all user's authorized sessions except for the current one.",
        "After calling this method it is necessary to reregister the current device using the method account.registerDevice¹"
      ],
      "links": [
        "https://core.telegram.org/method/account.registerDevice"
      ],
      "parameters": {
        "406": {
          "description": "You can't logout other sessions if less than 24 hours have passed since you logged on the current session",
          "links": null
        }
      },
      "errors": [
        {
          "code": 406,
          "type": "FRESH_RESET_AUTHORISATION_FORBIDDEN",
          "description": "You can't logout other sessions if less than 24 hours have passed since you logged on the current session"
        }
      ],
      "bot_can_use": true
    },
    "auth.sendCode": {
      "name": "auth.sendCode",
      "description": [
        "Send the verification code for login"
      ],
      "parameters": {
        "api_hash": {
          "description": "Application secret hash (see App configuration¹)",
          "links": [
            "https://core.telegram.org/myapp"
          ]
        },
        "api_id": {
          "description": "Application identifier (see App configuration¹)",
          "links": [
            "https://core.telegram.org/myapp"
          ]
        },
        "phone_number": {
          "description": "Phone number in international format",
          "links": null
        },
        "settings": {
          "description": "Settings for the code type to send",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "API_ID_INVALID",
          "description": "API ID invalid"
        },
        {
          "code": 400,
          "type": "API_ID_PUBLISHED_FLOOD",
          "description": "This API id was published somewhere, you can't use it now"
        },
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        },
        {
          "code": 400,
          "type": "INPUT_REQUEST_TOO_LONG",
          "description": "The request is too big"
        },
        {
          "code": 303,
          "type": "NETWORK_MIGRATE_X",
          "description": "Repeat the query to data-center X"
        },
        {
          "code": 303,
          "type": "PHONE_MIGRATE_X",
          "description": "Repeat the query to data-center X"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_APP_SIGNUP_FORBIDDEN",
          "description": "You can't sign up using this app"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_BANNED",
          "description": "The provided phone number is banned from telegram"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_FLOOD",
          "description": "You asked for the code too many times."
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_INVALID",
          "description": "Invalid phone number"
        },
        {
          "code": 406,
          "type": "PHONE_PASSWORD_FLOOD",
          "description": "You have tried logging in too many times"
        },
        {
          "code": 400,
          "type": "PHONE_PASSWORD_PROTECTED",
          "description": "This phone is password protected"
        },
        {
          "code": 400,
          "type": "SMS_CODE_CREATE_FAILED",
          "description": "An error occurred while creating the SMS code"
        }
      ],
      "bot_can_use": true
    },
    "auth.signIn": {
      "name": "auth.signIn",
      "description": [
        "Signs in a user with a validated phone number."
      ],
      "parameters": {
        "phone_code": {
          "description": "Valid numerical code from the SMS-message",
          "links": null
        },
        "phone_code_hash": {
          "description": "SMS-message ID, obtained from auth.sendCode¹",
          "links": [
            "https://core.telegram.org/method/auth.sendCode"
          ]
        },
        "phone_number": {
          "description": "Phone number in the international format",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PHONE_CODE_EMPTY",
          "description": "phone_code from the SMS is empty"
        },
        {
          "code": 400,
          "type": "PHONE_CODE_EXPIRED",
          "description": "SMS expired"
        },
        {
          "code": 400,
          "type": "PHONE_CODE_INVALID",
          "description": "Invalid SMS code was sent"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_INVALID",
          "description": "Invalid phone number"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_UNOCCUPIED",
          "description": "The code is valid but no user with the given number is registered"
        }
      ],
      "bot_can_use": true
    },
    "auth.signUp": {
      "name": "auth.signUp",
      "description": [
        "Registers a validated phone number in the system."
      ],
      "parameters": {
        "first_name": {
          "description": "New user first name",
          "links": null
        },
        "last_name": {
          "description": "New user last name",
          "links": null
        },
        "phone_code_hash": {
          "description": "SMS-message ID",
          "links": null
        },
        "phone_number": {
          "description": "Phone number in the international format",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FIRSTNAME_INVALID",
          "description": "Invalid first name"
        },
        {
          "code": 400,
          "type": "INPUT_REQUEST_TOO_LONG",
          "description": "The request is too big"
        },
        {
          "code": 400,
          "type": "LASTNAME_INVALID",
          "description": "Invalid last name"
        },
        {
          "code": 400,
          "type": "PHONE_CODE_EMPTY",
          "description": "phone_code from a SMS is empty"
        },
        {
          "code": 400,
          "type": "PHONE_CODE_EXPIRED",
          "description": "SMS expired"
        },
        {
          "code": 400,
          "type": "PHONE_CODE_INVALID",
          "description": "Invalid SMS code was sent"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_FLOOD",
          "description": "You asked for the code too many times."
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_INVALID",
          "description": "Invalid phone number"
        },
        {
          "code": 400,
          "type": "PHONE_NUMBER_OCCUPIED",
          "description": "The phone number is already in use"
        }
      ],
      "bot_can_use": true
    },
    "bots.answerWebhookJSONQuery": {
      "name": "bots.answerWebhookJSONQuery",
      "description": [
        "Answers a custom query; for bots only"
      ],
      "parameters": {
        "data": {
          "description": "JSON-serialized answer to the query",
          "links": null
        },
        "query_id": {
          "description": "Identifier of a custom query",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "QUERY_ID_INVALID",
          "description": "The query ID is invalid"
        },
        {
          "code": 400,
          "type": "USER_BOT_INVALID",
          "description": "This method can only be called by a bot"
        }
      ],
      "bot_can_use": true
    },
    "bots.sendCustomRequest": {
      "name": "bots.sendCustomRequest",
      "description": [
        "Sends a custom request; for bots only"
      ],
      "parameters": {
        "custom_method": {
          "description": "The method name",
          "links": null
        },
        "params": {
          "description": "JSON-serialized method parameters",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "METHOD_INVALID",
          "description": "The specified method is invalid"
        },
        {
          "code": 400,
          "type": "USER_BOT_INVALID",
          "description": "This method can only be called by a bot"
        }
      ],
      "bot_can_use": true
    },
    "bots.setBotCommands": {
      "name": "bots.setBotCommands",
      "description": [
        "Set bot command list"
      ],
      "parameters": {
        "commands": {
          "description": "Bot commands",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "channels.checkUsername": {
      "name": "channels.checkUsername",
      "description": [
        "Check if a username is free and can be assigned to a channel/supergroup"
      ],
      "parameters": {
        "channel": {
          "description": "The channel/supergroup¹ that will assigned the specified username",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "username": {
          "description": "The username to check",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNELS_ADMIN_PUBLIC_TOO_MUCH",
          "description": "You're admin of too many public channels, make some channels private to change the username of this channel"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "USERNAME_INVALID",
          "description": "The provided username is not valid"
        }
      ],
      "bot_can_use": true
    },
    "channels.createChannel": {
      "name": "channels.createChannel",
      "description": [
        "Create a supergroup/channel¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "about": {
          "description": "Channel description",
          "links": null
        },
        "address": {
          "description": "Geogroup address",
          "links": null
        },
        "broadcast": {
          "description": "Whether to create a channel¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo_point": {
          "description": "Geogroup location",
          "links": null
        },
        "megagroup": {
          "description": "Whether to create a supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "title": {
          "description": "Channel title",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNELS_TOO_MUCH",
          "description": "You have joined too many channels/supergroups"
        },
        {
          "code": 400,
          "type": "CHAT_ABOUT_TOO_LONG",
          "description": "Chat about too long"
        },
        {
          "code": 400,
          "type": "CHAT_TITLE_EMPTY",
          "description": "No chat title provided"
        },
        {
          "code": 403,
          "type": "USER_RESTRICTED",
          "description": "You're spamreported, you can't create channels or chats."
        }
      ],
      "bot_can_use": true
    },
    "channels.deleteChannel": {
      "name": "channels.deleteChannel",
      "description": [
        "Delete a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup¹ to delete",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHANNEL_TOO_LARGE",
          "description": "Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change)"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        }
      ],
      "bot_can_use": true
    },
    "channels.deleteHistory": {
      "name": "channels.deleteHistory",
      "description": [
        "Delete the history of a supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Supergroup¹ whose history must be deleted",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "max_id": {
          "description": "ID of message up to which the history must be deleted",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        }
      ],
      "bot_can_use": true
    },
    "channels.deleteMessages": {
      "name": "channels.deleteMessages",
      "description": [
        "Delete messages in a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "id": {
          "description": "IDs of messages to delete",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 403,
          "type": "MESSAGE_DELETE_FORBIDDEN",
          "description": "You can't delete one of the messages you tried to delete, most likely because it is a service message."
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.deleteUserHistory": {
      "name": "channels.deleteUserHistory",
      "description": [
        "Delete all messages sent by a certain user in a supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "user_id": {
          "description": "User whose messages should be deleted",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "channels.editAdmin": {
      "name": "channels.editAdmin",
      "description": [
        "Modify the admin rights of a user in a supergroup/channel¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "admin_rights": {
          "description": "The admin rights",
          "links": null
        },
        "channel": {
          "description": "The supergroup/channel¹.",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "rank": {
          "description": "Indicates the role (rank) of the admin in the group: just an arbitrary string",
          "links": null
        },
        "user_id": {
          "description": "The ID of the user whose admin rights should be modified",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "ADMINS_TOO_MUCH",
          "description": "There are too many admins"
        },
        {
          "code": 400,
          "type": "BOTS_TOO_MUCH",
          "description": "There are too many bots in this chat/channel"
        },
        {
          "code": 400,
          "type": "BOT_CHANNELS_NA",
          "description": "Bots can't edit admin privileges"
        },
        {
          "code": 400,
          "type": "BOT_GROUPS_BLOCKED",
          "description": "This bot can't be added to groups"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 403,
          "type": "CHAT_ADMIN_INVITE_REQUIRED",
          "description": "You do not have the rights to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 406,
          "type": "FRESH_CHANGE_ADMINS_FORBIDDEN",
          "description": "You were just elected admin, you can't add or modify other admins yet"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 403,
          "type": "RIGHT_FORBIDDEN",
          "description": "Your admin rights do not allow you to do this"
        },
        {
          "code": 400,
          "type": "USERS_TOO_MUCH",
          "description": "The maximum number of users has been exceeded (to create a chat, for example)"
        },
        {
          "code": 400,
          "type": "USER_BLOCKED",
          "description": "User blocked"
        },
        {
          "code": 403,
          "type": "USER_CHANNELS_TOO_MUCH",
          "description": "One of the users you tried to add is already in too many channels/supergroups"
        },
        {
          "code": 400,
          "type": "USER_CREATOR",
          "description": "You can't leave this channel, because you're its creator"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        },
        {
          "code": 400,
          "type": "USER_NOT_MUTUAL_CONTACT",
          "description": "The provided user is not a mutual contact"
        },
        {
          "code": 403,
          "type": "USER_PRIVACY_RESTRICTED",
          "description": "The user's privacy settings do not allow you to do this"
        },
        {
          "code": 403,
          "type": "USER_RESTRICTED",
          "description": "You're spamreported, you can't create channels or chats."
        }
      ],
      "bot_can_use": true
    },
    "channels.editBanned": {
      "name": "channels.editBanned",
      "description": [
        "Ban/unban/kick a user in a supergroup/channel¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "banned_rights": {
          "description": "The banned rights",
          "links": null
        },
        "channel": {
          "description": "The supergroup/channel¹.",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "user_id": {
          "description": "The ID of the user whose banned rights should be modified",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PINNED_DIALOGS_TOO_MUCH",
          "description": "Too many pinned dialogs"
        },
        {
          "code": 400,
          "type": "USER_ADMIN_INVALID",
          "description": "You're not an admin"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "channels.editCreator": {
      "name": "channels.editCreator",
      "description": [
        "Transfer channel ownership"
      ],
      "parameters": {
        "channel": {
          "description": "Channel",
          "links": null
        },
        "password": {
          "description": "2FA password¹ of account",
          "links": [
            "https://core.telegram.org/api/srp"
          ]
        },
        "user_id": {
          "description": "New channel owner",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "PASSWORD_HASH_INVALID",
          "description": "The provided password hash is invalid"
        },
        {
          "code": 400,
          "type": "PASSWORD_MISSING",
          "description": "You must enable 2FA in order to transfer ownership of a channel"
        },
        {
          "code": 400,
          "type": "PASSWORD_TOO_FRESH_X",
          "description": "The password was modified less than 24 hours ago, try again in X seconds"
        },
        {
          "code": 400,
          "type": "SESSION_TOO_FRESH_X",
          "description": "This session was created less than 24 hours ago, try again in X seconds"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "channels.editLocation": {
      "name": "channels.editLocation",
      "description": [
        "Edit location of geogroup"
      ],
      "parameters": {
        "address": {
          "description": "Address string",
          "links": null
        },
        "channel": {
          "description": "Geogroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "geo_point": {
          "description": "New geolocation",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MEGAGROUP_REQUIRED",
          "description": "You can only use this method on a supergroup"
        }
      ],
      "bot_can_use": true
    },
    "channels.editPhoto": {
      "name": "channels.editPhoto",
      "description": [
        "Change the photo of a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup whose photo should be edited",
          "links": null
        },
        "photo": {
          "description": "New photo",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "PHOTO_CROP_SIZE_SMALL",
          "description": "Photo is too small"
        },
        {
          "code": 400,
          "type": "PHOTO_EXT_INVALID",
          "description": "The extension of the photo is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_INVALID",
          "description": "Photo invalid"
        }
      ],
      "bot_can_use": true
    },
    "channels.editTitle": {
      "name": "channels.editTitle",
      "description": [
        "Edit the name of a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup",
          "links": null
        },
        "title": {
          "description": "New name",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 400,
          "type": "CHAT_TITLE_EMPTY",
          "description": "No chat title provided"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        }
      ],
      "bot_can_use": true
    },
    "channels.exportMessageLink": {
      "name": "channels.exportMessageLink",
      "description": [
        "Get link and embed info of a message in a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "grouped": {
          "description": "Whether to include other grouped media (for albums)",
          "links": null
        },
        "id": {
          "description": "Message ID",
          "links": null
        },
        "thread": {
          "description": "Whether to also include a thread ID, if available, inside of the link",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.getAdminLog": {
      "name": "channels.getAdminLog",
      "description": [
        "Get the admin log of a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "admins": {
          "description": "Only show events from these admins",
          "links": null
        },
        "channel": {
          "description": "Channel",
          "links": null
        },
        "events_filter": {
          "description": "Event filter",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "max_id": {
          "description": "Maximum ID of message to return (see pagination¹)",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "min_id": {
          "description": "Minimum ID of message to return (see pagination¹)",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "q": {
          "description": "Search query, can be empty",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.getAdminedPublicChannels": {
      "name": "channels.getAdminedPublicChannels",
      "description": [
        "Get channels/supergroups/geogroups¹ we're admin in. Usually called when the user exceeds the limit² for owned public channels/supergroups/geogroups³, and the user is given the choice to remove one of his channels/supergroups/geogroups."
      ],
      "links": [
        "https://core.telegram.org/api/channel",
        "https://core.telegram.org/constructor/config",
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "by_location": {
          "description": "Get geogroups",
          "links": null
        },
        "check_limit": {
          "description": "If set and the user has reached the limit of owned public channels/supergroups/geogroups¹, instead of returning the channel list one of the specified errors² will be returned.Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in channels.checkUsername³/channels.updateUsername⁴.",
          "links": [
            "https://core.telegram.org/api/channel",
            "https://core.telegram.org#possible-errors",
            "https://core.telegram.org/method/channels.checkUsername",
            "https://core.telegram.org/method/channels.updateUsername"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNELS_ADMIN_LOCATED_TOO_MUCH",
          "description": "Returned if both the check_limit and the by_location flags are set and the user has reached the limit of public geogroups"
        },
        {
          "code": 400,
          "type": "CHANNELS_ADMIN_PUBLIC_TOO_MUCH",
          "description": "Returned if the check_limit flag is set and the user has reached the limit of public channels/supergroups"
        }
      ],
      "bot_can_use": true
    },
    "channels.getChannels": {
      "name": "channels.getChannels",
      "description": [
        "Get info about channels/supergroups¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "id": {
          "description": "IDs of channels/supergroups to get info about",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.getFullChannel": {
      "name": "channels.getFullChannel",
      "description": [
        "Get full info about a channel"
      ],
      "parameters": {
        "channel": {
          "description": "The channel to get info about",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 403,
          "type": "CHANNEL_PUBLIC_GROUP_NA",
          "description": "channel/supergroup not available"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.getGroupsForDiscussion": {
      "name": "channels.getGroupsForDiscussion",
      "description": [
        "Get all groups that can be used as discussion groups¹.",
        "Returned legacy group chats¹ must be first upgraded to supergroups² before they can be set as a discussion group.",
        "To set a returned supergroup as a discussion group, access to its old messages must be enabled using channels.togglePreHistoryHidden³, first."
      ],
      "links": [
        "https://core.telegram.org/api/discussion",
        "https://core.telegram.org/api/channel",
        "https://core.telegram.org/api/channel",
        "https://core.telegram.org/method/channels.togglePreHistoryHidden"
      ],
      "bot_can_use": true
    },
    "channels.getInactiveChannels": {
      "name": "channels.getInactiveChannels",
      "description": [
        "Get inactive channels and supergroups"
      ],
      "bot_can_use": true
    },
    "channels.getLeftChannels": {
      "name": "channels.getLeftChannels",
      "description": [
        "Get a list of channels/supergroups¹ we left"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "offset": {
          "description": "Offset for pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        }
      },
      "errors": [
        {
          "code": 403,
          "type": "TAKEOUT_REQUIRED",
          "description": "A takeout session has to be initialized, first"
        }
      ],
      "bot_can_use": true
    },
    "channels.getMessages": {
      "name": "channels.getMessages",
      "description": [
        "Get channel/supergroup¹ messages"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup",
          "links": null
        },
        "id": {
          "description": "IDs of messages to get",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "MESSAGE_IDS_EMPTY",
          "description": "No message ids were provided"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.getParticipant": {
      "name": "channels.getParticipant",
      "description": [
        "Get info about a channel/supergroup¹ participant"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup",
          "links": null
        },
        "user_id": {
          "description": "ID of participant to get info about",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        },
        {
          "code": 400,
          "type": "USER_NOT_PARTICIPANT",
          "description": "You're not a member of this supergroup/channel"
        }
      ],
      "bot_can_use": true
    },
    "channels.getParticipants": {
      "name": "channels.getParticipants",
      "description": [
        "Get the participants of a supergroup/channel¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel",
          "links": null
        },
        "filter": {
          "description": "Which participant types to fetch",
          "links": null
        },
        "hash": {
          "description": "Hash¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "limit": {
          "description": "Limit¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset": {
          "description": "Offset¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "INPUT_CONSTRUCTOR_INVALID",
          "description": "The provided constructor is invalid"
        }
      ],
      "bot_can_use": true
    },
    "channels.inviteToChannel": {
      "name": "channels.inviteToChannel",
      "description": [
        "Invite users to a channel/supergroup"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup",
          "links": null
        },
        "users": {
          "description": "Users to invite",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOTS_TOO_MUCH",
          "description": "There are too many bots in this chat/channel"
        },
        {
          "code": 400,
          "type": "BOT_GROUPS_BLOCKED",
          "description": "This bot can't be added to groups"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_INVALID",
          "description": "Invalid chat"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "USERS_TOO_MUCH",
          "description": "The maximum number of users has been exceeded (to create a chat, for example)"
        },
        {
          "code": 400,
          "type": "USER_BANNED_IN_CHANNEL",
          "description": "You're banned from sending messages in supergroups/channels"
        },
        {
          "code": 400,
          "type": "USER_BLOCKED",
          "description": "User blocked"
        },
        {
          "code": 400,
          "type": "USER_BOT",
          "description": "Bots can only be admins in channels."
        },
        {
          "code": 403,
          "type": "USER_CHANNELS_TOO_MUCH",
          "description": "One of the users you tried to add is already in too many channels/supergroups"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        },
        {
          "code": 400,
          "type": "USER_KICKED",
          "description": "This user was kicked from this supergroup/channel"
        },
        {
          "code": 400,
          "type": "USER_NOT_MUTUAL_CONTACT",
          "description": "The provided user is not a mutual contact"
        },
        {
          "code": 403,
          "type": "USER_PRIVACY_RESTRICTED",
          "description": "The user's privacy settings do not allow you to do this"
        }
      ],
      "bot_can_use": true
    },
    "channels.joinChannel": {
      "name": "channels.joinChannel",
      "description": [
        "Join a channel/supergroup"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup to join",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNELS_TOO_MUCH",
          "description": "You have joined too many channels/supergroups"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_EMPTY",
          "description": "The invite hash is empty"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_EXPIRED",
          "description": "The invite link has expired"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_INVALID",
          "description": "The invite hash is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "USERS_TOO_MUCH",
          "description": "The maximum number of users has been exceeded (to create a chat, for example)"
        },
        {
          "code": 400,
          "type": "USER_ALREADY_PARTICIPANT",
          "description": "The user is already in the group"
        },
        {
          "code": 400,
          "type": "USER_CHANNELS_TOO_MUCH",
          "description": "One of the users you tried to add is already in too many channels/supergroups"
        }
      ],
      "bot_can_use": true
    },
    "channels.leaveChannel": {
      "name": "channels.leaveChannel",
      "description": [
        "Leave a channel/supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup¹ to leave",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 403,
          "type": "CHANNEL_PUBLIC_GROUP_NA",
          "description": "channel/supergroup not available"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "USER_CREATOR",
          "description": "You can't leave this channel, because you're its creator"
        },
        {
          "code": 400,
          "type": "USER_NOT_PARTICIPANT",
          "description": "You're not a member of this supergroup/channel"
        }
      ],
      "bot_can_use": true
    },
    "channels.readHistory": {
      "name": "channels.readHistory",
      "description": [
        "Mark channel/supergroup¹ history as read"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "max_id": {
          "description": "ID of message up to which messages should be marked as read",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.readMessageContents": {
      "name": "channels.readMessageContents",
      "description": [
        "Mark channel/supergroup¹ message contents as read"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "id": {
          "description": "IDs of messages whose contents should be marked as read",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.reportSpam": {
      "name": "channels.reportSpam",
      "description": [
        "Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup"
      ],
      "parameters": {
        "channel": {
          "description": "Supergroup",
          "links": null
        },
        "id": {
          "description": "IDs of spam messages",
          "links": null
        },
        "user_id": {
          "description": "ID of the user that sent the spam messages",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "channels.setDiscussionGroup": {
      "name": "channels.setDiscussionGroup",
      "description": [
        "Associate a group to a channel as discussion group¹ for that channel"
      ],
      "links": [
        "https://core.telegram.org/api/discussion"
      ],
      "parameters": {
        "broadcast": {
          "description": "Channel",
          "links": null
        },
        "group": {
          "description": "Discussion group¹ to associate to the channel",
          "links": [
            "https://core.telegram.org/api/discussion"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BROADCAST_ID_INVALID",
          "description": "Broadcast ID invalid"
        },
        {
          "code": 400,
          "type": "LINK_NOT_MODIFIED",
          "description": "Discussion link not modified"
        },
        {
          "code": 400,
          "type": "MEGAGROUP_ID_INVALID",
          "description": "Invalid supergroup ID"
        }
      ],
      "bot_can_use": true
    },
    "channels.setStickers": {
      "name": "channels.setStickers",
      "description": [
        "Associate a stickerset to the supergroup"
      ],
      "parameters": {
        "channel": {
          "description": "Supergroup",
          "links": null
        },
        "stickerset": {
          "description": "The stickerset to associate",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "PARTICIPANTS_TOO_FEW",
          "description": "Not enough participants"
        }
      ],
      "bot_can_use": true
    },
    "channels.togglePreHistoryHidden": {
      "name": "channels.togglePreHistoryHidden",
      "description": [
        "Hide/unhide message history for new channel/supergroup users"
      ],
      "parameters": {
        "channel": {
          "description": "Channel/supergroup",
          "links": null
        },
        "enabled": {
          "description": "Hide/unhide",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_LINK_EXISTS",
          "description": "The chat is public, you can't hide the history to new users"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        }
      ],
      "bot_can_use": true
    },
    "channels.toggleSignatures": {
      "name": "channels.toggleSignatures",
      "description": [
        "Enable/disable message signatures in channels"
      ],
      "parameters": {
        "channel": {
          "description": "Channel",
          "links": null
        },
        "enabled": {
          "description": "Value",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "channels.toggleSlowMode": {
      "name": "channels.toggleSlowMode",
      "description": [
        "Toggle supergroup slow mode: if enabled, users will only be able to send one message every seconds seconds"
      ],
      "parameters": {
        "channel": {
          "description": "The supergroup¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "seconds": {
          "description": "Users will only be able to send one message every seconds seconds, 0 to disable the limitation",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 400,
          "type": "INPUT_METHOD_INVALID_1192227_X",
          "description": "Invalid method"
        },
        {
          "code": 400,
          "type": "INPUT_METHOD_INVALID_1604042050_X",
          "description": "Invalid method"
        },
        {
          "code": 400,
          "type": "SECONDS_INVALID",
          "description": "Invalid duration provided"
        }
      ],
      "bot_can_use": true
    },
    "channels.updateUsername": {
      "name": "channels.updateUsername",
      "description": [
        "Change the username of a supergroup/channel"
      ],
      "parameters": {
        "channel": {
          "description": "Channel",
          "links": null
        },
        "username": {
          "description": "New username",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNELS_ADMIN_PUBLIC_TOO_MUCH",
          "description": "You're admin of too many public channels, make some channels private to change the username of this channel"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "USERNAME_INVALID",
          "description": "The provided username is not valid"
        },
        {
          "code": 400,
          "type": "USERNAME_NOT_MODIFIED",
          "description": "The username was not modified"
        },
        {
          "code": 400,
          "type": "USERNAME_OCCUPIED",
          "description": "The provided username is already occupied"
        }
      ],
      "bot_can_use": true
    },
    "contacts.acceptContact": {
      "name": "contacts.acceptContact",
      "description": [
        "If the peer settings¹ of a new user allow us to add him as contact, add that user as contact"
      ],
      "links": [
        "https://core.telegram.org/constructor/peerSettings"
      ],
      "parameters": {
        "id": {
          "description": "The user to add as contact",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CONTACT_ADD_MISSING",
          "description": "Contact to add is missing"
        },
        {
          "code": 400,
          "type": "CONTACT_ID_INVALID",
          "description": "The provided contact ID is invalid"
        },
        {
          "code": 400,
          "type": "CONTACT_REQ_MISSING",
          "description": "Missing contact request"
        }
      ],
      "bot_can_use": true
    },
    "contacts.addContact": {
      "name": "contacts.addContact",
      "description": [
        "Add an existing telegram user as contact.",
        "Use contacts.importContacts¹ to add contacts by phone number, without knowing their Telegram ID."
      ],
      "links": [
        "https://core.telegram.org/method/contacts.importContacts"
      ],
      "parameters": {
        "add_phone_privacy_exception": {
          "description": "Allow the other user to see our phone number?",
          "links": null
        },
        "first_name": {
          "description": "First name",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Telegram ID of the other user",
          "links": null
        },
        "last_name": {
          "description": "Last name",
          "links": null
        },
        "phone": {
          "description": "User's phone number",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CONTACT_ID_INVALID",
          "description": "The provided contact ID is invalid"
        },
        {
          "code": 400,
          "type": "CONTACT_NAME_EMPTY",
          "description": "Contact name empty"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "contacts.block": {
      "name": "contacts.block",
      "description": [
        "Adds the user to the blacklist."
      ],
      "parameters": {
        "id": {
          "description": "User ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CONTACT_ID_INVALID",
          "description": "The provided contact ID is invalid"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "contacts.blockFromReplies": {
      "name": "contacts.blockFromReplies",
      "description": [
        "Stop getting notifications about thread replies¹ of a certain user in @replies"
      ],
      "links": [
        "https://core.telegram.org/api/threads"
      ],
      "parameters": {
        "delete_history": {
          "description": "Whether to delete all @replies messages from this user as well",
          "links": null
        },
        "delete_message": {
          "description": "Whether to delete the specified message as well",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "msg_id": {
          "description": "ID of the message in the @replies¹ chat",
          "links": [
            "https://core.telegram.org/api/threads#replies"
          ]
        },
        "report_spam": {
          "description": "Whether to also report this user for spam",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "contacts.deleteByPhones": {
      "name": "contacts.deleteByPhones",
      "description": [
        "Delete contacts by phone number"
      ],
      "parameters": {
        "phones": {
          "description": "Phone numbers",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "contacts.deleteContacts": {
      "name": "contacts.deleteContacts",
      "description": [
        "Deletes several contacts from the list."
      ],
      "parameters": {
        "id": {
          "description": "User ID list",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "contacts.getBlocked": {
      "name": "contacts.getBlocked",
      "description": [
        "Returns the list of blocked users."
      ],
      "parameters": {
        "limit": {
          "description": "The number of list elements to be returned",
          "links": null
        },
        "offset": {
          "description": "The number of list elements to be skipped",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "contacts.getContactIDs": {
      "name": "contacts.getContactIDs",
      "description": [
        "Get contact by telegram IDs"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "contacts.getContacts": {
      "name": "contacts.getContacts",
      "description": [
        "Returns the current user's contact list."
      ],
      "parameters": {
        "hash": {
          "description": "If there already is a full contact list on the client, a hash¹ of a the list of contact IDs in ascending order may be passed in this parameter. If the contact set was not changed, (contacts.contactsNotModified)² will be returned.",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation",
            "https://core.telegram.org/constructor/contacts.contactsNotModified"
          ]
        }
      },
      "bot_can_use": true
    },
    "contacts.getLocated": {
      "name": "contacts.getLocated",
      "description": [
        "Get contacts near you"
      ],
      "parameters": {
        "background": {
          "description": "While the geolocation of the current user is public, clients should update it in the background every half-an-hour or so, while setting this flag. Do this only if the new location is more than 1 KM away from the previous one, or if the previous location is unknown.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo_point": {
          "description": "Geolocation",
          "links": null
        },
        "self_expires": {
          "description": "If set, the geolocation of the current user will be public for the specified number of seconds; pass 0x7fffffff to disable expiry, 0 to make the current geolocation private; if the flag isn't set, no changes will be applied.",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "GEO_POINT_INVALID",
          "description": "Invalid geoposition provided"
        },
        {
          "code": 406,
          "type": "USERPIC_UPLOAD_REQUIRED",
          "description": "You must have a profile picture to publish your geolocation"
        }
      ],
      "bot_can_use": true
    },
    "contacts.getSaved": {
      "name": "contacts.getSaved",
      "description": [
        "Get all contacts"
      ],
      "parameters": {
        "403": {
          "description": "A takeout session has to be initialized, first",
          "links": null
        }
      },
      "errors": [
        {
          "code": 403,
          "type": "TAKEOUT_REQUIRED",
          "description": "A takeout session has to be initialized, first"
        }
      ],
      "bot_can_use": true
    },
    "contacts.getStatuses": {
      "name": "contacts.getStatuses",
      "description": [
        "Returns the list of contact statuses."
      ],
      "bot_can_use": true
    },
    "contacts.getTopPeers": {
      "name": "contacts.getTopPeers",
      "description": [
        "Get most used peers"
      ],
      "parameters": {
        "bots_inline": {
          "description": "Most used inline bots",
          "links": null
        },
        "bots_pm": {
          "description": "Most used bots",
          "links": null
        },
        "channels": {
          "description": "Most frequently visited channels",
          "links": null
        },
        "correspondents": {
          "description": "Users we've chatted most frequently with",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "forward_chats": {
          "description": "Chats to which the users often forwards messages to",
          "links": null
        },
        "forward_users": {
          "description": "Users to which the users often forwards messages to",
          "links": null
        },
        "groups": {
          "description": "Often-opened groups and supergroups",
          "links": null
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset": {
          "description": "Offset for pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "phone_calls": {
          "description": "Most frequently called users",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "TYPES_EMPTY",
          "description": "No top peer type was provided"
        }
      ],
      "bot_can_use": true
    },
    "contacts.importContacts": {
      "name": "contacts.importContacts",
      "description": [
        "Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.",
        "Use contacts.addContact¹ to add Telegram contacts without actually using their phone number."
      ],
      "links": [
        "https://core.telegram.org/method/contacts.addContact"
      ],
      "parameters": {
        "contacts": {
          "description": "List of contacts to import",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "contacts.resetSaved": {
      "name": "contacts.resetSaved",
      "description": [
        "Delete saved contacts"
      ],
      "bot_can_use": true
    },
    "contacts.resetTopPeerRating": {
      "name": "contacts.resetTopPeerRating",
      "description": [
        "Reset rating¹ of top peer"
      ],
      "links": [
        "https://core.telegram.org/api/top-rating"
      ],
      "parameters": {
        "category": {
          "description": "Top peer category",
          "links": null
        },
        "peer": {
          "description": "Peer whose rating should be reset",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "contacts.resolveUsername": {
      "name": "contacts.resolveUsername",
      "description": [
        "Resolve a @username to get peer info"
      ],
      "parameters": {
        "username": {
          "description": "@username to resolve",
          "links": null
        }
      },
      "errors": [
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        },
        {
          "code": 400,
          "type": "CONNECTION_DEVICE_MODEL_EMPTY",
          "description": "Device model empty"
        },
        {
          "code": 400,
          "type": "CONNECTION_LAYER_INVALID",
          "description": "Layer invalid"
        },
        {
          "code": 400,
          "type": "USERNAME_INVALID",
          "description": "The provided username is not valid"
        },
        {
          "code": 400,
          "type": "USERNAME_NOT_OCCUPIED",
          "description": "The provided username is not occupied"
        }
      ],
      "bot_can_use": true
    },
    "contacts.search": {
      "name": "contacts.search",
      "description": [
        "Returns users found by username substring."
      ],
      "parameters": {
        "limit": {
          "description": "Maximum number of users to be returned",
          "links": null
        },
        "q": {
          "description": "Target substring",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "QUERY_TOO_SHORT",
          "description": "The query string is too short"
        },
        {
          "code": 400,
          "type": "SEARCH_QUERY_EMPTY",
          "description": "The search query is empty"
        }
      ],
      "bot_can_use": true
    },
    "contacts.toggleTopPeers": {
      "name": "contacts.toggleTopPeers",
      "description": [
        "Enable/disable top peers¹"
      ],
      "links": [
        "https://core.telegram.org/api/top-rating"
      ],
      "parameters": {
        "enabled": {
          "description": "Enable/disable",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "contacts.unblock": {
      "name": "contacts.unblock",
      "description": [
        "Deletes the user from the blacklist."
      ],
      "parameters": {
        "id": {
          "description": "User ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CONTACT_ID_INVALID",
          "description": "The provided contact ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "folders.deleteFolder": {
      "name": "folders.deleteFolder",
      "description": [
        "Delete a peer folder¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders#peer-folders"
      ],
      "parameters": {
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        }
      },
      "bot_can_use": true
    },
    "folders.editPeerFolders": {
      "name": "folders.editPeerFolders",
      "description": [
        "Edit peers in peer folder¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders#peer-folders"
      ],
      "parameters": {
        "folder_peers": {
          "description": "New peer list",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FOLDER_ID_INVALID",
          "description": "Invalid folder ID"
        }
      ],
      "bot_can_use": true
    },
    "help.acceptTermsOfService": {
      "name": "help.acceptTermsOfService",
      "description": [
        "Accept the new terms of service"
      ],
      "parameters": {
        "id": {
          "description": "ID of terms of service",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.dismissSuggestion": {
      "name": "help.dismissSuggestion",
      "description": [
        "Dismiss a suggestion"
      ],
      "parameters": {
        "suggestion": {
          "description": "Suggestion",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.editUserInfo": {
      "name": "help.editUserInfo",
      "description": [
        "Internal use"
      ],
      "parameters": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "message": {
          "description": "Message",
          "links": null
        },
        "user_id": {
          "description": "User",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.getAppChangelog": {
      "name": "help.getAppChangelog",
      "description": [
        "Get changelog of current app.",
        "Typically, an updates¹ constructor will be returned, containing one or more updateServiceNotification² updates with app-specific changelogs."
      ],
      "links": [
        "https://core.telegram.org/constructor/updates",
        "https://core.telegram.org/constructor/updateServiceNotification"
      ],
      "parameters": {
        "prev_app_version": {
          "description": "Previous app version",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.getAppConfig": {
      "name": "help.getAppConfig",
      "description": [
        "Get app-specific configuration, see client configuration¹ for more info on the result."
      ],
      "links": [
        "https://core.telegram.org/api/config#client-configuration"
      ],
      "bot_can_use": true
    },
    "help.getAppUpdate": {
      "name": "help.getAppUpdate",
      "description": [
        "Returns information on update availability for the current application."
      ],
      "parameters": {
        "source": {
          "description": "Source",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.getCdnConfig": {
      "name": "help.getCdnConfig",
      "description": [
        "Get configuration for CDN¹ file downloads."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "parameters": {
        "401": {
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods.",
          "links": null
        }
      },
      "errors": [
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        }
      ],
      "bot_can_use": true
    },
    "help.getConfig": {
      "name": "help.getConfig",
      "description": [
        "Returns current configuration, including data center configuration."
      ],
      "parameters": {
        "400": {
          "description": "Invalid message ID provided",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CONNECTION_API_ID_INVALID",
          "description": "The provided API id is invalid"
        },
        {
          "code": 400,
          "type": "CONNECTION_APP_VERSION_EMPTY",
          "description": "App version is empty"
        },
        {
          "code": 400,
          "type": "CONNECTION_DEVICE_MODEL_EMPTY",
          "description": "Device model empty"
        },
        {
          "code": 400,
          "type": "CONNECTION_LANG_PACK_INVALID",
          "description": "Language pack invalid"
        },
        {
          "code": 400,
          "type": "CONNECTION_LAYER_INVALID",
          "description": "Layer invalid"
        },
        {
          "code": 400,
          "type": "CONNECTION_NOT_INITED",
          "description": "Connection not initialized"
        },
        {
          "code": 400,
          "type": "CONNECTION_SYSTEM_EMPTY",
          "description": "Connection system empty"
        },
        {
          "code": 400,
          "type": "CONNECTION_SYSTEM_LANG_CODE_EMPTY",
          "description": "The system_lang_code field is empty"
        },
        {
          "code": 400,
          "type": "DATA_INVALID",
          "description": "Encrypted data invalid"
        },
        {
          "code": 400,
          "type": "INPUT_LAYER_INVALID",
          "description": "The provided layer is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "help.getCountriesList": {
      "name": "help.getCountriesList",
      "description": [
        "Get name, ISO code, localized name and phone codes/patterns of all available countries"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "lang_code": {
          "description": "Language code of the current user",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.getDeepLinkInfo": {
      "name": "help.getDeepLinkInfo",
      "description": [
        "Get info about a t.me link"
      ],
      "parameters": {
        "path": {
          "description": "Path in t.me/path",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.getInviteText": {
      "name": "help.getInviteText",
      "description": [
        "Returns localized text of a text message with an invitation."
      ],
      "bot_can_use": true
    },
    "help.getNearestDc": {
      "name": "help.getNearestDc",
      "description": [
        "Returns info on data centre nearest to the user."
      ],
      "bot_can_use": true
    },
    "help.getPassportConfig": {
      "name": "help.getPassportConfig",
      "description": [
        "Get passport¹ configuration"
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "help.getPromoData": {
      "name": "help.getPromoData",
      "description": [
        "Get MTProxy/Public Service Announcement information"
      ],
      "bot_can_use": true
    },
    "help.getRecentMeUrls": {
      "name": "help.getRecentMeUrls",
      "description": [
        "Get recently used t.me links"
      ],
      "parameters": {
        "referer": {
          "description": "Referer",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.getSupport": {
      "name": "help.getSupport",
      "description": [
        "Returns the support user for the 'ask a question' feature."
      ],
      "bot_can_use": true
    },
    "help.getSupportName": {
      "name": "help.getSupportName",
      "description": [
        "Get localized name of the telegram support user"
      ],
      "parameters": {
        "403": {
          "description": "Invalid user provided",
          "links": null
        }
      },
      "errors": [
        {
          "code": 403,
          "type": "USER_INVALID",
          "description": "Invalid user provided"
        }
      ],
      "bot_can_use": true
    },
    "help.getTermsOfServiceUpdate": {
      "name": "help.getTermsOfServiceUpdate",
      "description": [
        "Look for updates of telegram's terms of service"
      ],
      "bot_can_use": true
    },
    "help.getUserInfo": {
      "name": "help.getUserInfo",
      "description": [
        "Internal use"
      ],
      "parameters": {
        "user_id": {
          "description": "User ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 403,
          "type": "USER_INVALID",
          "description": "Invalid user provided"
        }
      ],
      "bot_can_use": true
    },
    "help.hidePromoData": {
      "name": "help.hidePromoData",
      "description": [
        "Hide MTProxy/Public Service Announcement information"
      ],
      "parameters": {
        "peer": {
          "description": "Peer to hide",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.saveAppLog": {
      "name": "help.saveAppLog",
      "description": [
        "Saves logs of application on the server."
      ],
      "parameters": {
        "events": {
          "description": "List of input events",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "help.setBotUpdatesStatus": {
      "name": "help.setBotUpdatesStatus",
      "description": [
        "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only"
      ],
      "parameters": {
        "message": {
          "description": "Error message, if present",
          "links": null
        },
        "pending_updates_count": {
          "description": "Number of pending updates",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "initConnection": {
      "name": "initConnection",
      "description": [
        "Initialize connection"
      ],
      "parameters": {
        "api_id": {
          "description": "Application identifier (see. App configuration¹)",
          "links": [
            "https://core.telegram.org/myapp"
          ]
        },
        "app_version": {
          "description": "Application version",
          "links": null
        },
        "device_model": {
          "description": "Device model",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "lang_code": {
          "description": "Code for the language used on the client, ISO 639-1 standard",
          "links": null
        },
        "lang_pack": {
          "description": "Language pack to use",
          "links": null
        },
        "params": {
          "description": "Additional initConnection parameters. For now, only the tz_offset field is supported, for specifying timezone offset in seconds.",
          "links": null
        },
        "proxy": {
          "description": "Info about an MTProto proxy",
          "links": null
        },
        "query": {
          "description": "The query itself",
          "links": null
        },
        "system_lang_code": {
          "description": "Code for the language used on the device's OS, ISO 639-1 standard",
          "links": null
        },
        "system_version": {
          "description": "Operation system version",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CONNECTION_LAYER_INVALID",
          "description": "Layer invalid"
        }
      ],
      "bot_can_use": true
    },
    "invokeAfterMsg": {
      "name": "invokeAfterMsg",
      "description": [
        "Invokes a query after successfull completion of one of the previous queries."
      ],
      "parameters": {
        "msg_id": {
          "description": "Message identifier on which a current query depends",
          "links": null
        },
        "query": {
          "description": "The query itself",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "invokeAfterMsgs": {
      "name": "invokeAfterMsgs",
      "description": [
        "Invokes a query after a successfull completion of previous queries"
      ],
      "parameters": {
        "msg_ids": {
          "description": "List of messages on which a current query depends",
          "links": null
        },
        "query": {
          "description": "The query itself",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "invokeWithLayer": {
      "name": "invokeWithLayer",
      "description": [
        "Invoke the specified query using the specified API layer¹"
      ],
      "links": [
        "https://core.telegram.org/api/invoking#layers"
      ],
      "parameters": {
        "layer": {
          "description": "The layer to use",
          "links": null
        },
        "query": {
          "description": "The query",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "AUTH_BYTES_INVALID",
          "description": "The provided authorization is invalid"
        },
        {
          "code": 400,
          "type": "CDN_METHOD_INVALID",
          "description": "You can't call this method in a CDN DC"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "CONNECTION_API_ID_INVALID",
          "description": "The provided API id is invalid"
        },
        {
          "code": 400,
          "type": "CONNECTION_DEVICE_MODEL_EMPTY",
          "description": "Device model empty"
        },
        {
          "code": 400,
          "type": "CONNECTION_LANG_PACK_INVALID",
          "description": "Language pack invalid"
        },
        {
          "code": 400,
          "type": "CONNECTION_NOT_INITED",
          "description": "Connection not initialized"
        },
        {
          "code": 400,
          "type": "CONNECTION_SYSTEM_EMPTY",
          "description": "Connection system empty"
        },
        {
          "code": 400,
          "type": "INPUT_LAYER_INVALID",
          "description": "The provided layer is invalid"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_EXPIRED",
          "description": "The invite link has expired"
        }
      ],
      "bot_can_use": true
    },
    "invokeWithMessagesRange": {
      "name": "invokeWithMessagesRange",
      "description": [
        "Invoke with the given message range"
      ],
      "parameters": {
        "query": {
          "description": "Query",
          "links": null
        },
        "range": {
          "description": "Message range",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "invokeWithTakeout": {
      "name": "invokeWithTakeout",
      "description": [
        "Invoke a method within a takeout session"
      ],
      "parameters": {
        "query": {
          "description": "Query",
          "links": null
        },
        "takeout_id": {
          "description": "Takeout session ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "INPUT_METHOD_INVALID_1400137063_X",
          "description": "Invalid method"
        }
      ],
      "bot_can_use": true
    },
    "invokeWithoutUpdates": {
      "name": "invokeWithoutUpdates",
      "description": [
        "Invoke a request without subscribing the used connection for updates¹ (this is enabled by default for file queries²)."
      ],
      "links": [
        "https://core.telegram.org/api/updates",
        "https://core.telegram.org/api/files"
      ],
      "parameters": {
        "query": {
          "description": "The query",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "langpack.getDifference": {
      "name": "langpack.getDifference",
      "description": [
        "Get new strings in languagepack"
      ],
      "parameters": {
        "from_version": {
          "description": "Previous localization pack version",
          "links": null
        },
        "lang_code": {
          "description": "Language code",
          "links": null
        },
        "lang_pack": {
          "description": "Language pack",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "LANG_PACK_INVALID",
          "description": "The provided language pack is invalid"
        }
      ],
      "bot_can_use": true
    },
    "langpack.getLangPack": {
      "name": "langpack.getLangPack",
      "description": [
        "Get localization pack strings"
      ],
      "parameters": {
        "lang_code": {
          "description": "Language code",
          "links": null
        },
        "lang_pack": {
          "description": "Language pack name",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "LANG_PACK_INVALID",
          "description": "The provided language pack is invalid"
        }
      ],
      "bot_can_use": true
    },
    "langpack.getLanguage": {
      "name": "langpack.getLanguage",
      "description": [
        "Get information about a language in a localization pack"
      ],
      "parameters": {
        "lang_code": {
          "description": "Language code",
          "links": null
        },
        "lang_pack": {
          "description": "Language pack name",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "langpack.getLanguages": {
      "name": "langpack.getLanguages",
      "description": [
        "Get information about all languages in a localization pack"
      ],
      "parameters": {
        "lang_pack": {
          "description": "Language pack",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "LANG_PACK_INVALID",
          "description": "The provided language pack is invalid"
        }
      ],
      "bot_can_use": true
    },
    "langpack.getStrings": {
      "name": "langpack.getStrings",
      "description": [
        "Get strings from a language pack"
      ],
      "parameters": {
        "keys": {
          "description": "Strings to get",
          "links": null
        },
        "lang_code": {
          "description": "Language code",
          "links": null
        },
        "lang_pack": {
          "description": "Language pack name",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "LANG_PACK_INVALID",
          "description": "The provided language pack is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.acceptEncryption": {
      "name": "messages.acceptEncryption",
      "description": [
        "Confirms creation of a secret chat"
      ],
      "parameters": {
        "g_b": {
          "description": "B = g ^ b mod p, see Wikipedia¹",
          "links": [
            "https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"
          ]
        },
        "key_fingerprint": {
          "description": "64-bit fingerprint of the received key",
          "links": null
        },
        "peer": {
          "description": "Secret chat ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_ALREADY_ACCEPTED",
          "description": "Secret chat already accepted"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_ALREADY_DECLINED",
          "description": "The secret chat was already declined"
        }
      ],
      "bot_can_use": true
    },
    "messages.acceptUrlAuth": {
      "name": "messages.acceptUrlAuth",
      "description": [
        "Use this to accept a Seamless Telegram Login authorization request, for more info click here »¹"
      ],
      "links": [
        "https://core.telegram.org/api/url-authorization"
      ],
      "parameters": {
        "button_id": {
          "description": "ID of the login button",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "msg_id": {
          "description": "Message ID of the message with the login button",
          "links": null
        },
        "peer": {
          "description": "The location of the message",
          "links": null
        },
        "write_allowed": {
          "description": "Set this flag to allow the bot to send messages to you (if requested)",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.addChatUser": {
      "name": "messages.addChatUser",
      "description": [
        "Adds a user to a chat and sends a service message on it."
      ],
      "parameters": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        },
        "fwd_limit": {
          "description": "Number of last messages to be forwarded",
          "links": null
        },
        "user_id": {
          "description": "User ID to be added",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "USERS_TOO_MUCH",
          "description": "The maximum number of users has been exceeded (to create a chat, for example)"
        },
        {
          "code": 400,
          "type": "USER_ALREADY_PARTICIPANT",
          "description": "The user is already in the group"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        },
        {
          "code": 403,
          "type": "USER_NOT_MUTUAL_CONTACT",
          "description": "The provided user is not a mutual contact"
        },
        {
          "code": 403,
          "type": "USER_PRIVACY_RESTRICTED",
          "description": "The user's privacy settings do not allow you to do this"
        }
      ],
      "bot_can_use": true
    },
    "messages.checkChatInvite": {
      "name": "messages.checkChatInvite",
      "description": [
        "Check the validity of a chat invite link and get basic info about it"
      ],
      "parameters": {
        "hash": {
          "description": "Invite hash in t.me/joinchat/hash",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "INVITE_HASH_EMPTY",
          "description": "The invite hash is empty"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_EXPIRED",
          "description": "The invite link has expired"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_INVALID",
          "description": "The invite hash is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.clearAllDrafts": {
      "name": "messages.clearAllDrafts",
      "description": [
        "Clear all drafts¹."
      ],
      "links": [
        "https://core.telegram.org/api/drafts"
      ],
      "bot_can_use": true
    },
    "messages.clearRecentStickers": {
      "name": "messages.clearRecentStickers",
      "description": [
        "Clear recent stickers"
      ],
      "parameters": {
        "attached": {
          "description": "Set this flag to clear the list of stickers recently attached to photo or video files",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.createChat": {
      "name": "messages.createChat",
      "description": [
        "Creates a new chat."
      ],
      "parameters": {
        "title": {
          "description": "Chat name",
          "links": null
        },
        "users": {
          "description": "List of user IDs to be invited",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_INVALID",
          "description": "Invalid chat"
        },
        {
          "code": 400,
          "type": "CHAT_TITLE_EMPTY",
          "description": "No chat title provided"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "USERS_TOO_FEW",
          "description": "Not enough users (to create a chat, for example)"
        },
        {
          "code": 403,
          "type": "USER_RESTRICTED",
          "description": "You're spamreported, you can't create channels or chats."
        }
      ],
      "bot_can_use": true
    },
    "messages.deleteChatUser": {
      "name": "messages.deleteChatUser",
      "description": [
        "Deletes a user from a chat and sends a service message on it."
      ],
      "parameters": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        },
        "user_id": {
          "description": "User ID to be deleted",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        },
        {
          "code": 400,
          "type": "USER_NOT_PARTICIPANT",
          "description": "You're not a member of this supergroup/channel"
        }
      ],
      "bot_can_use": true
    },
    "messages.deleteHistory": {
      "name": "messages.deleteHistory",
      "description": [
        "Deletes communication history."
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "just_clear": {
          "description": "Just clear history for the current user, without actually removing messages for every chat user",
          "links": null
        },
        "max_id": {
          "description": "Maximum ID of message to delete",
          "links": null
        },
        "peer": {
          "description": "User or chat, communication history of which will be deleted",
          "links": null
        },
        "revoke": {
          "description": "Whether to delete the message history for all chat participants",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.deleteMessages": {
      "name": "messages.deleteMessages",
      "description": [
        "Deletes messages by their identifiers."
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Message ID list",
          "links": null
        },
        "revoke": {
          "description": "Whether to delete messages for all participants of the chat",
          "links": null
        }
      },
      "errors": [
        {
          "code": 403,
          "type": "MESSAGE_DELETE_FORBIDDEN",
          "description": "You can't delete one of the messages you tried to delete, most likely because it is a service message."
        }
      ],
      "bot_can_use": true
    },
    "messages.deleteScheduledMessages": {
      "name": "messages.deleteScheduledMessages",
      "description": [
        "Delete scheduled messages"
      ],
      "parameters": {
        "id": {
          "description": "Scheduled message IDs",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.discardEncryption": {
      "name": "messages.discardEncryption",
      "description": [
        "Cancels a request for creation and/or delete info on secret chat."
      ],
      "parameters": {
        "chat_id": {
          "description": "Secret chat ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_EMPTY",
          "description": "The provided chat ID is empty"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_ALREADY_DECLINED",
          "description": "The secret chat was already declined"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_ID_INVALID",
          "description": "The provided secret chat ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.editChatAbout": {
      "name": "messages.editChatAbout",
      "description": [
        "Edit the description of a group/supergroup/channel¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "about": {
          "description": "The new description",
          "links": null
        },
        "peer": {
          "description": "The group/supergroup/channel¹.",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ABOUT_NOT_MODIFIED",
          "description": "About text has not changed"
        },
        {
          "code": 400,
          "type": "CHAT_ABOUT_TOO_LONG",
          "description": "Chat about too long"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.editChatAdmin": {
      "name": "messages.editChatAdmin",
      "description": [
        "Make a user admin in a legacy group¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "chat_id": {
          "description": "The ID of the group",
          "links": null
        },
        "is_admin": {
          "description": "Whether to make him admin",
          "links": null
        },
        "user_id": {
          "description": "The user to make admin",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        },
        {
          "code": 400,
          "type": "USER_NOT_PARTICIPANT",
          "description": "You're not a member of this supergroup/channel"
        }
      ],
      "bot_can_use": true
    },
    "messages.editChatDefaultBannedRights": {
      "name": "messages.editChatDefaultBannedRights",
      "description": [
        "Edit the default banned rights of a channel/supergroup/group¹."
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "banned_rights": {
          "description": "The new global rights",
          "links": null
        },
        "peer": {
          "description": "The peer",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BANNED_RIGHTS_INVALID",
          "description": "You provided some invalid flags in the banned rights"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "UNTIL_DATE_INVALID",
          "description": "Invalid until date provided"
        }
      ],
      "bot_can_use": true
    },
    "messages.editChatPhoto": {
      "name": "messages.editChatPhoto",
      "description": [
        "Changes chat photo and sends a service message on it"
      ],
      "parameters": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        },
        "photo": {
          "description": "Photo to be set",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 400,
          "type": "INPUT_CONSTRUCTOR_INVALID",
          "description": "The provided constructor is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_CROP_SIZE_SMALL",
          "description": "Photo is too small"
        },
        {
          "code": 400,
          "type": "PHOTO_EXT_INVALID",
          "description": "The extension of the photo is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_INVALID",
          "description": "Photo invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.editChatTitle": {
      "name": "messages.editChatTitle",
      "description": [
        "Chanages chat name and sends a service message on it."
      ],
      "parameters": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        },
        "title": {
          "description": "New chat name, different from the old one",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 400,
          "type": "CHAT_TITLE_EMPTY",
          "description": "No chat title provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.editInlineBotMessage": {
      "name": "messages.editInlineBotMessage",
      "description": [
        "Edit an inline bot message"
      ],
      "parameters": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Sent inline message ID",
          "links": null
        },
        "media": {
          "description": "Media",
          "links": null
        },
        "message": {
          "description": "Message",
          "links": null
        },
        "no_webpage": {
          "description": "Disable webpage preview",
          "links": null
        },
        "reply_markup": {
          "description": "Reply markup for inline keyboards",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "MESSAGE_NOT_MODIFIED",
          "description": "The message text has not changed"
        }
      ],
      "bot_can_use": true
    },
    "messages.editMessage": {
      "name": "messages.editMessage",
      "description": [
        "Edit message"
      ],
      "parameters": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "ID of the message to edit",
          "links": null
        },
        "media": {
          "description": "New attached media",
          "links": null
        },
        "message": {
          "description": "New message",
          "links": null
        },
        "no_webpage": {
          "description": "Disable webpage preview",
          "links": null
        },
        "peer": {
          "description": "Where was the message sent",
          "links": null
        },
        "reply_markup": {
          "description": "Reply markup for inline keyboards",
          "links": null
        },
        "schedule_date": {
          "description": "Scheduled message date for scheduled messages¹",
          "links": [
            "https://core.telegram.org/api/scheduled-messages"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BUTTON_DATA_INVALID",
          "description": "The data of one or more of the buttons you provided is invalid"
        },
        {
          "code": 400,
          "type": "BUTTON_TYPE_INVALID",
          "description": "The type of one or more of the buttons you provided is invalid"
        },
        {
          "code": 400,
          "type": "BUTTON_URL_INVALID",
          "description": "Button URL invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 403,
          "type": "INLINE_BOT_REQUIRED",
          "description": "Only the inline bot can edit message"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MEDIA_CAPTION_TOO_LONG",
          "description": "The caption is too long"
        },
        {
          "code": 400,
          "type": "MEDIA_PREV_INVALID",
          "description": "Previous media invalid"
        },
        {
          "code": 403,
          "type": "MESSAGE_AUTHOR_REQUIRED",
          "description": "Message author required"
        },
        {
          "code": 400,
          "type": "MESSAGE_EDIT_TIME_EXPIRED",
          "description": "You can't edit this message anymore, too much time has passed since its creation."
        },
        {
          "code": 400,
          "type": "MESSAGE_EMPTY",
          "description": "The provided message is empty"
        },
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "MESSAGE_NOT_MODIFIED",
          "description": "The message text has not changed"
        },
        {
          "code": 400,
          "type": "MESSAGE_TOO_LONG",
          "description": "The provided message is too long"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "REPLY_MARKUP_INVALID",
          "description": "The provided reply markup is invalid"
        },
        {
          "code": 400,
          "type": "SCHEDULE_DATE_INVALID",
          "description": "Invalid schedule date provided"
        },
        {
          "code": 400,
          "type": "USER_BANNED_IN_CHANNEL",
          "description": "You're banned from sending messages in supergroups/channels"
        }
      ],
      "bot_can_use": true
    },
    "messages.exportChatInvite": {
      "name": "messages.exportChatInvite",
      "description": [
        "Export an invite link for a chat"
      ],
      "parameters": {
        "peer": {
          "description": "Chat",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.faveSticker": {
      "name": "messages.faveSticker",
      "description": [
        "Mark a sticker as favorite"
      ],
      "parameters": {
        "id": {
          "description": "Sticker to mark as favorite",
          "links": null
        },
        "unfave": {
          "description": "Unfavorite",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "STICKER_ID_INVALID",
          "description": "The provided sticker ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.forwardMessages": {
      "name": "messages.forwardMessages",
      "description": [
        "Forwards messages by their IDs."
      ],
      "parameters": {
        "background": {
          "description": "Whether to send the message in background",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "from_peer": {
          "description": "Source of messages",
          "links": null
        },
        "id": {
          "description": "IDs of messages",
          "links": null
        },
        "random_id": {
          "description": "Random ID to prevent resending of messages",
          "links": null
        },
        "schedule_date": {
          "description": "Scheduled message date for scheduled messages",
          "links": null
        },
        "silent": {
          "description": "Whether to send messages silently (no notification will be triggered on the destination clients)",
          "links": null
        },
        "to_peer": {
          "description": "Destination peer",
          "links": null
        },
        "with_my_score": {
          "description": "When forwarding games, whether to include your score in the game",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BROADCAST_PUBLIC_VOTERS_FORBIDDEN",
          "description": "You can't forward polls with public voters"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_RESTRICTED",
          "description": "You can't send messages in this chat, you were restricted"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_GIFS_FORBIDDEN",
          "description": "You can't send gifs in this chat"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_MEDIA_FORBIDDEN",
          "description": "You can't send media in this chat"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_POLL_FORBIDDEN",
          "description": "You can't send polls in this chat"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_STICKERS_FORBIDDEN",
          "description": "You can't send stickers in this chat."
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "GROUPED_MEDIA_INVALID",
          "description": "Invalid grouped media"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MEDIA_EMPTY",
          "description": "The provided media object is invalid"
        },
        {
          "code": 400,
          "type": "MESSAGE_IDS_EMPTY",
          "description": "No message ids were provided"
        },
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 420,
          "type": "P0NY_FLOODWAIT",
          "description": " "
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "RANDOM_ID_INVALID",
          "description": "A provided random ID is invalid"
        },
        {
          "code": 400,
          "type": "SCHEDULE_TOO_MUCH",
          "description": "There are too many scheduled messages"
        },
        {
          "code": 400,
          "type": "SLOWMODE_MULTI_MSGS_DISABLED",
          "description": "Slowmode is enabled, you cannot forward multiple messages to this group."
        },
        {
          "code": 420,
          "type": "SLOWMODE_WAIT_X",
          "description": "Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat."
        },
        {
          "code": 400,
          "type": "USER_BANNED_IN_CHANNEL",
          "description": "You're banned from sending messages in supergroups/channels"
        },
        {
          "code": 400,
          "type": "USER_IS_BLOCKED",
          "description": "You were blocked by this user"
        },
        {
          "code": 400,
          "type": "USER_IS_BOT",
          "description": "Bots can't send messages to other bots"
        },
        {
          "code": 400,
          "type": "YOU_BLOCKED_USER",
          "description": "You blocked this user"
        }
      ],
      "bot_can_use": true
    },
    "messages.getAllChats": {
      "name": "messages.getAllChats",
      "description": [
        "Get all chats, channels and supergroups"
      ],
      "parameters": {
        "except_ids": {
          "description": "Except these chats/channels/supergroups",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getAllDrafts": {
      "name": "messages.getAllDrafts",
      "description": [
        "Save get all message drafts¹."
      ],
      "links": [
        "https://core.telegram.org/api/drafts"
      ],
      "bot_can_use": true
    },
    "messages.getAllStickers": {
      "name": "messages.getAllStickers",
      "description": [
        "Get all installed stickers"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getArchivedStickers": {
      "name": "messages.getArchivedStickers",
      "description": [
        "Get all archived stickers"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "masks": {
          "description": "Get mask stickers",
          "links": null
        },
        "offset_id": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getAttachedStickers": {
      "name": "messages.getAttachedStickers",
      "description": [
        "Get stickers attached to a photo or video"
      ],
      "parameters": {
        "media": {
          "description": "Stickered media",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getBotCallbackAnswer": {
      "name": "messages.getBotCallbackAnswer",
      "description": [
        "Press an inline callback button and get a callback answer from the bot"
      ],
      "parameters": {
        "data": {
          "description": "Callback data",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "game": {
          "description": "Whether this is a \"play game\" button",
          "links": null
        },
        "msg_id": {
          "description": "ID of the Message with the inline keyboard",
          "links": null
        },
        "password": {
          "description": "For buttons requiring you to verify your identity with your 2FA password¹, the SRP payload generated using SRP².",
          "links": [
            "https://core.telegram.org/constructor/keyboardButtonCallback",
            "https://core.telegram.org/api/srp"
          ]
        },
        "peer": {
          "description": "Where was the inline keyboard sent",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOT_RESPONSE_TIMEOUT",
          "description": "A timeout occurred while fetching data from the bot"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "DATA_INVALID",
          "description": "Encrypted data invalid"
        },
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": -503,
          "type": "Timeout",
          "description": "Timeout while fetching data"
        }
      ],
      "bot_can_use": true
    },
    "messages.getChats": {
      "name": "messages.getChats",
      "description": [
        "Returns chat basic info on their IDs."
      ],
      "parameters": {
        "id": {
          "description": "List of chat IDs",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getCommonChats": {
      "name": "messages.getCommonChats",
      "description": [
        "Get chats in common with a user"
      ],
      "parameters": {
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "max_id": {
          "description": "Maximum ID of chat to return (see pagination¹)",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getDhConfig": {
      "name": "messages.getDhConfig",
      "description": [
        "Returns configuration parameters for Diffie-Hellman key generation. Can also return a random sequence of bytes of required length."
      ],
      "parameters": {
        "random_length": {
          "description": "Length of the required random sequence",
          "links": null
        },
        "version": {
          "description": "Value of the version parameter from messages.dhConfig¹, avialable at the client",
          "links": [
            "https://core.telegram.org/constructor/messages.dhConfig"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "RANDOM_LENGTH_INVALID",
          "description": "Random length invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getDialogFilters": {
      "name": "messages.getDialogFilters",
      "description": [
        "Get folders¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ],
      "bot_can_use": true
    },
    "messages.getDialogUnreadMarks": {
      "name": "messages.getDialogUnreadMarks",
      "description": [
        "Get dialogs manually marked as unread"
      ],
      "bot_can_use": true
    },
    "messages.getDialogs": {
      "name": "messages.getDialogs",
      "description": [
        "Returns the current user dialog list."
      ],
      "parameters": {
        "exclude_pinned": {
          "description": "Exclude pinned dialogs",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "limit": {
          "description": "Number of list elements to be returned",
          "links": null
        },
        "offset_date": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_id": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_peer": {
          "description": "Offset peer for pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FOLDER_ID_INVALID",
          "description": "Invalid folder ID"
        },
        {
          "code": 400,
          "type": "INPUT_CONSTRUCTOR_INVALID",
          "description": "The provided constructor is invalid"
        },
        {
          "code": 400,
          "type": "OFFSET_PEER_ID_INVALID",
          "description": "The provided offset peer is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getDiscussionMessage": {
      "name": "messages.getDiscussionMessage",
      "description": [
        "Get discussion message¹ from the associated discussion group² of a channel to show it on top of the comment section, without actually joining the group"
      ],
      "links": [
        "https://core.telegram.org/api/threads",
        "https://core.telegram.org/api/discussion"
      ],
      "parameters": {
        "msg_id": {
          "description": "Message ID",
          "links": null
        },
        "peer": {
          "description": "Channel ID¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getDocumentByHash": {
      "name": "messages.getDocumentByHash",
      "description": [
        "Get a document by its SHA256 hash, mainly used for gifs"
      ],
      "parameters": {
        "mime_type": {
          "description": "Mime type",
          "links": null
        },
        "sha256": {
          "description": "SHA256 of file",
          "links": null
        },
        "size": {
          "description": "Size of the file in bytes",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "SHA256_HASH_INVALID",
          "description": "The provided SHA256 hash is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getEmojiKeywords": {
      "name": "messages.getEmojiKeywords",
      "description": [
        "Get localized emoji keywords"
      ],
      "parameters": {
        "lang_code": {
          "description": "Language code",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getEmojiKeywordsDifference": {
      "name": "messages.getEmojiKeywordsDifference",
      "description": [
        "Get changed emoji keywords"
      ],
      "parameters": {
        "from_version": {
          "description": "Previous emoji keyword localization version",
          "links": null
        },
        "lang_code": {
          "description": "Language code",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getEmojiKeywordsLanguages": {
      "name": "messages.getEmojiKeywordsLanguages",
      "description": [
        "Get info about an emoji keyword localization"
      ],
      "parameters": {
        "lang_codes": {
          "description": "Language codes",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getEmojiURL": {
      "name": "messages.getEmojiURL",
      "description": [
        "Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation"
      ],
      "parameters": {
        "lang_code": {
          "description": "Language code for which the emoji replacements will be suggested",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getFavedStickers": {
      "name": "messages.getFavedStickers",
      "description": [
        "Get faved stickers"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getFeaturedStickers": {
      "name": "messages.getFeaturedStickers",
      "description": [
        "Get featured stickers"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getFullChat": {
      "name": "messages.getFullChat",
      "description": [
        "Returns full chat info according to its ID."
      ],
      "parameters": {
        "chat_id": {
          "description": "Chat ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getGameHighScores": {
      "name": "messages.getGameHighScores",
      "description": [
        "Get highscores of a game"
      ],
      "parameters": {
        "id": {
          "description": "ID of message with game media attachment",
          "links": null
        },
        "peer": {
          "description": "Where was the game sent",
          "links": null
        },
        "user_id": {
          "description": "Get high scores made by a certain user",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "USER_BOT_REQUIRED",
          "description": "This method can only be called by a bot"
        }
      ],
      "bot_can_use": true
    },
    "messages.getHistory": {
      "name": "messages.getHistory",
      "description": [
        "Gets back the conversation history with one interlocutor / within a chat"
      ],
      "parameters": {
        "add_offset": {
          "description": "Number of list elements to be skipped, negative values are also accepted.",
          "links": null
        },
        "hash": {
          "description": "Result hash¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "limit": {
          "description": "Number of results to return",
          "links": null
        },
        "max_id": {
          "description": "If a positive value was transferred, the method will return only messages with IDs less than max_id",
          "links": null
        },
        "min_id": {
          "description": "If a positive value was transferred, the method will return only messages with IDs more than min_id",
          "links": null
        },
        "offset_date": {
          "description": "Only return messages sent before the specified date",
          "links": null
        },
        "offset_id": {
          "description": "Only return messages starting from the specified message ID",
          "links": null
        },
        "peer": {
          "description": "Target peer",
          "links": null
        }
      },
      "errors": [
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "CONNECTION_DEVICE_MODEL_EMPTY",
          "description": "Device model empty"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getInlineBotResults": {
      "name": "messages.getInlineBotResults",
      "description": [
        "Query an inline bot"
      ],
      "parameters": {
        "bot": {
          "description": "The bot to query",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "geo_point": {
          "description": "The geolocation, if requested",
          "links": null
        },
        "offset": {
          "description": "The offset within the results, will be passed directly as-is to the bot.",
          "links": null
        },
        "peer": {
          "description": "The currently opened chat",
          "links": null
        },
        "query": {
          "description": "The query",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOT_INLINE_DISABLED",
          "description": "This bot can't be used in inline mode"
        },
        {
          "code": 400,
          "type": "BOT_INVALID",
          "description": "This is not a valid bot"
        },
        {
          "code": 400,
          "type": "BOT_RESPONSE_TIMEOUT",
          "description": "A timeout occurred while fetching data from the bot"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": -503,
          "type": "Timeout",
          "description": "Timeout while fetching data"
        }
      ],
      "bot_can_use": true
    },
    "messages.getInlineGameHighScores": {
      "name": "messages.getInlineGameHighScores",
      "description": [
        "Get highscores of a game sent using an inline bot"
      ],
      "parameters": {
        "id": {
          "description": "ID of inline message",
          "links": null
        },
        "user_id": {
          "description": "Get high scores of a certain user",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "USER_BOT_REQUIRED",
          "description": "This method can only be called by a bot"
        }
      ],
      "bot_can_use": true
    },
    "messages.getMaskStickers": {
      "name": "messages.getMaskStickers",
      "description": [
        "Get installed mask stickers"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getMessageEditData": {
      "name": "messages.getMessageEditData",
      "description": [
        "Find out if a media message's caption can be edited"
      ],
      "parameters": {
        "id": {
          "description": "ID of message",
          "links": null
        },
        "peer": {
          "description": "Peer where the media was sent",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 403,
          "type": "MESSAGE_AUTHOR_REQUIRED",
          "description": "Message author required"
        },
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getMessages": {
      "name": "messages.getMessages",
      "description": [
        "Returns the list of messages by their IDs."
      ],
      "parameters": {
        "id": {
          "description": "Message ID list",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getMessagesViews": {
      "name": "messages.getMessagesViews",
      "description": [
        "Get and increase the view counter of a message sent or forwarded from a channel¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "id": {
          "description": "ID of message",
          "links": null
        },
        "increment": {
          "description": "Whether to mark the message as viewed and increment the view counter",
          "links": null
        },
        "peer": {
          "description": "Peer where the message was found",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getOldFeaturedStickers": {
      "name": "messages.getOldFeaturedStickers",
      "description": [
        "Method for fetching previously featured stickers"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset": {
          "description": "Offset",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getOnlines": {
      "name": "messages.getOnlines",
      "description": [
        "Get count of online users in a chat"
      ],
      "parameters": {
        "peer": {
          "description": "The chat",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getPeerDialogs": {
      "name": "messages.getPeerDialogs",
      "description": [
        "Get dialog info of specified peers"
      ],
      "parameters": {
        "peers": {
          "description": "Peers",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CONNECTION_DEVICE_MODEL_EMPTY",
          "description": "Device model empty"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getPeerSettings": {
      "name": "messages.getPeerSettings",
      "description": [
        "Get peer settings"
      ],
      "parameters": {
        "peer": {
          "description": "The peer",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getPinnedDialogs": {
      "name": "messages.getPinnedDialogs",
      "description": [
        "Get pinned dialogs"
      ],
      "parameters": {
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FOLDER_ID_INVALID",
          "description": "Invalid folder ID"
        }
      ],
      "bot_can_use": true
    },
    "messages.getPollResults": {
      "name": "messages.getPollResults",
      "description": [
        "Get poll results"
      ],
      "parameters": {
        "msg_id": {
          "description": "Message ID of poll message",
          "links": null
        },
        "peer": {
          "description": "Peer where the poll was found",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getPollVotes": {
      "name": "messages.getPollVotes",
      "description": [
        "Get poll results for non-anonymous polls"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Message ID",
          "links": null
        },
        "limit": {
          "description": "Number of results to return",
          "links": null
        },
        "offset": {
          "description": "Offset for results, taken from the next_offset field of messages.votesList¹, initially an empty string. Note: if no more results are available, the method call will return an empty next_offset; thus, avoid providing the next_offset returned in messages.votesList² if it is empty, to avoid an infinite loop.",
          "links": [
            "https://core.telegram.org/constructor/messages.votesList",
            "https://core.telegram.org/constructor/messages.votesList"
          ]
        },
        "option": {
          "description": "Get only results for the specified poll option",
          "links": null
        },
        "peer": {
          "description": "Chat where the poll was sent",
          "links": null
        }
      },
      "errors": [
        {
          "code": 403,
          "type": "BROADCAST_FORBIDDEN",
          "description": " "
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 403,
          "type": "POLL_VOTE_REQUIRED",
          "description": "Cast a vote in the poll before calling this method"
        }
      ],
      "bot_can_use": true
    },
    "messages.getRecentLocations": {
      "name": "messages.getRecentLocations",
      "description": [
        "Get live location history of a certain user"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "peer": {
          "description": "User",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getRecentStickers": {
      "name": "messages.getRecentStickers",
      "description": [
        "Get recent stickers"
      ],
      "parameters": {
        "attached": {
          "description": "Get stickers recently attached to photo or video files",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getReplies": {
      "name": "messages.getReplies",
      "description": [
        "Get messages in a reply thread"
      ],
      "parameters": {
        "add_offset": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "max_id": {
          "description": "If a positive value was transferred, the method will return only messages with ID smaller than max_id",
          "links": null
        },
        "min_id": {
          "description": "If a positive value was transferred, the method will return only messages with ID bigger than min_id",
          "links": null
        },
        "msg_id": {
          "description": "Message ID",
          "links": null
        },
        "offset_date": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_id": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "peer": {
          "description": "Peer",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getSavedGifs": {
      "name": "messages.getSavedGifs",
      "description": [
        "Get saved GIFs"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getScheduledHistory": {
      "name": "messages.getScheduledHistory",
      "description": [
        "Get scheduled messages"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "peer": {
          "description": "Peer",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getScheduledMessages": {
      "name": "messages.getScheduledMessages",
      "description": [
        "Get scheduled messages"
      ],
      "parameters": {
        "id": {
          "description": "IDs of scheduled messages",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getSearchCounters": {
      "name": "messages.getSearchCounters",
      "description": [
        "Get the number of results that would be found by a messages.search¹ call with the same parameters"
      ],
      "links": [
        "https://core.telegram.org/method/messages.search"
      ],
      "parameters": {
        "filters": {
          "description": "Search filters",
          "links": null
        },
        "peer": {
          "description": "Peer where to search",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.getSplitRanges": {
      "name": "messages.getSplitRanges",
      "description": [
        "Get message ranges for saving the user's chat history"
      ],
      "bot_can_use": true
    },
    "messages.getStatsURL": {
      "name": "messages.getStatsURL",
      "description": [
        "Returns URL with the chat statistics. Currently this method can be used only for channels"
      ],
      "parameters": {
        "dark": {
          "description": "Pass true if a URL with the dark theme must be returned",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "params": {
          "description": "Parameters from tg://statsrefresh?params=****** link",
          "links": null
        },
        "peer": {
          "description": "Chat identifier",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getStickerSet": {
      "name": "messages.getStickerSet",
      "description": [
        "Get info about a stickerset"
      ],
      "parameters": {
        "stickerset": {
          "description": "Stickerset",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "STICKERSET_INVALID",
          "description": "The provided sticker set is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getStickers": {
      "name": "messages.getStickers",
      "description": [
        "Get stickers by emoji"
      ],
      "parameters": {
        "emoticon": {
          "description": "The emoji",
          "links": null
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.getSuggestedDialogFilters": {
      "name": "messages.getSuggestedDialogFilters",
      "description": [
        "Get suggested folders¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ],
      "bot_can_use": true
    },
    "messages.getUnreadMentions": {
      "name": "messages.getUnreadMentions",
      "description": [
        "Get unread messages where we were mentioned"
      ],
      "parameters": {
        "add_offset": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "max_id": {
          "description": "Maximum message ID to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "min_id": {
          "description": "Minimum message ID to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_id": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "peer": {
          "description": "Peer where to look for mentions",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getWebPage": {
      "name": "messages.getWebPage",
      "description": [
        "Get instant view¹ page"
      ],
      "links": [
        "https://instantview.telegram.org"
      ],
      "parameters": {
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "url": {
          "description": "URL of IV page to fetch",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "WC_CONVERT_URL_INVALID",
          "description": "WC convert URL invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.getWebPagePreview": {
      "name": "messages.getWebPagePreview",
      "description": [
        "Get preview of webpage"
      ],
      "parameters": {
        "entities": {
          "description": "Message entities for styled text¹",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "Message from which to extract the preview",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_EMPTY",
          "description": "The provided message is empty"
        }
      ],
      "bot_can_use": true
    },
    "messages.hidePeerSettingsBar": {
      "name": "messages.hidePeerSettingsBar",
      "description": [
        "Should be called after the user hides the report spam/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the peer's settings¹."
      ],
      "links": [
        "https://core.telegram.org/constructor/peerSettings"
      ],
      "parameters": {
        "peer": {
          "description": "Peer",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.importChatInvite": {
      "name": "messages.importChatInvite",
      "description": [
        "Import a chat invite and join a private chat/supergroup/channel"
      ],
      "parameters": {
        "hash": {
          "description": "hash from t.me/joinchat/hash",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNELS_TOO_MUCH",
          "description": "You have joined too many channels/supergroups"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_EMPTY",
          "description": "The invite hash is empty"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_EXPIRED",
          "description": "The invite link has expired"
        },
        {
          "code": 400,
          "type": "INVITE_HASH_INVALID",
          "description": "The invite hash is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "USERS_TOO_MUCH",
          "description": "The maximum number of users has been exceeded (to create a chat, for example)"
        },
        {
          "code": 400,
          "type": "USER_ALREADY_PARTICIPANT",
          "description": "The user is already in the group"
        },
        {
          "code": 400,
          "type": "USER_CHANNELS_TOO_MUCH",
          "description": "One of the users you tried to add is already in too many channels/supergroups"
        }
      ],
      "bot_can_use": true
    },
    "messages.installStickerSet": {
      "name": "messages.installStickerSet",
      "description": [
        "Install a stickerset"
      ],
      "parameters": {
        "archived": {
          "description": "Whether to archive stickerset",
          "links": null
        },
        "stickerset": {
          "description": "Stickerset to install",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "STICKERSET_INVALID",
          "description": "The provided sticker set is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.markDialogUnread": {
      "name": "messages.markDialogUnread",
      "description": [
        "Manually mark dialog as unread"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "Dialog",
          "links": null
        },
        "unread": {
          "description": "Mark as unread/read",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.migrateChat": {
      "name": "messages.migrateChat",
      "description": [
        "Turn a legacy group into a supergroup¹"
      ],
      "links": [
        "https://core.telegram.org/api/channel"
      ],
      "parameters": {
        "chat_id": {
          "description": "Legacy group to migrate",
          "links": null
        }
      },
      "errors": [
        {
          "code": 403,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.readDiscussion": {
      "name": "messages.readDiscussion",
      "description": [
        "Mark a thread¹ as read"
      ],
      "links": [
        "https://core.telegram.org/api/threads"
      ],
      "parameters": {
        "msg_id": {
          "description": "ID of message that started the thread",
          "links": null
        },
        "peer": {
          "description": "Group ID",
          "links": null
        },
        "read_max_id": {
          "description": "ID up to which thread messages were read",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.readEncryptedHistory": {
      "name": "messages.readEncryptedHistory",
      "description": [
        "Marks message history within a secret chat as read."
      ],
      "parameters": {
        "max_date": {
          "description": "Maximum date value for received messages in history",
          "links": null
        },
        "peer": {
          "description": "Secret chat ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MSG_WAIT_FAILED",
          "description": "A waiting call returned an error"
        }
      ],
      "bot_can_use": true
    },
    "messages.readFeaturedStickers": {
      "name": "messages.readFeaturedStickers",
      "description": [
        "Mark new featured stickers as read"
      ],
      "parameters": {
        "id": {
          "description": "IDs of stickersets to mark as read",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.readHistory": {
      "name": "messages.readHistory",
      "description": [
        "Marks message history as read."
      ],
      "parameters": {
        "max_id": {
          "description": "If a positive value is passed, only messages with identifiers less or equal than the given one will be read",
          "links": null
        },
        "peer": {
          "description": "Target user or group",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.readMentions": {
      "name": "messages.readMentions",
      "description": [
        "Mark mentions as read"
      ],
      "parameters": {
        "peer": {
          "description": "Dialog",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.readMessageContents": {
      "name": "messages.readMessageContents",
      "description": [
        "Notifies the sender about the recipient having listened a voice message or watched a video."
      ],
      "parameters": {
        "id": {
          "description": "Message ID list",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.receivedMessages": {
      "name": "messages.receivedMessages",
      "description": [
        "Confirms receipt of messages by a client, cancels PUSH-notification sending."
      ],
      "parameters": {
        "max_id": {
          "description": "Maximum message ID available in a client.",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.receivedQueue": {
      "name": "messages.receivedQueue",
      "description": [
        "Confirms receipt of messages in a secret chat by client, cancels push notifications."
      ],
      "parameters": {
        "max_qts": {
          "description": "Maximum qts value available at the client",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MSG_WAIT_FAILED",
          "description": "A waiting call returned an error"
        }
      ],
      "bot_can_use": true
    },
    "messages.reorderPinnedDialogs": {
      "name": "messages.reorderPinnedDialogs",
      "description": [
        "Reorder pinned dialogs"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "force": {
          "description": "If set, dialogs pinned server-side but not present in the order field will be unpinned.",
          "links": null
        },
        "order": {
          "description": "New dialog order",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.reorderStickerSets": {
      "name": "messages.reorderStickerSets",
      "description": [
        "Reorder installed stickersets"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "masks": {
          "description": "Reorder mask stickersets",
          "links": null
        },
        "order": {
          "description": "New stickerset order by stickerset IDs",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.report": {
      "name": "messages.report",
      "description": [
        "Report a message in a chat for violation of telegram's Terms of Service"
      ],
      "parameters": {
        "id": {
          "description": "IDs of messages to report",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        },
        "reason": {
          "description": "Why are these messages being reported",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.reportEncryptedSpam": {
      "name": "messages.reportEncryptedSpam",
      "description": [
        "Report a secret chat for spam"
      ],
      "parameters": {
        "peer": {
          "description": "The secret chat to report",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.reportSpam": {
      "name": "messages.reportSpam",
      "description": [
        "Report a new incoming chat for spam, if the peer settings¹ of the chat allow us to do that"
      ],
      "links": [
        "https://core.telegram.org/constructor/peerSettings"
      ],
      "parameters": {
        "peer": {
          "description": "Peer to report",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.requestEncryption": {
      "name": "messages.requestEncryption",
      "description": [
        "Sends a request to start a secret chat to the user."
      ],
      "parameters": {
        "g_a": {
          "description": "A = g ^ a mod p, see Wikipedia¹",
          "links": [
            "https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"
          ]
        },
        "random_id": {
          "description": "Unique client request ID required to prevent resending. This also doubles as the chat ID.",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "DH_G_A_INVALID",
          "description": "g_a invalid"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.requestUrlAuth": {
      "name": "messages.requestUrlAuth",
      "description": [
        "Get more info about a Seamless Telegram Login authorization request, for more info click here »¹"
      ],
      "links": [
        "https://core.telegram.org/api/url-authorization"
      ],
      "parameters": {
        "button_id": {
          "description": "The ID of the button with the authorization request",
          "links": null
        },
        "msg_id": {
          "description": "The message",
          "links": null
        },
        "peer": {
          "description": "Peer where the message is located",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.saveDraft": {
      "name": "messages.saveDraft",
      "description": [
        "Save a message draft¹ associated to a chat."
      ],
      "links": [
        "https://core.telegram.org/api/drafts"
      ],
      "parameters": {
        "entities": {
          "description": "Message entities¹ for styled text",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "The draft",
          "links": null
        },
        "no_webpage": {
          "description": "Disable generation of the webpage preview",
          "links": null
        },
        "peer": {
          "description": "Destination of the message that should be sent",
          "links": null
        },
        "reply_to_msg_id": {
          "description": "Message ID the message should reply to",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.saveGif": {
      "name": "messages.saveGif",
      "description": [
        "Add GIF to saved gifs list"
      ],
      "parameters": {
        "id": {
          "description": "GIF to save",
          "links": null
        },
        "unsave": {
          "description": "Whether to remove GIF from saved gifs list",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "GIF_ID_INVALID",
          "description": "The provided GIF ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.saveRecentSticker": {
      "name": "messages.saveRecentSticker",
      "description": [
        "Add/remove sticker from recent stickers list"
      ],
      "parameters": {
        "attached": {
          "description": "Whether to add/remove stickers recently attached to photo or video files",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Sticker",
          "links": null
        },
        "unsave": {
          "description": "Whether to save or unsave the sticker",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "STICKER_ID_INVALID",
          "description": "The provided sticker ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.search": {
      "name": "messages.search",
      "description": [
        "Gets back found messages"
      ],
      "parameters": {
        "add_offset": {
          "description": "Additional offset¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "filter": {
          "description": "Filter to return only specified message types",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "from_id": {
          "description": "Only return messages sent by the specified user ID",
          "links": null
        },
        "hash": {
          "description": "Hash¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "limit": {
          "description": "Number of results to return¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "max_date": {
          "description": "If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned",
          "links": null
        },
        "max_id": {
          "description": "Maximum message ID to return¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "min_date": {
          "description": "If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned",
          "links": null
        },
        "min_id": {
          "description": "Minimum message ID to return¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_id": {
          "description": "Only return messages starting from the specified message ID",
          "links": null
        },
        "peer": {
          "description": "User or chat, histories with which are searched, or (inputPeerEmpty)¹ constructor for global search",
          "links": [
            "https://core.telegram.org/constructor/inputPeerEmpty"
          ]
        },
        "q": {
          "description": "Text search request",
          "links": null
        },
        "top_msg_id": {
          "description": "Thread ID¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "INPUT_CONSTRUCTOR_INVALID",
          "description": "The provided constructor is invalid"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_NOT_SUPPORTED",
          "description": "The provided peer ID is not supported"
        },
        {
          "code": 400,
          "type": "SEARCH_QUERY_EMPTY",
          "description": "The search query is empty"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.searchGlobal": {
      "name": "messages.searchGlobal",
      "description": [
        "Search for messages and peers globally"
      ],
      "parameters": {
        "filter": {
          "description": "Global search filter",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "folder_id": {
          "description": "Peer folder ID, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/folders#peer-folders"
          ]
        },
        "limit": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "max_date": {
          "description": "If a positive value was transferred, the method will return only messages with date smaller than max_date",
          "links": null
        },
        "min_date": {
          "description": "If a positive value was specified, the method will return only messages with date bigger than min_date",
          "links": null
        },
        "offset_id": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_peer": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_rate": {
          "description": "Initially 0, then set to the next_rate parameter of messages.messagesSlice¹",
          "links": [
            "https://core.telegram.org/constructor/messages.messagesSlice"
          ]
        },
        "q": {
          "description": "Query",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FOLDER_ID_INVALID",
          "description": "Invalid folder ID"
        },
        {
          "code": 400,
          "type": "SEARCH_QUERY_EMPTY",
          "description": "The search query is empty"
        }
      ],
      "bot_can_use": true
    },
    "messages.searchStickerSets": {
      "name": "messages.searchStickerSets",
      "description": [
        "Search for stickersets"
      ],
      "parameters": {
        "exclude_featured": {
          "description": "Exclude featured stickersets from results",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "hash": {
          "description": "Hash for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets#hash-generation"
          ]
        },
        "q": {
          "description": "Query string",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.sendEncrypted": {
      "name": "messages.sendEncrypted",
      "description": [
        "Sends a text message to a secret chat."
      ],
      "parameters": {
        "data": {
          "description": "TL-serialization of DecryptedMessage¹ type, encrypted with a key that was created during chat initialization",
          "links": [
            "https://core.telegram.org/type/DecryptedMessage"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "Secret chat ID",
          "links": null
        },
        "random_id": {
          "description": "Unique client message ID, necessary to avoid message resending",
          "links": null
        },
        "silent": {
          "description": "Send encrypted message without a notification",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "DATA_INVALID",
          "description": "Encrypted data invalid"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_DECLINED",
          "description": "The secret chat was declined"
        },
        {
          "code": 400,
          "type": "MSG_WAIT_FAILED",
          "description": "A waiting call returned an error"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendEncryptedFile": {
      "name": "messages.sendEncryptedFile",
      "description": [
        "Sends a message with a file attachment to a secret chat"
      ],
      "parameters": {
        "data": {
          "description": "TL-serialization of DecryptedMessage¹ type, encrypted with a key generated during chat initialization",
          "links": [
            "https://core.telegram.org/type/DecryptedMessage"
          ]
        },
        "file": {
          "description": "File attachment for the secret chat",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "Secret chat ID",
          "links": null
        },
        "random_id": {
          "description": "Unique client message ID necessary to prevent message resending",
          "links": null
        },
        "silent": {
          "description": "Whether to send the file without triggering a notification",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "DATA_TOO_LONG",
          "description": "Data too long"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_DECLINED",
          "description": "The secret chat was declined"
        },
        {
          "code": 400,
          "type": "MD5_CHECKSUM_INVALID",
          "description": "The MD5 checksums do not match"
        },
        {
          "code": 400,
          "type": "MSG_WAIT_FAILED",
          "description": "A waiting call returned an error"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendEncryptedService": {
      "name": "messages.sendEncryptedService",
      "description": [
        "Sends a service message to a secret chat."
      ],
      "parameters": {
        "data": {
          "description": "TL-serialization of  DecryptedMessage¹ type, encrypted with a key generated during chat initialization",
          "links": [
            "https://core.telegram.org/type/DecryptedMessage"
          ]
        },
        "peer": {
          "description": "Secret chat ID",
          "links": null
        },
        "random_id": {
          "description": "Unique client message ID required to prevent message resending",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "DATA_INVALID",
          "description": "Encrypted data invalid"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_DECLINED",
          "description": "The secret chat was declined"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_ID_INVALID",
          "description": "The provided secret chat ID is invalid"
        },
        {
          "code": 400,
          "type": "MSG_WAIT_FAILED",
          "description": "A waiting call returned an error"
        },
        {
          "code": 403,
          "type": "USER_IS_BLOCKED",
          "description": "You were blocked by this user"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendInlineBotResult": {
      "name": "messages.sendInlineBotResult",
      "description": [
        "Send a result obtained using messages.getInlineBotResults¹."
      ],
      "links": [
        "https://core.telegram.org/method/messages.getInlineBotResults"
      ],
      "parameters": {
        "background": {
          "description": "Whether to send the message in background",
          "links": null
        },
        "clear_draft": {
          "description": "Whether to clear the draft¹",
          "links": [
            "https://core.telegram.org/api/drafts"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "hide_via": {
          "description": "Whether to hide the via @botname in the resulting message (only for bot usernames encountered in the config¹)",
          "links": [
            "https://core.telegram.org/constructor/config"
          ]
        },
        "id": {
          "description": "Result ID from messages.getInlineBotResults¹",
          "links": [
            "https://core.telegram.org/method/messages.getInlineBotResults"
          ]
        },
        "peer": {
          "description": "Destination",
          "links": null
        },
        "query_id": {
          "description": "Query ID from messages.getInlineBotResults¹",
          "links": [
            "https://core.telegram.org/method/messages.getInlineBotResults"
          ]
        },
        "random_id": {
          "description": "Random ID to avoid resending the same query",
          "links": null
        },
        "reply_to_msg_id": {
          "description": "ID of the message this message should reply to",
          "links": null
        },
        "schedule_date": {
          "description": "Scheduled message date for scheduled messages",
          "links": null
        },
        "silent": {
          "description": "Whether to send the message silently (no notification will be triggered on the other client)",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_RESTRICTED",
          "description": "You can't send messages in this chat, you were restricted"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_GIFS_FORBIDDEN",
          "description": "You can't send gifs in this chat"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_INLINE_FORBIDDEN",
          "description": "You can't send inline messages in this group"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_MEDIA_FORBIDDEN",
          "description": "You can't send media in this chat"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_STICKERS_FORBIDDEN",
          "description": "You can't send stickers in this chat."
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "INLINE_RESULT_EXPIRED",
          "description": "The inline query expired"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MEDIA_EMPTY",
          "description": "The provided media object is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "QUERY_ID_EMPTY",
          "description": "The query ID is empty"
        },
        {
          "code": 400,
          "type": "RESULT_ID_EMPTY",
          "description": "Result ID empty"
        },
        {
          "code": 420,
          "type": "SLOWMODE_WAIT_X",
          "description": "Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat."
        },
        {
          "code": 400,
          "type": "USER_BANNED_IN_CHANNEL",
          "description": "You're banned from sending messages in supergroups/channels"
        },
        {
          "code": 400,
          "type": "WEBPAGE_CURL_FAILED",
          "description": "Failure while fetching the webpage with cURL"
        },
        {
          "code": 400,
          "type": "WEBPAGE_MEDIA_EMPTY",
          "description": "Webpage media empty"
        },
        {
          "code": 400,
          "type": "YOU_BLOCKED_USER",
          "description": "You blocked this user"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendMedia": {
      "name": "messages.sendMedia",
      "description": [
        "Send a media"
      ],
      "parameters": {
        "background": {
          "description": "Send message in background",
          "links": null
        },
        "clear_draft": {
          "description": "Clear the draft",
          "links": null
        },
        "entities": {
          "description": "Message entities¹ for styled text",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "media": {
          "description": "Attached media",
          "links": null
        },
        "message": {
          "description": "Caption",
          "links": null
        },
        "peer": {
          "description": "Destination",
          "links": null
        },
        "random_id": {
          "description": "Random ID to avoid resending the same message",
          "links": null
        },
        "reply_markup": {
          "description": "Reply markup for bot keyboards",
          "links": null
        },
        "reply_to_msg_id": {
          "description": "Message ID to which this message should reply to",
          "links": null
        },
        "schedule_date": {
          "description": "Scheduled message date for scheduled messages¹",
          "links": [
            "https://core.telegram.org/api/scheduled-messages"
          ]
        },
        "silent": {
          "description": "Send message silently (no notification should be triggered)",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BROADCAST_PUBLIC_VOTERS_FORBIDDEN",
          "description": "You can't forward polls with public voters"
        },
        {
          "code": 400,
          "type": "BUTTON_DATA_INVALID",
          "description": "The data of one or more of the buttons you provided is invalid"
        },
        {
          "code": 400,
          "type": "BUTTON_TYPE_INVALID",
          "description": "The type of one or more of the buttons you provided is invalid"
        },
        {
          "code": 400,
          "type": "BUTTON_URL_INVALID",
          "description": "Button URL invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_RESTRICTED",
          "description": "You can't send messages in this chat, you were restricted"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_GIFS_FORBIDDEN",
          "description": "You can't send gifs in this chat"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_MEDIA_FORBIDDEN",
          "description": "You can't send media in this chat"
        },
        {
          "code": 403,
          "type": "CHAT_SEND_STICKERS_FORBIDDEN",
          "description": "You can't send stickers in this chat."
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "EXTERNAL_URL_INVALID",
          "description": "External URL invalid"
        },
        {
          "code": 400,
          "type": "FILE_PARTS_INVALID",
          "description": "The number of file parts is invalid"
        },
        {
          "code": 400,
          "type": "FILE_PART_LENGTH_INVALID",
          "description": "The length of a file part is invalid"
        },
        {
          "code": 400,
          "type": "IMAGE_PROCESS_FAILED",
          "description": "Failure while processing image"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MD5_CHECKSUM_INVALID",
          "description": "The MD5 checksums do not match"
        },
        {
          "code": 400,
          "type": "MEDIA_CAPTION_TOO_LONG",
          "description": "The caption is too long"
        },
        {
          "code": 400,
          "type": "MEDIA_EMPTY",
          "description": "The provided media object is invalid"
        },
        {
          "code": 400,
          "type": "MEDIA_INVALID",
          "description": "Media invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_EXT_INVALID",
          "description": "The extension of the photo is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_INVALID_DIMENSIONS",
          "description": "The photo dimensions are invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_SAVE_FILE_INVALID",
          "description": "Internal issues, try again later"
        },
        {
          "code": 400,
          "type": "POLL_ANSWERS_INVALID",
          "description": "Invalid poll answers were provided"
        },
        {
          "code": 400,
          "type": "POLL_OPTION_DUPLICATE",
          "description": "Duplicate poll options provided"
        },
        {
          "code": 400,
          "type": "POLL_OPTION_INVALID",
          "description": "Invalid poll option provided"
        },
        {
          "code": 400,
          "type": "QUIZ_CORRECT_ANSWERS_EMPTY",
          "description": "No correct quiz answer was specified"
        },
        {
          "code": 400,
          "type": "QUIZ_CORRECT_ANSWER_INVALID",
          "description": "An invalid value was provided to the correct_answers field"
        },
        {
          "code": 400,
          "type": "REPLY_MARKUP_BUY_EMPTY",
          "description": "Reply markup for buy button empty"
        },
        {
          "code": 400,
          "type": "REPLY_MARKUP_INVALID",
          "description": "The provided reply markup is invalid"
        },
        {
          "code": 400,
          "type": "SCHEDULE_TOO_MUCH",
          "description": "There are too many scheduled messages"
        },
        {
          "code": 420,
          "type": "SLOWMODE_WAIT_X",
          "description": "Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat."
        },
        {
          "code": 400,
          "type": "TTL_MEDIA_INVALID",
          "description": "Invalid media Time To Live was provided"
        },
        {
          "code": 400,
          "type": "USER_BANNED_IN_CHANNEL",
          "description": "You're banned from sending messages in supergroups/channels"
        },
        {
          "code": 400,
          "type": "USER_IS_BLOCKED",
          "description": "You were blocked by this user"
        },
        {
          "code": 400,
          "type": "USER_IS_BOT",
          "description": "Bots can't send messages to other bots"
        },
        {
          "code": 400,
          "type": "WEBPAGE_CURL_FAILED",
          "description": "Failure while fetching the webpage with cURL"
        },
        {
          "code": 400,
          "type": "WEBPAGE_MEDIA_EMPTY",
          "description": "Webpage media empty"
        },
        {
          "code": 400,
          "type": "YOU_BLOCKED_USER",
          "description": "You blocked this user"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendMessage": {
      "name": "messages.sendMessage",
      "description": [
        "Sends a message to a chat"
      ],
      "parameters": {
        "background": {
          "description": "Send this message as background message",
          "links": null
        },
        "clear_draft": {
          "description": "Clear the draft field",
          "links": null
        },
        "entities": {
          "description": "Message entities¹ for sending styled text",
          "links": [
            "https://core.telegram.org/api/entities"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "The message",
          "links": null
        },
        "no_webpage": {
          "description": "Set this flag to disable generation of the webpage preview",
          "links": null
        },
        "peer": {
          "description": "The destination where the message will be sent",
          "links": null
        },
        "random_id": {
          "description": "Unique client message ID required to prevent message resending",
          "links": null
        },
        "reply_markup": {
          "description": "Reply markup for sending bot buttons",
          "links": null
        },
        "reply_to_msg_id": {
          "description": "The message ID to which this message will reply to",
          "links": null
        },
        "schedule_date": {
          "description": "Scheduled message date for scheduled messages¹",
          "links": [
            "https://core.telegram.org/api/scheduled-messages"
          ]
        },
        "silent": {
          "description": "Send this message silently (no notifications for the receivers)",
          "links": null
        }
      },
      "errors": [
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        },
        {
          "code": 400,
          "type": "BOT_DOMAIN_INVALID",
          "description": "Bot domain invalid"
        },
        {
          "code": 400,
          "type": "BOT_INVALID",
          "description": "This is not a valid bot"
        },
        {
          "code": 400,
          "type": "BUTTON_DATA_INVALID",
          "description": "The data of one or more of the buttons you provided is invalid"
        },
        {
          "code": 400,
          "type": "BUTTON_TYPE_INVALID",
          "description": "The type of one or more of the buttons you provided is invalid"
        },
        {
          "code": 400,
          "type": "BUTTON_URL_INVALID",
          "description": "Button URL invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 400,
          "type": "CHAT_RESTRICTED",
          "description": "You can't send messages in this chat, you were restricted"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "ENCRYPTION_DECLINED",
          "description": "The secret chat was declined"
        },
        {
          "code": 400,
          "type": "ENTITY_MENTION_USER_INVALID",
          "description": "You mentioned an invalid user"
        },
        {
          "code": 400,
          "type": "FROM_MESSAGE_BOT_DISABLED",
          "description": "Bots can't use fromMessage min constructors"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MESSAGE_EMPTY",
          "description": "The provided message is empty"
        },
        {
          "code": 400,
          "type": "MESSAGE_TOO_LONG",
          "description": "The provided message is too long"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Provided reply_to_msg_id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "PINNED_DIALOGS_TOO_MUCH",
          "description": "Too many pinned dialogs"
        },
        {
          "code": 400,
          "type": "REPLY_MARKUP_INVALID",
          "description": "The provided reply markup is invalid"
        },
        {
          "code": 400,
          "type": "SCHEDULE_BOT_NOT_ALLOWED",
          "description": "Bots cannot schedule messages"
        },
        {
          "code": 400,
          "type": "SCHEDULE_DATE_TOO_LATE",
          "description": "You can't schedule a message this far in the future"
        },
        {
          "code": 400,
          "type": "SCHEDULE_TOO_MUCH",
          "description": "There are too many scheduled messages"
        },
        {
          "code": 420,
          "type": "SLOWMODE_WAIT_X",
          "description": "Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat."
        },
        {
          "code": 400,
          "type": "USER_BANNED_IN_CHANNEL",
          "description": "You're banned from sending messages in supergroups/channels"
        },
        {
          "code": 400,
          "type": "USER_IS_BLOCKED",
          "description": "You were blocked by this user"
        },
        {
          "code": 400,
          "type": "USER_IS_BOT",
          "description": "Bots can't send messages to other bots"
        },
        {
          "code": 400,
          "type": "YOU_BLOCKED_USER",
          "description": "You blocked this user"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendMultiMedia": {
      "name": "messages.sendMultiMedia",
      "description": [
        "Send an album or grouped media¹"
      ],
      "links": [
        "https://core.telegram.org/api/files#albums-grouped-media"
      ],
      "parameters": {
        "background": {
          "description": "Send in background?",
          "links": null
        },
        "clear_draft": {
          "description": "Whether to clear drafts¹",
          "links": [
            "https://core.telegram.org/api/drafts"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "multi_media": {
          "description": "The medias to send",
          "links": null
        },
        "peer": {
          "description": "The destination chat",
          "links": null
        },
        "reply_to_msg_id": {
          "description": "The message to reply to",
          "links": null
        },
        "schedule_date": {
          "description": "Scheduled message date for scheduled messages",
          "links": null
        },
        "silent": {
          "description": "Whether to send the album silently (no notification triggered)",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "MEDIA_EMPTY",
          "description": "The provided media object is invalid"
        },
        {
          "code": 400,
          "type": "MEDIA_INVALID",
          "description": "Media invalid"
        },
        {
          "code": 400,
          "type": "MULTI_MEDIA_TOO_LONG",
          "description": "Too many media files for album"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "RANDOM_ID_EMPTY",
          "description": "Random ID empty"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendScheduledMessages": {
      "name": "messages.sendScheduledMessages",
      "description": [
        "Send scheduled messages right away"
      ],
      "parameters": {
        "id": {
          "description": "Scheduled message IDs",
          "links": null
        },
        "peer": {
          "description": "Peer",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendScreenshotNotification": {
      "name": "messages.sendScreenshotNotification",
      "description": [
        "Notify the other user in a private chat that a screenshot of the chat was taken"
      ],
      "parameters": {
        "peer": {
          "description": "Other user",
          "links": null
        },
        "random_id": {
          "description": "Random ID to avoid message resending",
          "links": null
        },
        "reply_to_msg_id": {
          "description": "ID of message that was screenshotted, can be 0",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.sendVote": {
      "name": "messages.sendVote",
      "description": [
        "Vote in a poll¹"
      ],
      "links": [
        "https://core.telegram.org/constructor/poll"
      ],
      "parameters": {
        "msg_id": {
          "description": "The message ID of the poll",
          "links": null
        },
        "options": {
          "description": "The options that were chosen",
          "links": null
        },
        "peer": {
          "description": "The chat where the poll was sent",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "MESSAGE_POLL_CLOSED",
          "description": "Poll closed"
        },
        {
          "code": 400,
          "type": "OPTIONS_TOO_MUCH",
          "description": "Too many options provided"
        },
        {
          "code": 400,
          "type": "OPTION_INVALID",
          "description": "Invalid option selected"
        },
        {
          "code": 400,
          "type": "REVOTE_NOT_ALLOWED",
          "description": "You cannot change your vote"
        }
      ],
      "bot_can_use": true
    },
    "messages.setBotCallbackAnswer": {
      "name": "messages.setBotCallbackAnswer",
      "description": [
        "Set the callback answer to a user button press (bots only)"
      ],
      "parameters": {
        "alert": {
          "description": "Whether to show the message as a popup instead of a toast notification",
          "links": null
        },
        "cache_time": {
          "description": "Cache validity",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "message": {
          "description": "Popup to show",
          "links": null
        },
        "query_id": {
          "description": "Query ID",
          "links": null
        },
        "url": {
          "description": "URL to open",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "QUERY_ID_INVALID",
          "description": "The query ID is invalid"
        },
        {
          "code": 400,
          "type": "URL_INVALID",
          "description": "Invalid URL provided"
        }
      ],
      "bot_can_use": true
    },
    "messages.setBotPrecheckoutResults": {
      "name": "messages.setBotPrecheckoutResults",
      "description": [
        "Once the user has confirmed their payment and shipping details, the bot receives an updateBotPrecheckoutQuery¹ update.",
        "Use this method to respond to such pre-checkout queries.",
        "Note: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent."
      ],
      "links": [
        "https://core.telegram.org/constructor/updateBotPrecheckoutQuery"
      ],
      "parameters": {
        "error": {
          "description": "Required if the success isn't set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "query_id": {
          "description": "Unique identifier for the query to be answered",
          "links": null
        },
        "success": {
          "description": "Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the error field, instead",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "ERROR_TEXT_EMPTY",
          "description": "The provided error message is empty"
        }
      ],
      "bot_can_use": true
    },
    "messages.setBotShippingResults": {
      "name": "messages.setBotShippingResults",
      "description": [
        "If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the bot will receive an updateBotShippingQuery¹ update. Use this method to reply to shipping queries."
      ],
      "links": [
        "https://core.telegram.org/constructor/updateBotShippingQuery"
      ],
      "parameters": {
        "error": {
          "description": "Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "query_id": {
          "description": "Unique identifier for the query to be answered",
          "links": null
        },
        "shipping_options": {
          "description": "A vector of available shipping options.",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "QUERY_ID_INVALID",
          "description": "The query ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.setEncryptedTyping": {
      "name": "messages.setEncryptedTyping",
      "description": [
        "Send typing event by the current user to a secret chat."
      ],
      "parameters": {
        "peer": {
          "description": "Secret chat ID",
          "links": null
        },
        "typing": {
          "description": "Typing.Possible values:(boolTrue)¹, if the user started typing and more than 5 seconds have passed since the last request(boolFalse)², if the user stopped typing",
          "links": [
            "https://core.telegram.org/constructor/boolTrue",
            "https://core.telegram.org/constructor/boolFalse"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.setGameScore": {
      "name": "messages.setGameScore",
      "description": [
        "Use this method to set the score of the specified user in a game sent as a normal message (bots only)."
      ],
      "parameters": {
        "edit_message": {
          "description": "Set this flag if the game message should be automatically edited to include the current scoreboard",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "force": {
          "description": "Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
          "links": null
        },
        "id": {
          "description": "Identifier of the sent message",
          "links": null
        },
        "peer": {
          "description": "Unique identifier of target chat",
          "links": null
        },
        "score": {
          "description": "New score",
          "links": null
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "USER_BOT_REQUIRED",
          "description": "This method can only be called by a bot"
        }
      ],
      "bot_can_use": true
    },
    "messages.setInlineBotResults": {
      "name": "messages.setInlineBotResults",
      "description": [
        "Answer an inline query, for bots only"
      ],
      "parameters": {
        "cache_time": {
          "description": "The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "gallery": {
          "description": "Set this flag if the results are composed of media files",
          "links": null
        },
        "next_offset": {
          "description": "Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes.",
          "links": null
        },
        "private": {
          "description": "Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query",
          "links": null
        },
        "query_id": {
          "description": "Unique identifier for the answered query",
          "links": null
        },
        "results": {
          "description": "Vector of results for the inline query",
          "links": null
        },
        "switch_pm": {
          "description": "If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter.",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "ARTICLE_TITLE_EMPTY",
          "description": "The title of the article is empty"
        },
        {
          "code": 400,
          "type": "BUTTON_DATA_INVALID",
          "description": "The data of one or more of the buttons you provided is invalid"
        },
        {
          "code": 400,
          "type": "BUTTON_TYPE_INVALID",
          "description": "The type of one or more of the buttons you provided is invalid"
        },
        {
          "code": 400,
          "type": "BUTTON_URL_INVALID",
          "description": "Button URL invalid"
        },
        {
          "code": 400,
          "type": "GIF_CONTENT_TYPE_INVALID",
          "description": "GIF content-type invalid"
        },
        {
          "code": 400,
          "type": "MESSAGE_EMPTY",
          "description": "The provided message is empty"
        },
        {
          "code": 400,
          "type": "MESSAGE_TOO_LONG",
          "description": "The provided message is too long"
        },
        {
          "code": 400,
          "type": "PHOTO_CONTENT_TYPE_INVALID",
          "description": "Photo mime-type invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_CONTENT_URL_EMPTY",
          "description": "Photo URL invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_INVALID",
          "description": "Photo invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_THUMB_URL_EMPTY",
          "description": "Photo thumbnail URL is empty"
        },
        {
          "code": 400,
          "type": "QUERY_ID_INVALID",
          "description": "The query ID is invalid"
        },
        {
          "code": 400,
          "type": "REPLY_MARKUP_INVALID",
          "description": "The provided reply markup is invalid"
        },
        {
          "code": 400,
          "type": "RESULTS_TOO_MUCH",
          "description": "Too many results were provided"
        },
        {
          "code": 400,
          "type": "RESULT_ID_DUPLICATE",
          "description": "You provided a duplicate result ID"
        },
        {
          "code": 400,
          "type": "RESULT_TYPE_INVALID",
          "description": "Result type invalid"
        },
        {
          "code": 400,
          "type": "SEND_MESSAGE_MEDIA_INVALID",
          "description": "Invalid media provided"
        },
        {
          "code": 400,
          "type": "SEND_MESSAGE_TYPE_INVALID",
          "description": "The message type is invalid"
        },
        {
          "code": 400,
          "type": "START_PARAM_INVALID",
          "description": "Start parameter invalid"
        },
        {
          "code": 403,
          "type": "USER_BOT_INVALID",
          "description": "This method can only be called by a bot"
        },
        {
          "code": 400,
          "type": "WEBDOCUMENT_INVALID",
          "description": "Invalid webdocument URL provided"
        },
        {
          "code": 400,
          "type": "WEBDOCUMENT_MIME_INVALID",
          "description": "Invalid webdocument mime type provided"
        },
        {
          "code": 400,
          "type": "WEBDOCUMENT_SIZE_TOO_BIG",
          "description": "Webdocument is too big!"
        }
      ],
      "bot_can_use": true
    },
    "messages.setInlineGameScore": {
      "name": "messages.setInlineGameScore",
      "description": [
        "Use this method to set the score of the specified user in a game sent as an inline message (bots only)."
      ],
      "parameters": {
        "edit_message": {
          "description": "Set this flag if the game message should be automatically edited to include the current scoreboard",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "force": {
          "description": "Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
          "links": null
        },
        "id": {
          "description": "ID of the inline message",
          "links": null
        },
        "score": {
          "description": "New score",
          "links": null
        },
        "user_id": {
          "description": "User identifier",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "USER_BOT_REQUIRED",
          "description": "This method can only be called by a bot"
        }
      ],
      "bot_can_use": true
    },
    "messages.setTyping": {
      "name": "messages.setTyping",
      "description": [
        "Sends a current user typing event (see SendMessageAction¹ for all event types) to a conversation partner or group."
      ],
      "links": [
        "https://core.telegram.org/type/SendMessageAction"
      ],
      "parameters": {
        "action": {
          "description": "Type of actionParameter added in Layer 17¹.",
          "links": [
            "https://core.telegram.org/api/layers#layer-17"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "Target user or group",
          "links": null
        },
        "top_msg_id": {
          "description": "Thread ID¹",
          "links": [
            "https://core.telegram.org/api/threads"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_ID_INVALID",
          "description": "The provided chat id is invalid"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "USER_BANNED_IN_CHANNEL",
          "description": "You're banned from sending messages in supergroups/channels"
        },
        {
          "code": 400,
          "type": "USER_IS_BLOCKED",
          "description": "You were blocked by this user"
        },
        {
          "code": 400,
          "type": "USER_IS_BOT",
          "description": "Bots can't send messages to other bots"
        }
      ],
      "bot_can_use": true
    },
    "messages.startBot": {
      "name": "messages.startBot",
      "description": [
        "Start a conversation with a bot using a deep linking parameter¹"
      ],
      "links": [
        "https://core.telegram.org/bots#deep-linking"
      ],
      "parameters": {
        "bot": {
          "description": "The bot",
          "links": null
        },
        "peer": {
          "description": "The chat where to start the bot, can be the bot's private chat or a group",
          "links": null
        },
        "random_id": {
          "description": "Random ID to avoid resending the same message",
          "links": null
        },
        "start_param": {
          "description": "Deep linking parameter¹",
          "links": [
            "https://core.telegram.org/bots#deep-linking"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOT_INVALID",
          "description": "This is not a valid bot"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "START_PARAM_EMPTY",
          "description": "The start parameter is empty"
        },
        {
          "code": 400,
          "type": "START_PARAM_INVALID",
          "description": "Start parameter invalid"
        },
        {
          "code": 400,
          "type": "START_PARAM_TOO_LONG",
          "description": "Start parameter is too long"
        }
      ],
      "bot_can_use": true
    },
    "messages.toggleDialogPin": {
      "name": "messages.toggleDialogPin",
      "description": [
        "Pin/unpin a dialog"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "The dialog to pin",
          "links": null
        },
        "pinned": {
          "description": "Whether to pin or unpin the dialog",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.toggleStickerSets": {
      "name": "messages.toggleStickerSets",
      "description": [
        "Apply changes to multiple stickersets"
      ],
      "parameters": {
        "archive": {
          "description": "Archive the specified stickersets",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "stickersets": {
          "description": "Stickersets to act upon",
          "links": null
        },
        "unarchive": {
          "description": "Unarchive the specified stickersets",
          "links": null
        },
        "uninstall": {
          "description": "Uninstall the specified stickersets",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.uninstallStickerSet": {
      "name": "messages.uninstallStickerSet",
      "description": [
        "Uninstall a stickerset"
      ],
      "parameters": {
        "stickerset": {
          "description": "The stickerset to uninstall",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "STICKERSET_INVALID",
          "description": "The provided sticker set is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.unpinAllMessages": {
      "name": "messages.unpinAllMessages",
      "description": [
        "Unpin¹ all pinned messages"
      ],
      "links": [
        "https://core.telegram.org/api/pin"
      ],
      "parameters": {
        "peer": {
          "description": "Chat where to unpin",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.updateDialogFilter": {
      "name": "messages.updateDialogFilter",
      "description": [
        "Update folder¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ],
      "parameters": {
        "filter": {
          "description": "Folder¹ info",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "Folder¹ ID",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FILTER_ID_INVALID",
          "description": "The specified filter ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "messages.updateDialogFiltersOrder": {
      "name": "messages.updateDialogFiltersOrder",
      "description": [
        "Reorder folders¹"
      ],
      "links": [
        "https://core.telegram.org/api/folders"
      ],
      "parameters": {
        "order": {
          "description": "New folder¹ order",
          "links": [
            "https://core.telegram.org/api/folders"
          ]
        }
      },
      "bot_can_use": true
    },
    "messages.updatePinnedMessage": {
      "name": "messages.updatePinnedMessage",
      "description": [
        "Pin a message"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "id": {
          "description": "The message to pin or unpin",
          "links": null
        },
        "peer": {
          "description": "The peer where to pin the message",
          "links": null
        },
        "pm_oneside": {
          "description": "Whether the message should only be pinned on the local side of a one-to-one chat",
          "links": null
        },
        "silent": {
          "description": "Pin the message silently, without triggering a notification",
          "links": null
        },
        "unpin": {
          "description": "Whether the message should unpinned or pinned",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 400,
          "type": "CHAT_NOT_MODIFIED",
          "description": "The pinned message wasn't modified"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        },
        {
          "code": 400,
          "type": "PIN_RESTRICTED",
          "description": "You can't pin messages"
        }
      ],
      "bot_can_use": true
    },
    "messages.uploadEncryptedFile": {
      "name": "messages.uploadEncryptedFile",
      "description": [
        "Upload encrypted file and associate it to a secret chat"
      ],
      "parameters": {
        "file": {
          "description": "The file",
          "links": null
        },
        "peer": {
          "description": "The secret chat to associate the file to",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "messages.uploadMedia": {
      "name": "messages.uploadMedia",
      "description": [
        "Upload a file and associate it to a chat (without actually sending it to the chat)"
      ],
      "parameters": {
        "media": {
          "description": "File uploaded in chunks as described in files »¹",
          "links": [
            "https://core.telegram.org/api/files"
          ]
        },
        "peer": {
          "description": "The chat, can be an inputPeerEmpty¹ for bots",
          "links": [
            "https://core.telegram.org/constructor/inputPeerEmpty"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOT_MISSING",
          "description": "This method can only be run by a bot"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        },
        {
          "code": 403,
          "type": "CHAT_WRITE_FORBIDDEN",
          "description": "You can't write in this chat"
        },
        {
          "code": 400,
          "type": "FILE_PARTS_INVALID",
          "description": "The number of file parts is invalid"
        },
        {
          "code": 400,
          "type": "IMAGE_PROCESS_FAILED",
          "description": "Failure while processing image"
        },
        {
          "code": 400,
          "type": "INPUT_USER_DEACTIVATED",
          "description": "The specified user was deleted"
        },
        {
          "code": 400,
          "type": "MEDIA_INVALID",
          "description": "Media invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_EXT_INVALID",
          "description": "The extension of the photo is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_SAVE_FILE_INVALID",
          "description": "Internal issues, try again later"
        },
        {
          "code": 400,
          "type": "USER_BANNED_IN_CHANNEL",
          "description": "You're banned from sending messages in supergroups/channels"
        },
        {
          "code": 400,
          "type": "WEBPAGE_CURL_FAILED",
          "description": "Failure while fetching the webpage with cURL"
        }
      ],
      "bot_can_use": true
    },
    "payments.clearSavedInfo": {
      "name": "payments.clearSavedInfo",
      "description": [
        "Clear saved payment information"
      ],
      "parameters": {
        "credentials": {
          "description": "Remove saved payment credentials",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "info": {
          "description": "Clear the last order settings saved by the user",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "payments.getBankCardData": {
      "name": "payments.getBankCardData",
      "description": [
        "Get info about a credit card"
      ],
      "parameters": {
        "number": {
          "description": "Credit card number",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "payments.getPaymentForm": {
      "name": "payments.getPaymentForm",
      "description": [
        "Get a payment form"
      ],
      "parameters": {
        "msg_id": {
          "description": "Message ID of payment form",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "payments.getPaymentReceipt": {
      "name": "payments.getPaymentReceipt",
      "description": [
        "Get payment receipt"
      ],
      "parameters": {
        "msg_id": {
          "description": "Message ID of receipt",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "payments.getSavedInfo": {
      "name": "payments.getSavedInfo",
      "description": [
        "Get saved payment information"
      ],
      "bot_can_use": true
    },
    "payments.sendPaymentForm": {
      "name": "payments.sendPaymentForm",
      "description": [
        "Send compiled payment form"
      ],
      "parameters": {
        "credentials": {
          "description": "Payment credentials",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "msg_id": {
          "description": "Message ID of form",
          "links": null
        },
        "requested_info_id": {
          "description": "ID of saved and validated order info¹",
          "links": [
            "https://core.telegram.org/constructor/payments.validatedRequestedInfo"
          ]
        },
        "shipping_option_id": {
          "description": "Chosen shipping option ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "payments.validateRequestedInfo": {
      "name": "payments.validateRequestedInfo",
      "description": [
        "Submit requested order information for validation"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "info": {
          "description": "Requested order information",
          "links": null
        },
        "msg_id": {
          "description": "Message ID of payment form",
          "links": null
        },
        "save": {
          "description": "Save order information to re-use it for future orders",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "phone.acceptCall": {
      "name": "phone.acceptCall",
      "description": [
        "Accept incoming call"
      ],
      "parameters": {
        "g_b": {
          "description": "Parameter for E2E encryption key exchange »¹",
          "links": [
            "https://core.telegram.org/api/end-to-end/voice-calls"
          ]
        },
        "peer": {
          "description": "The call to accept",
          "links": null
        },
        "protocol": {
          "description": "Phone call settings",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CALL_ALREADY_ACCEPTED",
          "description": "The call was already accepted"
        },
        {
          "code": 400,
          "type": "CALL_ALREADY_DECLINED",
          "description": "The call was already declined"
        },
        {
          "code": 400,
          "type": "CALL_PEER_INVALID",
          "description": "The provided call peer object is invalid"
        },
        {
          "code": 400,
          "type": "CALL_PROTOCOL_FLAGS_INVALID",
          "description": "Call protocol flags invalid"
        }
      ],
      "bot_can_use": true
    },
    "phone.confirmCall": {
      "name": "phone.confirmCall",
      "description": [
        "Complete phone call E2E encryption key exchange »¹"
      ],
      "links": [
        "https://core.telegram.org/api/end-to-end/voice-calls"
      ],
      "parameters": {
        "g_a": {
          "description": "Parameter for E2E encryption key exchange »¹",
          "links": [
            "https://core.telegram.org/api/end-to-end/voice-calls"
          ]
        },
        "key_fingerprint": {
          "description": "Key fingerprint",
          "links": null
        },
        "peer": {
          "description": "The phone call",
          "links": null
        },
        "protocol": {
          "description": "Phone call settings",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CALL_ALREADY_DECLINED",
          "description": "The call was already declined"
        },
        {
          "code": 400,
          "type": "CALL_PEER_INVALID",
          "description": "The provided call peer object is invalid"
        }
      ],
      "bot_can_use": true
    },
    "phone.discardCall": {
      "name": "phone.discardCall",
      "description": [
        "Refuse or end running call"
      ],
      "parameters": {
        "connection_id": {
          "description": "Preferred libtgvoip relay ID",
          "links": null
        },
        "duration": {
          "description": "Call duration",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "The phone call",
          "links": null
        },
        "reason": {
          "description": "Why was the call discarded",
          "links": null
        },
        "video": {
          "description": "Whether this is a video call",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CALL_ALREADY_ACCEPTED",
          "description": "The call was already accepted"
        },
        {
          "code": 400,
          "type": "CALL_PEER_INVALID",
          "description": "The provided call peer object is invalid"
        }
      ],
      "bot_can_use": true
    },
    "phone.getCallConfig": {
      "name": "phone.getCallConfig",
      "description": [
        "Get phone call configuration to be passed to libtgvoip's shared config"
      ],
      "bot_can_use": true
    },
    "phone.receivedCall": {
      "name": "phone.receivedCall",
      "description": [
        "Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended."
      ],
      "parameters": {
        "peer": {
          "description": "The phone call we're currently in",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CALL_ALREADY_DECLINED",
          "description": "The call was already declined"
        },
        {
          "code": 400,
          "type": "CALL_PEER_INVALID",
          "description": "The provided call peer object is invalid"
        }
      ],
      "bot_can_use": true
    },
    "phone.requestCall": {
      "name": "phone.requestCall",
      "description": [
        "Start a telegram phone call"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "g_a_hash": {
          "description": "Parameter for E2E encryption key exchange »¹",
          "links": [
            "https://core.telegram.org/api/end-to-end/voice-calls"
          ]
        },
        "protocol": {
          "description": "Phone call settings",
          "links": null
        },
        "random_id": {
          "description": "Random ID to avoid resending the same object",
          "links": null
        },
        "user_id": {
          "description": "Destination of the phone call",
          "links": null
        },
        "video": {
          "description": "Whether to start a video call",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CALL_PROTOCOL_FLAGS_INVALID",
          "description": "Call protocol flags invalid"
        },
        {
          "code": 400,
          "type": "PARTICIPANT_VERSION_OUTDATED",
          "description": "The other participant does not use an up to date telegram client with support for calls"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        },
        {
          "code": 403,
          "type": "USER_IS_BLOCKED",
          "description": "You were blocked by this user"
        },
        {
          "code": 403,
          "type": "USER_PRIVACY_RESTRICTED",
          "description": "The user's privacy settings do not allow you to do this"
        }
      ],
      "bot_can_use": true
    },
    "phone.saveCallDebug": {
      "name": "phone.saveCallDebug",
      "description": [
        "Send phone call debug data to server"
      ],
      "parameters": {
        "debug": {
          "description": "Debug statistics obtained from libtgvoip",
          "links": null
        },
        "peer": {
          "description": "Phone call",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CALL_PEER_INVALID",
          "description": "The provided call peer object is invalid"
        },
        {
          "code": 400,
          "type": "DATA_JSON_INVALID",
          "description": "The provided JSON data is invalid"
        }
      ],
      "bot_can_use": true
    },
    "phone.sendSignalingData": {
      "name": "phone.sendSignalingData",
      "description": [
        "Send VoIP signaling data"
      ],
      "parameters": {
        "data": {
          "description": "Signaling payload",
          "links": null
        },
        "peer": {
          "description": "Phone call",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "phone.setCallRating": {
      "name": "phone.setCallRating",
      "description": [
        "Rate a call"
      ],
      "parameters": {
        "comment": {
          "description": "An additional comment",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "peer": {
          "description": "The call to rate",
          "links": null
        },
        "rating": {
          "description": "Rating in 1-5 stars",
          "links": null
        },
        "user_initiative": {
          "description": "Whether the user decided on their own initiative to rate the call",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CALL_PEER_INVALID",
          "description": "The provided call peer object is invalid"
        }
      ],
      "bot_can_use": true
    },
    "photos.deletePhotos": {
      "name": "photos.deletePhotos",
      "description": [
        "Deletes profile photos."
      ],
      "parameters": {
        "id": {
          "description": "Input photos to delete",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "photos.getUserPhotos": {
      "name": "photos.getUserPhotos",
      "description": [
        "Returns the list of user photos."
      ],
      "parameters": {
        "limit": {
          "description": "Number of list elements to be returned",
          "links": null
        },
        "max_id": {
          "description": "If a positive value was transferred, the method will return only photos with IDs less than the set one",
          "links": null
        },
        "offset": {
          "description": "Number of list elements to be skipped",
          "links": null
        },
        "user_id": {
          "description": "User ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "MAX_ID_INVALID",
          "description": "The provided max ID is invalid"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "photos.updateProfilePhoto": {
      "name": "photos.updateProfilePhoto",
      "description": [
        "Installs a previously uploaded photo as a profile photo."
      ],
      "parameters": {
        "id": {
          "description": "Input photo",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FILE_PARTS_INVALID",
          "description": "The number of file parts is invalid"
        },
        {
          "code": 400,
          "type": "IMAGE_PROCESS_FAILED",
          "description": "Failure while processing image"
        },
        {
          "code": 400,
          "type": "LOCATION_INVALID",
          "description": "The provided location is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_CROP_SIZE_SMALL",
          "description": "Photo is too small"
        },
        {
          "code": 400,
          "type": "PHOTO_EXT_INVALID",
          "description": "The extension of the photo is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_ID_INVALID",
          "description": "Photo ID invalid"
        }
      ],
      "bot_can_use": true
    },
    "photos.uploadProfilePhoto": {
      "name": "photos.uploadProfilePhoto",
      "description": [
        "Updates current user profile photo."
      ],
      "parameters": {
        "file": {
          "description": "File saved in parts by means of upload.saveFilePart¹ method",
          "links": [
            "https://core.telegram.org/method/upload.saveFilePart"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "video": {
          "description": "Animated profile picture¹ video",
          "links": [
            "https://core.telegram.org/api/files#animated-profile-pictures"
          ]
        },
        "video_start_ts": {
          "description": "Floating point UNIX timestamp in seconds, indicating the frame of the video that should be used as static preview.",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FILE_PARTS_INVALID",
          "description": "The number of file parts is invalid"
        },
        {
          "code": 400,
          "type": "IMAGE_PROCESS_FAILED",
          "description": "Failure while processing image"
        },
        {
          "code": 400,
          "type": "PHOTO_CROP_FILE_MISSING",
          "description": "Photo crop file missing"
        },
        {
          "code": 400,
          "type": "PHOTO_CROP_SIZE_SMALL",
          "description": "Photo is too small"
        },
        {
          "code": 400,
          "type": "PHOTO_EXT_INVALID",
          "description": "The extension of the photo is invalid"
        },
        {
          "code": 400,
          "type": "PHOTO_FILE_MISSING",
          "description": "Profile photo file missing"
        },
        {
          "code": 400,
          "type": "VIDEO_FILE_INVALID",
          "description": "The specified video file is invalid"
        }
      ],
      "bot_can_use": true
    },
    "stats.getBroadcastStats": {
      "name": "stats.getBroadcastStats",
      "description": [
        "Get channel statistics¹"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "parameters": {
        "channel": {
          "description": "The channel",
          "links": null
        },
        "dark": {
          "description": "Whether to enable dark theme for graph colors",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BROADCAST_REQUIRED",
          "description": "This method can only be called on a channel, please use stats.getMegagroupStats for supergroups"
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        }
      ],
      "bot_can_use": true
    },
    "stats.getMegagroupStats": {
      "name": "stats.getMegagroupStats",
      "description": [
        "Get supergroup statistics¹"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "parameters": {
        "channel": {
          "description": "Supergroup ID¹",
          "links": [
            "https://core.telegram.org/api/channel"
          ]
        },
        "dark": {
          "description": "Whether to enable dark theme for graph colors",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        }
      },
      "bot_can_use": true
    },
    "stats.getMessagePublicForwards": {
      "name": "stats.getMessagePublicForwards",
      "description": [
        "Obtains a list of messages, indicating to which other public channels was a channel message forwarded.",
        "Will return a list of messages¹ with peer_id equal to the public channel to which this message was forwarded."
      ],
      "links": [
        "https://core.telegram.org/constructor/message"
      ],
      "parameters": {
        "channel": {
          "description": "Source channel",
          "links": null
        },
        "limit": {
          "description": "Maximum number of results to return, see pagination¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "msg_id": {
          "description": "Source message ID",
          "links": null
        },
        "offset_id": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_peer": {
          "description": "Offsets for pagination, for more info click here¹",
          "links": [
            "https://core.telegram.org/api/offsets"
          ]
        },
        "offset_rate": {
          "description": "Initially 0, then set to the next_rate parameter of messages.messagesSlice¹",
          "links": [
            "https://core.telegram.org/constructor/messages.messagesSlice"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "MESSAGE_ID_INVALID",
          "description": "The provided message id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "stats.getMessageStats": {
      "name": "stats.getMessageStats",
      "description": [
        "Get message statistics¹"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "parameters": {
        "channel": {
          "description": "Channel ID",
          "links": null
        },
        "dark": {
          "description": "Whether to enable dark theme for graph colors",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "msg_id": {
          "description": "Message ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHAT_ADMIN_REQUIRED",
          "description": "You must be an admin in this chat to do this"
        }
      ],
      "bot_can_use": true
    },
    "stats.loadAsyncGraph": {
      "name": "stats.loadAsyncGraph",
      "description": [
        "Load channel statistics graph¹ asynchronously"
      ],
      "links": [
        "https://core.telegram.org/api/stats"
      ],
      "parameters": {
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "token": {
          "description": "Graph token from statsGraphAsync¹ constructor",
          "links": [
            "https://core.telegram.org/constructor/statsGraphAsync"
          ]
        },
        "x": {
          "description": "Zoom value, if required",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "GRAPH_INVALID_RELOAD",
          "description": "Invalid graph token provided, please reload the stats and provide the updated token"
        },
        {
          "code": 400,
          "type": "GRAPH_OUTDATED_RELOAD",
          "description": "The graph is outdated, please get a new async token using stats.getBroadcastStats"
        }
      ],
      "bot_can_use": true
    },
    "stickers.addStickerToSet": {
      "name": "stickers.addStickerToSet",
      "description": [
        "Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot."
      ],
      "parameters": {
        "sticker": {
          "description": "The sticker",
          "links": null
        },
        "stickerset": {
          "description": "The stickerset",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOT_MISSING",
          "description": "This method can only be run by a bot"
        },
        {
          "code": 400,
          "type": "STICKERSET_INVALID",
          "description": "The provided sticker set is invalid"
        }
      ],
      "bot_can_use": true
    },
    "stickers.changeStickerPosition": {
      "name": "stickers.changeStickerPosition",
      "description": [
        "Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot"
      ],
      "parameters": {
        "position": {
          "description": "The new position of the sticker, zero-based",
          "links": null
        },
        "sticker": {
          "description": "The sticker",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOT_MISSING",
          "description": "This method can only be run by a bot"
        },
        {
          "code": 400,
          "type": "STICKER_INVALID",
          "description": "The provided sticker is invalid"
        }
      ],
      "bot_can_use": true
    },
    "stickers.createStickerSet": {
      "name": "stickers.createStickerSet",
      "description": [
        "Create a stickerset, bots only."
      ],
      "parameters": {
        "animated": {
          "description": "Whether this is an animated stickerset",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "masks": {
          "description": "Whether this is a mask stickerset",
          "links": null
        },
        "short_name": {
          "description": "Sticker set name. Can contain only English letters, digits and underscores. Must end with \"by\" ( is case insensitive); 1-64 characters",
          "links": null
        },
        "stickers": {
          "description": "Stickers",
          "links": null
        },
        "thumb": {
          "description": "Thumbnail",
          "links": null
        },
        "title": {
          "description": "Stickerset name, 1-64 chars",
          "links": null
        },
        "user_id": {
          "description": "Stickerset owner",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOT_MISSING",
          "description": "This method can only be run by a bot"
        },
        {
          "code": 400,
          "type": "PACK_SHORT_NAME_INVALID",
          "description": "Short pack name invalid"
        },
        {
          "code": 400,
          "type": "PACK_SHORT_NAME_OCCUPIED",
          "description": "A stickerpack with this name already exists"
        },
        {
          "code": 400,
          "type": "PACK_TITLE_INVALID",
          "description": "The stickerpack title is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        },
        {
          "code": 400,
          "type": "SHORTNAME_OCCUPY_FAILED",
          "description": "An internal error occurred"
        },
        {
          "code": 400,
          "type": "STICKERS_EMPTY",
          "description": "No sticker provided"
        },
        {
          "code": 400,
          "type": "STICKER_EMOJI_INVALID",
          "description": "Sticker emoji invalid"
        },
        {
          "code": 400,
          "type": "STICKER_FILE_INVALID",
          "description": "Sticker file invalid"
        },
        {
          "code": 400,
          "type": "STICKER_PNG_DIMENSIONS",
          "description": "Sticker png dimensions invalid"
        },
        {
          "code": 400,
          "type": "STICKER_PNG_NOPNG",
          "description": "One of the specified stickers is not a valid PNG file"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "stickers.removeStickerFromSet": {
      "name": "stickers.removeStickerFromSet",
      "description": [
        "Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot."
      ],
      "parameters": {
        "sticker": {
          "description": "The sticker to remove",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "BOT_MISSING",
          "description": "This method can only be run by a bot"
        },
        {
          "code": 400,
          "type": "STICKER_INVALID",
          "description": "The provided sticker is invalid"
        }
      ],
      "bot_can_use": true
    },
    "stickers.setStickerSetThumb": {
      "name": "stickers.setStickerSetThumb",
      "description": [
        "Set stickerset thumbnail"
      ],
      "parameters": {
        "stickerset": {
          "description": "Stickerset",
          "links": null
        },
        "thumb": {
          "description": "Thumbnail",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "STICKERSET_INVALID",
          "description": "The provided sticker set is invalid"
        }
      ],
      "bot_can_use": true
    },
    "updates.getChannelDifference": {
      "name": "updates.getChannelDifference",
      "description": [
        "Returns the difference between the current state of updates of a certain channel and transmitted."
      ],
      "parameters": {
        "channel": {
          "description": "The channel",
          "links": null
        },
        "filter": {
          "description": "Messsage filter",
          "links": null
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "force": {
          "description": "Set to true to skip some possibly unneeded updates and reduce server-side load",
          "links": null
        },
        "limit": {
          "description": "How many updates to fetch, max 100000Ordinary (non-bot) users are supposed to pass 10-100",
          "links": null
        },
        "pts": {
          "description": "Persistent timestamp (see updates¹)",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 403,
          "type": "CHANNEL_PUBLIC_GROUP_NA",
          "description": "channel/supergroup not available"
        },
        {
          "code": 400,
          "type": "FROM_MESSAGE_BOT_DISABLED",
          "description": "Bots can't use fromMessage min constructors"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "PERSISTENT_TIMESTAMP_EMPTY",
          "description": "Persistent timestamp empty"
        },
        {
          "code": 400,
          "type": "PERSISTENT_TIMESTAMP_INVALID",
          "description": "Persistent timestamp invalid"
        },
        {
          "code": 400,
          "type": "PINNED_DIALOGS_TOO_MUCH",
          "description": "Too many pinned dialogs"
        },
        {
          "code": 400,
          "type": "RANGES_INVALID",
          "description": "Invalid range provided"
        }
      ],
      "bot_can_use": true
    },
    "updates.getDifference": {
      "name": "updates.getDifference",
      "description": [
        "Get new updates¹."
      ],
      "links": [
        "https://core.telegram.org/api/updates"
      ],
      "parameters": {
        "date": {
          "description": "date, see updates¹.",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "pts": {
          "description": "PTS, see updates¹.",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        },
        "pts_total_limit": {
          "description": "For fast updating: if provided and pts + pts_total_limit \u003c remote pts, updates.differenceTooLong¹ will be returned.Simply tells the server to not return the difference if it is bigger than pts_total_limitIf the remote pts is too big (\u003e ~4000000), this field will default to 1000000",
          "links": [
            "https://core.telegram.org/constructor/updates.differenceTooLong"
          ]
        },
        "qts": {
          "description": "QTS, see updates¹.",
          "links": [
            "https://core.telegram.org/api/updates"
          ]
        }
      },
      "errors": [
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        },
        {
          "code": 400,
          "type": "CDN_METHOD_INVALID",
          "description": "You can't call this method in a CDN DC"
        },
        {
          "code": 400,
          "type": "DATE_EMPTY",
          "description": "Date empty"
        },
        {
          "code": 400,
          "type": "PERSISTENT_TIMESTAMP_EMPTY",
          "description": "Persistent timestamp empty"
        },
        {
          "code": 400,
          "type": "PERSISTENT_TIMESTAMP_INVALID",
          "description": "Persistent timestamp invalid"
        }
      ],
      "bot_can_use": true
    },
    "updates.getState": {
      "name": "updates.getState",
      "description": [
        "Returns a current state of updates."
      ],
      "bot_can_use": true
    },
    "upload.getCdnFile": {
      "name": "upload.getCdnFile",
      "description": [
        "Download a CDN¹ file."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "parameters": {
        "file_token": {
          "description": "File token",
          "links": null
        },
        "limit": {
          "description": "Length of chunk to download",
          "links": null
        },
        "offset": {
          "description": "Offset of chunk to download",
          "links": null
        }
      },
      "bot_can_use": true
    },
    "upload.getCdnFileHashes": {
      "name": "upload.getCdnFileHashes",
      "description": [
        "Get SHA256 hashes for verifying downloaded CDN¹ files"
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "parameters": {
        "file_token": {
          "description": "File",
          "links": null
        },
        "offset": {
          "description": "Offset from which to start getting hashes",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CDN_METHOD_INVALID",
          "description": "You can't call this method in a CDN DC"
        },
        {
          "code": 400,
          "type": "RSA_DECRYPT_FAILED",
          "description": "Internal RSA decryption failed"
        }
      ],
      "bot_can_use": true
    },
    "upload.getFile": {
      "name": "upload.getFile",
      "description": [
        "Returns content of a whole file or its part."
      ],
      "parameters": {
        "cdn_supported": {
          "description": "Whether the current client supports CDN downloads¹",
          "links": [
            "https://core.telegram.org/cdn"
          ]
        },
        "flags": {
          "description": "Flags, see TL conditional fields¹",
          "links": [
            "https://core.telegram.org/mtproto/TL-combinators#conditional-fields"
          ]
        },
        "limit": {
          "description": "Number of bytes to be returned",
          "links": null
        },
        "location": {
          "description": "File location",
          "links": null
        },
        "offset": {
          "description": "Number of bytes to be skipped",
          "links": null
        },
        "precise": {
          "description": "Disable some checks on limit and offset values, useful for example to stream videos by keyframes",
          "links": null
        }
      },
      "errors": [
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        },
        {
          "code": 400,
          "type": "CHANNEL_INVALID",
          "description": "The provided channel is invalid"
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 406,
          "type": "FILEREF_UPGRADE_NEEDED",
          "description": "The client has to be updated in order to support file references"
        },
        {
          "code": 400,
          "type": "FILE_ID_INVALID",
          "description": "The provided file id is invalid"
        },
        {
          "code": 400,
          "type": "FILE_REFERENCE_*",
          "description": "The file reference expired, it must be refreshed"
        },
        {
          "code": 400,
          "type": "FILE_REFERENCE_EXPIRED",
          "description": "File reference expired, it must be refetched as described in https://core.telegram.org/api/file_reference"
        },
        {
          "code": 400,
          "type": "LIMIT_INVALID",
          "description": "The provided limit is invalid"
        },
        {
          "code": 400,
          "type": "LOCATION_INVALID",
          "description": "The provided location is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "OFFSET_INVALID",
          "description": "The provided offset is invalid"
        },
        {
          "code": 400,
          "type": "PEER_ID_INVALID",
          "description": "The provided peer id is invalid"
        }
      ],
      "bot_can_use": true
    },
    "upload.getFileHashes": {
      "name": "upload.getFileHashes",
      "description": [
        "Get SHA256 hashes for verifying downloaded files"
      ],
      "parameters": {
        "location": {
          "description": "File",
          "links": null
        },
        "offset": {
          "description": "Offset from which to get file hashes",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "LOCATION_INVALID",
          "description": "The provided location is invalid"
        }
      ],
      "bot_can_use": true
    },
    "upload.getWebfile": {
      "name": "upload.getWebfile",
      "description": [
        "Returns content of an HTTP file or a part, by proxying the request through telegram."
      ],
      "parameters": {
        "limit": {
          "description": "Number of bytes to be returned",
          "links": null
        },
        "location": {
          "description": "The file to download",
          "links": null
        },
        "offset": {
          "description": "Number of bytes to be skipped",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "LOCATION_INVALID",
          "description": "The provided location is invalid"
        }
      ],
      "bot_can_use": true
    },
    "upload.reuploadCdnFile": {
      "name": "upload.reuploadCdnFile",
      "description": [
        "Request a reupload of a certain file to a CDN DC¹."
      ],
      "links": [
        "https://core.telegram.org/cdn"
      ],
      "parameters": {
        "file_token": {
          "description": "File token",
          "links": null
        },
        "request_token": {
          "description": "Request token",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "RSA_DECRYPT_FAILED",
          "description": "Internal RSA decryption failed"
        }
      ],
      "bot_can_use": true
    },
    "upload.saveBigFilePart": {
      "name": "upload.saveBigFilePart",
      "description": [
        "Saves a part of a large file (over 10Mb in size) to be later passed to one of the methods."
      ],
      "parameters": {
        "bytes": {
          "description": "Binary data, part contents",
          "links": null
        },
        "file_id": {
          "description": "Random file id, created by the client",
          "links": null
        },
        "file_part": {
          "description": "Part sequence number",
          "links": null
        },
        "file_total_parts": {
          "description": "Total number of parts",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FILE_PARTS_INVALID",
          "description": "The number of file parts is invalid"
        },
        {
          "code": 400,
          "type": "FILE_PART_EMPTY",
          "description": "The provided file part is empty"
        },
        {
          "code": 400,
          "type": "FILE_PART_INVALID",
          "description": "The file part number is invalid"
        },
        {
          "code": 400,
          "type": "FILE_PART_SIZE_CHANGED",
          "description": "Provided file part size has changed"
        },
        {
          "code": 400,
          "type": "FILE_PART_SIZE_INVALID",
          "description": "The provided file part size is invalid"
        },
        {
          "code": 400,
          "type": "FILE_PART_TOO_BIG",
          "description": "The uploaded file part is too big"
        }
      ],
      "bot_can_use": true
    },
    "upload.saveFilePart": {
      "name": "upload.saveFilePart",
      "description": [
        "Saves a part of file for futher sending to one of the methods."
      ],
      "parameters": {
        "bytes": {
          "description": "Binary data, contend of a part",
          "links": null
        },
        "file_id": {
          "description": "Random file identifier created by the client",
          "links": null
        },
        "file_part": {
          "description": "Numerical order of a part",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "FILE_PART_EMPTY",
          "description": "The provided file part is empty"
        },
        {
          "code": 400,
          "type": "FILE_PART_INVALID",
          "description": "The file part number is invalid"
        }
      ],
      "bot_can_use": true
    },
    "users.getFullUser": {
      "name": "users.getFullUser",
      "description": [
        "Returns extended user info by ID."
      ],
      "parameters": {
        "id": {
          "description": "User ID",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        },
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    },
    "users.getUsers": {
      "name": "users.getUsers",
      "description": [
        "Returns basic user info according to their identifiers."
      ],
      "parameters": {
        "id": {
          "description": "List of user identifiers",
          "links": null
        }
      },
      "errors": [
        {
          "code": 401,
          "type": "AUTH_KEY_PERM_EMPTY",
          "description": "The temporary auth key must be binded to the permanent auth key to use these methods."
        },
        {
          "code": 400,
          "type": "CHANNEL_PRIVATE",
          "description": "You haven't joined this channel/supergroup"
        },
        {
          "code": 400,
          "type": "CONNECTION_NOT_INITED",
          "description": "Connection not initialized"
        },
        {
          "code": 400,
          "type": "INPUT_LAYER_INVALID",
          "description": "The provided layer is invalid"
        },
        {
          "code": 400,
          "type": "MSG_ID_INVALID",
          "description": "Invalid message ID provided"
        }
      ],
      "bot_can_use": true
    },
    "users.setSecureValueErrors": {
      "name": "users.setSecureValueErrors",
      "description": [
        "Notify the user that the sent passport¹ data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).",
        "Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues."
      ],
      "links": [
        "https://core.telegram.org/passport"
      ],
      "parameters": {
        "errors": {
          "description": "Errors",
          "links": null
        },
        "id": {
          "description": "The user",
          "links": null
        }
      },
      "errors": [
        {
          "code": 400,
          "type": "USER_ID_INVALID",
          "description": "The provided user ID is invalid"
        }
      ],
      "bot_can_use": true
    }
  }
}
